{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PnP Modern Search v4 \u00b6 The PnP 'Modern Search' solution is a set of SharePoint Online modern Web Parts allowing SharePoint super users, webmasters and developers to create highly flexible and personalized search based experiences in minutes. Before modern pages and web parts built on SPFx was introduced search driven scenarios was covered by the highly flexible classic search web parts, which supported any developer to add any HTML, CSS or JavaScript they wanted to tailor their specific scenario. In the modern world this was replaced by the Highlighted Content Web Part and a not very configurable search solution for Microsoft Search. To close the gap of customization and freedom the PnP Modern Search web parts got started back in 2017, and have stabilized on v3. While allowing flexibility it introduces security measures to block JavaScript and CSS injection, key to many of the enterprise companies using the web parts today in productions. As the project progressed and the search API's are moving from SharePoint to Microsoft Graph there was a need to restructure and re-invent the web parts. Hence v4 was born. The goal of v4 is to solve scenarios already solved by v3, but at the same time allow greater flexibility in how you extend the solution using web components and custom developer solutions outside of HTML/handlebars. As more and more Microsoft Search functionality is exposed via the Microsoft Graph Search API's, we will keep on investing in v4 to surface these great capabilities. What's included? \u00b6 The solution includes the following Web Parts: Component Description Search Results Retrieve data from a data source and render them in a specific layout. Search Filters Filter and refine data displayed in 'Search Results' Web Parts. Search Verticals Browse data as silos (i.e. tabs) from multiple data sources. Search box Let users enter free text queries sent to 'Search Results' Web Parts. Supported browsers \u00b6 Here is the list of supported browsers: Chrome Firefox Edge Edge Chromium Brave PnP Modern Search do not explicitly support Internet Explorer 11 . We think there are plenty of other options for enterprise scenarios in the market. Maybe it's time to move on. For developers, it represents an huge amount of time to make the solution compatible for a very low benefit. Hope you understand, ain't personal ;). Extensibility model \u00b6 By getting this solution, you also benefit from an advanced extensibility model allowing you to customize the solution according to your requirements if default features don't do the job for you. The supported extensions are: Custom layouts . Custom web components . Custom Handlebars customization (helpers, partials, etc.) . Custom event handlers for adaptive cards actions . Custom query modifiers . Custom data sources . Custom suggestions providers . With these available customizations options, you can do pretty much anything! Note Extensibility samples are centralized in a dedicated repository: https://github.com/microsoft-search/pnp-modern-search-extensibility-samples/tree/main . Use them to get started to create your own or reuse existing samples in your projects. Troubleshooting \u00b6 If you encounter an issue, please use the GitHub issues list of this repository . However, we will ask you to verify your issue as described here: Using Query tools to verify issues Also, to help us to resolve your issue, you can include screenshots or error messages coming from: The faulty Web Part itself. Errors displayed in the browser console (typically pressing F12). Errors displayed in the SharePoint console (pressing CTRL+F12) Issues, questions, feedback? \u00b6 For any issue, question or feedback, please the official GitHub repository . We will be happy to help you! Q&A \u00b6 We have a list of frequently asked questions available in our separate Q&A section . If you have a question, it might be already answered there. About \u00b6 PnP Modern Search version 4 initially made by Franck Cornu based on a fork of the @aequos 'Modern Data Visualizer' solution. Maintainers & contributors \u00b6 Here is the list of main contributors of the PnP Modern Search (all versions included) Mikael Svenson (Microsoft) - @mikaelsvenson Franck Cornu (Ubisoft) - @FranckCornu David Mehr (IOZAG) - @davmehr Brad Schlintz (Microsoft) - @bschlintz Patrik Hellgren (SherparsGroupAB) - @PatrikHellgren Per Ove Sandh\u00e5land (crayon) - @PerOve Marc Anderson ( Sympraxis) @sympmarc Fabio Franzini (Apvee Solutions) - @franzinifabio Paolo Pialorsi (PiaSys.com) - @PaoloPia Kasper Larsen (Fellowmind) - @kasperbolarsen","title":"Introduction"},{"location":"#pnp-modern-search-v4","text":"The PnP 'Modern Search' solution is a set of SharePoint Online modern Web Parts allowing SharePoint super users, webmasters and developers to create highly flexible and personalized search based experiences in minutes. Before modern pages and web parts built on SPFx was introduced search driven scenarios was covered by the highly flexible classic search web parts, which supported any developer to add any HTML, CSS or JavaScript they wanted to tailor their specific scenario. In the modern world this was replaced by the Highlighted Content Web Part and a not very configurable search solution for Microsoft Search. To close the gap of customization and freedom the PnP Modern Search web parts got started back in 2017, and have stabilized on v3. While allowing flexibility it introduces security measures to block JavaScript and CSS injection, key to many of the enterprise companies using the web parts today in productions. As the project progressed and the search API's are moving from SharePoint to Microsoft Graph there was a need to restructure and re-invent the web parts. Hence v4 was born. The goal of v4 is to solve scenarios already solved by v3, but at the same time allow greater flexibility in how you extend the solution using web components and custom developer solutions outside of HTML/handlebars. As more and more Microsoft Search functionality is exposed via the Microsoft Graph Search API's, we will keep on investing in v4 to surface these great capabilities.","title":"PnP Modern Search v4"},{"location":"#whats-included","text":"The solution includes the following Web Parts: Component Description Search Results Retrieve data from a data source and render them in a specific layout. Search Filters Filter and refine data displayed in 'Search Results' Web Parts. Search Verticals Browse data as silos (i.e. tabs) from multiple data sources. Search box Let users enter free text queries sent to 'Search Results' Web Parts.","title":"What's included?"},{"location":"#supported-browsers","text":"Here is the list of supported browsers: Chrome Firefox Edge Edge Chromium Brave PnP Modern Search do not explicitly support Internet Explorer 11 . We think there are plenty of other options for enterprise scenarios in the market. Maybe it's time to move on. For developers, it represents an huge amount of time to make the solution compatible for a very low benefit. Hope you understand, ain't personal ;).","title":"Supported browsers"},{"location":"#extensibility-model","text":"By getting this solution, you also benefit from an advanced extensibility model allowing you to customize the solution according to your requirements if default features don't do the job for you. The supported extensions are: Custom layouts . Custom web components . Custom Handlebars customization (helpers, partials, etc.) . Custom event handlers for adaptive cards actions . Custom query modifiers . Custom data sources . Custom suggestions providers . With these available customizations options, you can do pretty much anything! Note Extensibility samples are centralized in a dedicated repository: https://github.com/microsoft-search/pnp-modern-search-extensibility-samples/tree/main . Use them to get started to create your own or reuse existing samples in your projects.","title":"Extensibility model"},{"location":"#troubleshooting","text":"If you encounter an issue, please use the GitHub issues list of this repository . However, we will ask you to verify your issue as described here: Using Query tools to verify issues Also, to help us to resolve your issue, you can include screenshots or error messages coming from: The faulty Web Part itself. Errors displayed in the browser console (typically pressing F12). Errors displayed in the SharePoint console (pressing CTRL+F12)","title":"Troubleshooting"},{"location":"#issues-questions-feedback","text":"For any issue, question or feedback, please the official GitHub repository . We will be happy to help you!","title":"Issues, questions, feedback?"},{"location":"#qa","text":"We have a list of frequently asked questions available in our separate Q&A section . If you have a question, it might be already answered there.","title":"Q&amp;A"},{"location":"#about","text":"PnP Modern Search version 4 initially made by Franck Cornu based on a fork of the @aequos 'Modern Data Visualizer' solution.","title":"About"},{"location":"#maintainers-contributors","text":"Here is the list of main contributors of the PnP Modern Search (all versions included) Mikael Svenson (Microsoft) - @mikaelsvenson Franck Cornu (Ubisoft) - @FranckCornu David Mehr (IOZAG) - @davmehr Brad Schlintz (Microsoft) - @bschlintz Patrik Hellgren (SherparsGroupAB) - @PatrikHellgren Per Ove Sandh\u00e5land (crayon) - @PerOve Marc Anderson ( Sympraxis) @sympmarc Fabio Franzini (Apvee Solutions) - @franzinifabio Paolo Pialorsi (PiaSys.com) - @PaoloPia Kasper Larsen (Fellowmind) - @kasperbolarsen","title":"Maintainers &amp; contributors"},{"location":"QnA/","text":"Q : Should I switch from using SharePoint Search as the datasource to Microsoft Search? A : It depends on your requirements. Microsoft Search is the API being invested in going forward and allows search on entities outside of SharePoint such as Teams, Outlook and Graph Connector items. If you are only using SharePoint and OneDrive data, using features such as managed metadata, or creating a people directory, then using the SharePoint Search API is recommended for now. Q : How will the automatic disabling of SharePoint Online custom scripts affect the PnP Modern Search web parts? A : Not at all. The PnP Modern Search web parts are built using the SharePoint Framework, which is not affected by the automatic disabling of custom scripts. Q : In version 4.10.1 the LPC (Live Person Card) hover option became available as an option for the People Layout. What is the difference between LCP and Persona card? A : The Live Person Card does not require any additional Graph Permissions. The LPC can be customized to show additional fields from Entra ID, but not the same way as the pnp-people or mgt-person. However it will always show equal to any other people card shown in Microsoft 365.See https://learn.microsoft.com/en-us/graph/add-properties-profilecard. Q: Is the deprecation of SharePoint-Add-in's affecting PnP Modern Search? A : No, as the project is built using the SharePoint Framework, not the deprecated add-in model. **Q: Is the PnP Modern Search package certified by a 3rd party in order to ensure compliance with GDPR or similar requirements? ** A : No, it is up to you to review the source code in order to ensure compliance with any relevant requirements. The web parts do not store, process or log any data, thus GDPR is not directly relevant. Any privacy concern of data is up to how data is stored and protected at the source level, e.g. SharePoint. **Q: Are the PnP Modern Search web parts logging data to a local or remote receiver? ** A : No, the PnP Modern Search web parts are not logging data to any receiver, not even telemetry data. **Q: What is the ID or Name of the PnP Modern Search App Registration in Azure AD/Entra? ** A : There isn\u2019t an App Registration nor Enterprise application as PnP Modern Search does not rely on an application entry. The solution uses FedAuth cookies from SharePoint when calling the SharePoint Search API, and uses the \u201cSharePoint Online Client Extensibility\u201d app registrations when calling Graph API\u2019s. The solution does elevate any permissions when calling the API\u2019s as permissions are all of the type Delegated Permissions, meaning that the permissions are bound to the current user, not the PnP Modern Search solution. **Q: I am concerned about what will happen if the project is abandoned. Will Microsoft take over the project? ** A : It is hard to predict the future, but a vast number of companies are using the PnP Modern Search web parts in their solutions. The solution is hosted on GitHub owned by the Microsoft Search team. Most likely these companies will either clone the project and make a commercial version or will provide the manpower needed to keep the project in maintenance mode.","title":"QnA"},{"location":"build-the-doc/","text":"Building the Documentation \u00b6 Building the documentation locally can help you visualize change you are making to the docs. What you see locally should be what you see online. Building \u00b6 Documentation is built using MkDocs. You will need to latest version of Python (tested on version 3.7.1) and pip. If you're on the Windows operating system, make sure you have added Python to your Path environment variable . When executing the pip module on Windows you can prefix it with python -m . For example: python -m pip install mkdocs-material Install MkDocs pip install mkdocs==1.2.2 pip install markdown-include Install the Material theme pip install mkdocs-material==7.2.4 Serve it up mkdocs serve Open a browser to http://127.0.0.1:8000/ Deploy mkdocs gh-deploy from main branch","title":"Building documentation"},{"location":"build-the-doc/#building-the-documentation","text":"Building the documentation locally can help you visualize change you are making to the docs. What you see locally should be what you see online.","title":"Building the Documentation"},{"location":"build-the-doc/#building","text":"Documentation is built using MkDocs. You will need to latest version of Python (tested on version 3.7.1) and pip. If you're on the Windows operating system, make sure you have added Python to your Path environment variable . When executing the pip module on Windows you can prefix it with python -m . For example: python -m pip install mkdocs-material Install MkDocs pip install mkdocs==1.2.2 pip install markdown-include Install the Material theme pip install mkdocs-material==7.2.4 Serve it up mkdocs serve Open a browser to http://127.0.0.1:8000/ Deploy mkdocs gh-deploy from main branch","title":"Building"},{"location":"how-to-contribute/","text":"How to contribute? \u00b6 You can contribute to this project at multiple levels: Help us with the issues list by: Answer questions from the community Fix issues in the code Improve documentation by: Correcting typos Clarify configuration and examples Add business scenario tutorials Add new reusable components , suggestions providers or Query modifier to the extensibility library. Add Web Part translations As a result, we accept pull requests from the community. You can refer to this post to learn how to make a PR on a GitHub repository. Note Your PR must target the develop branch. Important Your PR will be automatically rejected if It alters too much of the solution core architecture or the amount of code is too substantial to be reviewed properly. You don't provide any detailled steps to test it. It contains a new feature that was not discussed previously with the maintainers. Setting up the solution locally \u00b6 Before making any PR, you need to setup this project locally on your machine. This solution is composed of three distinct parts: Project Description search-parts SPFx Web Parts code search-extensibility SPFx library component containing shared code between core Web Parts and extensibilty library. search-extensibility-demo Reusable components to extend capabilities of core Web Parts https://github.com/microsoft-search/pnp-modern-search-extensibility-samples. Setup the search-extensibility project \u00b6 Note By default, the search-parts and search-extensibility-demo projects use the npm reference @pnp/modern-search-extensibility . Follow these steps only if you intend to perform some changes on the search-extensibility project. Important Because this project is published as an npm reference, any change is critical. Please do not commit changes if you are not sure about what you are doing. The search-extensibilty project is an SPFx library component containing all the shared interfaces for the search-parts and search-extensibility-demo other SPFx projects. As a result, a symbolic link must be build to these projects first before it can be used : Open the search-extensibility project and install dependencies using npm i or your favorite package manager. Build the project using the command npm run build or gulp bundle . Run the command npm link to create a symbolic link. You can also refer to the official SPFx documentation about library component usage . A symbolic link is a shortcut that points to another directory or another project (in this case) on your system Setup the search-parts and search-extensibility-demo projects \u00b6 From the search-parts or search-extensibility-demo project, run npm i . Build the project using npm run build or gulp bundle . Note If you made local changes on the search-extensibility project, after each npm i , you must link your local search-extensibility project using the command npm link @pnp/modern-search-extensibility Debug the solution \u00b6 From Visual Studio Code console or any other console, from the search-parts folder, use the npm run serve command to start the server. We use SPFx Fast Serve Tool from Sergei Sergeev to speed up development process. From Visual Studio Code, use the 'Hosted Workbench' debug configuration with your URL to debug the Web Parts. Any changes to the code will trigger a new build and refresh your page automatically within seconds.","title":"How to contribute?"},{"location":"how-to-contribute/#how-to-contribute","text":"You can contribute to this project at multiple levels: Help us with the issues list by: Answer questions from the community Fix issues in the code Improve documentation by: Correcting typos Clarify configuration and examples Add business scenario tutorials Add new reusable components , suggestions providers or Query modifier to the extensibility library. Add Web Part translations As a result, we accept pull requests from the community. You can refer to this post to learn how to make a PR on a GitHub repository. Note Your PR must target the develop branch. Important Your PR will be automatically rejected if It alters too much of the solution core architecture or the amount of code is too substantial to be reviewed properly. You don't provide any detailled steps to test it. It contains a new feature that was not discussed previously with the maintainers.","title":"How to contribute?"},{"location":"how-to-contribute/#setting-up-the-solution-locally","text":"Before making any PR, you need to setup this project locally on your machine. This solution is composed of three distinct parts: Project Description search-parts SPFx Web Parts code search-extensibility SPFx library component containing shared code between core Web Parts and extensibilty library. search-extensibility-demo Reusable components to extend capabilities of core Web Parts https://github.com/microsoft-search/pnp-modern-search-extensibility-samples.","title":"Setting up the solution locally"},{"location":"how-to-contribute/#setup-the-search-extensibility-project","text":"Note By default, the search-parts and search-extensibility-demo projects use the npm reference @pnp/modern-search-extensibility . Follow these steps only if you intend to perform some changes on the search-extensibility project. Important Because this project is published as an npm reference, any change is critical. Please do not commit changes if you are not sure about what you are doing. The search-extensibilty project is an SPFx library component containing all the shared interfaces for the search-parts and search-extensibility-demo other SPFx projects. As a result, a symbolic link must be build to these projects first before it can be used : Open the search-extensibility project and install dependencies using npm i or your favorite package manager. Build the project using the command npm run build or gulp bundle . Run the command npm link to create a symbolic link. You can also refer to the official SPFx documentation about library component usage . A symbolic link is a shortcut that points to another directory or another project (in this case) on your system","title":"Setup the search-extensibility project"},{"location":"how-to-contribute/#setup-the-search-parts-and-search-extensibility-demo-projects","text":"From the search-parts or search-extensibility-demo project, run npm i . Build the project using npm run build or gulp bundle . Note If you made local changes on the search-extensibility project, after each npm i , you must link your local search-extensibility project using the command npm link @pnp/modern-search-extensibility","title":"Setup the search-parts and search-extensibility-demo projects"},{"location":"how-to-contribute/#debug-the-solution","text":"From Visual Studio Code console or any other console, from the search-parts folder, use the npm run serve command to start the server. We use SPFx Fast Serve Tool from Sergei Sergeev to speed up development process. From Visual Studio Code, use the 'Hosted Workbench' debug configuration with your URL to debug the Web Parts. Any changes to the code will trigger a new build and refresh your page automatically within seconds.","title":"Debug the solution"},{"location":"installation/","text":"Installation \u00b6 Download the latest SharePoint Framework packages pnp-modern-search-parts-v4.sppkg from the GitHub repository . Add pnp-modern-search-parts-v4.sppkg to the global tenant app catalog or a site collection app catalog. If you don't have an app catalog, follow this procedure to create one. The packages are deployed in the general Office 365 CDN meaning we don't host any code . For the pnp-modern-search-parts-v4.sppkg package, you can choose to make the solution available in all sites or force to install an app to the site every time. The solution asks the following API permissions by default to enhance the experience. These permissions are not mandatory . If you don't accept them, you will simply have less available features. You can approve scopes from the API Access screen in the SharePoint Admin Center: https://<tenant>-admin.sharepoint.com/_layouts/15/online/AdminHome.aspx#/webApiPermissionManagement If you'd like more details on this step, please see the Approving Scopes section below. Requested API permission Used for Presence.Read.All Read presence information of all users in your organization. User.Read The Microsoft Graph Toolkit persona card in the people layout. People.Read Same as above. Contacts.Read Same as above. User.Read.All Same as above. Chat.ReadWrite Allow sending quick message via the Graph Toolkit people card. Files.Read.All Allow search for files using Graph API (Drive / Drive Items). Mail.Read Allow search for user's e-mail using Graph API (Messages). Calendars.Read Allow search for user's calendar appointments using Graph API (Events). Sites.Read.All Allow search for sites using Graph API (Sites / List Items). ExternalItem.Read.All Allow search for connector items using Graph API (External Items). Bookmark.Read.All Allow search for Bookmarks in Microsoft Search in your organization. Acronym.Read.All Allow search for Acronyms in Microsoft Search in your organization. Chat.Read Allow search for Teams messages. ChannelMessage.Read.All Read user channel messages. Add the Web Parts to a SharePoint and start building! Approving Scopes \u00b6 You can approve the required scopes in the SharePoint Admin Center on the API Access page. When you visit that page, you will see any pending requests. The screenshot below shows the pending requests for the v4 solution. You'll need to approve each request one at a time. If you have questions about what the requested scopes mean and what permissions they provide, check the article Manage access to Azure AD-secured APIs . After you approve each request your view will be as shown in the screenshot below. Note about Guest users \u00b6 By default guest users do not have access to the App Catalog. So if you are not using the CDN option, any SPFx web part from the App Catalog will show an error message for guest users: There are basicly two options to solve this issue, give guest users access to the App Catalog (read) or use the CDN option. see this for more information.","title":"Installation"},{"location":"installation/#installation","text":"Download the latest SharePoint Framework packages pnp-modern-search-parts-v4.sppkg from the GitHub repository . Add pnp-modern-search-parts-v4.sppkg to the global tenant app catalog or a site collection app catalog. If you don't have an app catalog, follow this procedure to create one. The packages are deployed in the general Office 365 CDN meaning we don't host any code . For the pnp-modern-search-parts-v4.sppkg package, you can choose to make the solution available in all sites or force to install an app to the site every time. The solution asks the following API permissions by default to enhance the experience. These permissions are not mandatory . If you don't accept them, you will simply have less available features. You can approve scopes from the API Access screen in the SharePoint Admin Center: https://<tenant>-admin.sharepoint.com/_layouts/15/online/AdminHome.aspx#/webApiPermissionManagement If you'd like more details on this step, please see the Approving Scopes section below. Requested API permission Used for Presence.Read.All Read presence information of all users in your organization. User.Read The Microsoft Graph Toolkit persona card in the people layout. People.Read Same as above. Contacts.Read Same as above. User.Read.All Same as above. Chat.ReadWrite Allow sending quick message via the Graph Toolkit people card. Files.Read.All Allow search for files using Graph API (Drive / Drive Items). Mail.Read Allow search for user's e-mail using Graph API (Messages). Calendars.Read Allow search for user's calendar appointments using Graph API (Events). Sites.Read.All Allow search for sites using Graph API (Sites / List Items). ExternalItem.Read.All Allow search for connector items using Graph API (External Items). Bookmark.Read.All Allow search for Bookmarks in Microsoft Search in your organization. Acronym.Read.All Allow search for Acronyms in Microsoft Search in your organization. Chat.Read Allow search for Teams messages. ChannelMessage.Read.All Read user channel messages. Add the Web Parts to a SharePoint and start building!","title":"Installation"},{"location":"installation/#approving-scopes","text":"You can approve the required scopes in the SharePoint Admin Center on the API Access page. When you visit that page, you will see any pending requests. The screenshot below shows the pending requests for the v4 solution. You'll need to approve each request one at a time. If you have questions about what the requested scopes mean and what permissions they provide, check the article Manage access to Azure AD-secured APIs . After you approve each request your view will be as shown in the screenshot below.","title":"Approving Scopes"},{"location":"installation/#note-about-guest-users","text":"By default guest users do not have access to the App Catalog. So if you are not using the CDN option, any SPFx web part from the App Catalog will show an error message for guest users: There are basicly two options to solve this issue, give guest users access to the App Catalog (read) or use the CDN option. see this for more information.","title":"Note about Guest users"},{"location":"using-query-tools-to-verify-issues/","text":"Please verify your issue using these tools and methods before creating an Issue in the repository We DO value your questions and loves to see more and more people starting using PnP Modern Search, however we often see issues raised that has nothing to do with PnP Modern Search but the fact that the problem becomes visible here. The most common errors \u00b6 Typos or badly formed KQL queries Values not showing up on Managed Properties as expected Errors in mapping of Crawled Properties to Managed Properties (especially for Refiners) Custom User Profile Properties are mapped incorrectly We would therefore ask you to verify that the API delivers the results you are expecting before we starting looking for bugs in PnP Modern Search. Suggested tools SharePoint Search Query Tool (stand alone application) Guides for how to use the Query tool are available on the net, see for instance The Must Have Tool While Working with Search and SharePoint Online (Jasper Oosterveld) or Using SharePoint Search Query Tool (Antti Koskela) Video: Useful tools when working with Search Episode 2 Using the SP Query Tool (Kasper Larsen) An older video is also availble: SharePoint Power Hour: Search Query Tool - YouTube (Laura Rogers) Chrome extention SP Editor. (Chrome extention) Guide: SharePoint Search Console \u2013 Now available inside Chrome SP Editor! (Antti Koskela) Video: Useful tools when working with Search - Episode 1: Using the SP Editor (Kasper Larsen) SP Editor Chrome Extension for SharePoint Administrators and Developers (Denis Molodtsov) These tools gives you an exellent option to tinker with the search query and inspect the results. This will VERY often give you a clue where the issue is. Generic query errors \u00b6 In this case the query yields no result but you are certain that the name of the library is correct, what gives? Turns out that the Library has been renamed but the URL is still https://m365b839353.sharepoint.com/sites/NW-B2000eBike (note the dash) The Data is missing \u00b6 You set up a query on a few specific libraries and knows they contains 30 documents, but only 20 shows up, weird. There are a number of reasons: - One of the libraries is set as not to be searchable - Some of the documents have broken permissions and the user account you are using in the Search Tool doesn't have access - Only checked in and published files will be indexed - and the dreaded: the documents haven't been indexed yet The three first reasons are fairly easy to check and correct, but that last one is a bit tricky. The first step should be to prove or disprove the suspicion that the documents hasn't been indexed yet. One option is to use PnP PowerShell to query the CrawlLog, see Get-PnPSearchCrawlLog . Setting the -Filter to the URL of one of the missing documents should resolve that question. If the problem IS that the documents haven't been indexed yet, you can request a reindexing, either on a List/Library level or on a Site level. A forced Full Index as known from On-Premises is not available in SharePoint Online. People Search \u00b6 Your company has added a new property to the User Properties in SharePoint and you are responsible for implementing it in search. You have found the crawled property and mapped it to a RefinableString in order to use it as a filter. You have waited the required 24 hours but the RefinableString is still not showing up. What is wrong? Most likely you have either forgotten or didn't knew that you MUST change the full-text-index from Default to PeopleIdx in your custom Managed Property and/or RefinableString otherwise it will show up in the wrong index, and be of no use. Follow this guide (SearchExplained) and you shouldn't encounter this problem anymore.","title":"Using query tools to verify issues"},{"location":"using-query-tools-to-verify-issues/#the-most-common-errors","text":"Typos or badly formed KQL queries Values not showing up on Managed Properties as expected Errors in mapping of Crawled Properties to Managed Properties (especially for Refiners) Custom User Profile Properties are mapped incorrectly We would therefore ask you to verify that the API delivers the results you are expecting before we starting looking for bugs in PnP Modern Search.","title":"The most common errors"},{"location":"using-query-tools-to-verify-issues/#generic-query-errors","text":"In this case the query yields no result but you are certain that the name of the library is correct, what gives? Turns out that the Library has been renamed but the URL is still https://m365b839353.sharepoint.com/sites/NW-B2000eBike (note the dash)","title":"Generic query errors"},{"location":"using-query-tools-to-verify-issues/#the-data-is-missing","text":"You set up a query on a few specific libraries and knows they contains 30 documents, but only 20 shows up, weird. There are a number of reasons: - One of the libraries is set as not to be searchable - Some of the documents have broken permissions and the user account you are using in the Search Tool doesn't have access - Only checked in and published files will be indexed - and the dreaded: the documents haven't been indexed yet The three first reasons are fairly easy to check and correct, but that last one is a bit tricky. The first step should be to prove or disprove the suspicion that the documents hasn't been indexed yet. One option is to use PnP PowerShell to query the CrawlLog, see Get-PnPSearchCrawlLog . Setting the -Filter to the URL of one of the missing documents should resolve that question. If the problem IS that the documents haven't been indexed yet, you can request a reindexing, either on a List/Library level or on a Site level. A forced Full Index as known from On-Premises is not available in SharePoint Online.","title":"The Data is missing"},{"location":"using-query-tools-to-verify-issues/#people-search","text":"Your company has added a new property to the User Properties in SharePoint and you are responsible for implementing it in search. You have found the crawled property and mapped it to a RefinableString in order to use it as a filter. You have waited the required 24 hours but the RefinableString is still not showing up. What is wrong? Most likely you have either forgotten or didn't knew that you MUST change the full-text-index from Default to PeopleIdx in your custom Managed Property and/or RefinableString otherwise it will show up in the wrong index, and be of no use. Follow this guide (SearchExplained) and you shouldn't encounter this problem anymore.","title":"People Search"},{"location":"create-custom-layouts/","text":"If you are looking for inspiration, you can find a selection of custom layouts in the Custom layouts repository If you have a custom layout you want to share, please submit a PR to the repository. Scenario Create your first custom template \u00b6 Create your first custom template Store custom templates in SharePoint \u00b6 Storing custom templates as files in a SharePoint site, is great when you want to use them across sites and want some control. Edit custom templates in SharePoint \u00b6 Storing custom templates as files in a SharePoint site, is great when you want to use them across sites and want some control. Edit custom templates locally in Visual Studio Code \u00b6 When you have your templates in SharePoint, it is easy to setup a way to edit locally on your computer and still get the result in SharePoint almost instantly.","title":"Create custom layouts"},{"location":"create-custom-layouts/#scenario-create-your-first-custom-template","text":"Create your first custom template","title":"Scenario Create your first custom template"},{"location":"create-custom-layouts/#store-custom-templates-in-sharepoint","text":"Storing custom templates as files in a SharePoint site, is great when you want to use them across sites and want some control.","title":"Store custom templates in SharePoint"},{"location":"create-custom-layouts/#edit-custom-templates-in-sharepoint","text":"Storing custom templates as files in a SharePoint site, is great when you want to use them across sites and want some control.","title":"Edit custom templates in SharePoint"},{"location":"create-custom-layouts/#edit-custom-templates-locally-in-visual-studio-code","text":"When you have your templates in SharePoint, it is easy to setup a way to edit locally on your computer and still get the result in SharePoint almost instantly.","title":"Edit custom templates locally in Visual Studio Code"},{"location":"create-custom-layouts/create-your-first-custom-template/","text":"Create your first custom template \u00b6 You can make the results from a search, look like you want to by using a custom template. This article will get you started by creating a simple custom template. Steps \u00b6 Create a file Add content to the file Do a small change to the content. Store your file in SharePoint Create a file \u00b6 On your computer, create a file with the name: mycustomtemplate.html Note Make sure you name the file with the extension html Open this file in a text editor, like Notepad, VS Code or whatnot. The file is empty, so we need to add some basic needed html code. Copy the code below and paste it into the file and save. < content id = \"data-content\" > < style > /* Insert your CSS overrides here */ . example-themePrimary a { color : { { @ root . theme . palette . themeprimary } } } . myfirstcss { font-size : 30 px ; font-weight : 600 ; } . icon { width : 20 px ; height : 16 px ; } ul { list-style : none ; display : flex ; flex-wrap : wrap ; } ul li { display : flex ; padding : 8 px ; flex : 1 1 100 % ; } </ style > < div class = \"template\" > {{#if @root.properties.showSelectedFilters}} < pnp-selectedfilters data-filters = \"{{JSONstringify filters.selectedFilters 2}}\" data-filters-configuration = \"{{JSONstringify filters.filtersConfiguration 2}}\" data-instance-id = \"{{filters.instanceId}}\" data-operator = \"{{filters.filterOperator}}\" data-theme-variant = \"{{JSONstringify @root.theme}}\" ></ pnp-selectedfilters > {{/if}} {{#if @root.properties.showResultsCount}} < div class = \"template--resultCount\" > < label class = \"ms-fontWeight-semibold\" > {{getCountMessage @root.data.totalItemsCount @root.inputQueryText}} </ label > </ div > {{/if}} < ul class = \"template--custom\" > {{!-- This div below can be deleted. it is just for showing that is is your first template.--}} < div class = \"myfirstcss\" > This is my custom template!!!! </ div > {{#each data.items as |item|}} {{#> resultTypes item=item}} {{!-- The block below will be used as default item template if no result types matched --}} < li > < pnp-iconfile class = \"icon\" data-extension = \"{{slot item @root.slots.FileType}}\" data-theme-variant = \"{{JSONstringify @root.theme}}\" ></ pnp-iconfile > < span class = \"example-themePrimary\" >< a href = \"{{slot item @root.slots.Path}}\" > {{slot item @root.slots.Title}} </ a ></ span > </ li > {{/resultTypes}} {{/each}} </ ul > </ div > </ content > You now have your first custom template!! Change the content of your new template file \u00b6 You are going to make a small change to your template so you can check if it is working. Find the line where the text says: <div class=\"myfirstcss\">This is my custom template!!!!</div> Change the text \"This is my custom template!!!!\" to \"This is my first awesome custom template that rocks!!!!\". Maybe you want to add your name to? Upload the custom template to a SharePoint library \u00b6 Open a SharePoint site you use for development. Or create one. Open Shared Documents Create a folder called \"PnPSearchTemplates\" Upload the file to this folder. The URL to this template is: <siteurl>/Shared Documents/PnPSearchTemplates/mycustomtemplate.html Change <siteurl> with the URL of the site you created/are using. Will be something like this: https://contoso.sharepoint.com/sites/mydevsite You will need this when you are configuring the PnP Search Template web part. Test the custom template \u00b6 Open a SharePoint site you use for development. Create a new page, call it what you want and use whatever template you want (Blank is fine) In a section add the \"PnP Search Results\" web part Choose to configure the web part Select SharePoint search Make sure you get some results by typing in a search term in the Query template, like \"{searchTerms} *\" Go to page 2 Select \"Custom\" layout Under \"Use an external template URL\", type in the URL for the custom template file. You cannot type in a URL that does not exist, if so you get an error message. Click outside the URL text box. Publish the page Did the results change layout? If so you have succeeded! Troubleshooting \u00b6 If not, check if you copied all the text into the file, and that you did not change anything else than the text. Pictures \u00b6 Insert the URL in \"Use an external template URL\" What the custom search result looks like","title":"Create your first custom template"},{"location":"create-custom-layouts/create-your-first-custom-template/#create-your-first-custom-template","text":"You can make the results from a search, look like you want to by using a custom template. This article will get you started by creating a simple custom template.","title":"Create your first custom template"},{"location":"create-custom-layouts/create-your-first-custom-template/#steps","text":"Create a file Add content to the file Do a small change to the content. Store your file in SharePoint","title":"Steps"},{"location":"create-custom-layouts/create-your-first-custom-template/#create-a-file","text":"On your computer, create a file with the name: mycustomtemplate.html Note Make sure you name the file with the extension html Open this file in a text editor, like Notepad, VS Code or whatnot. The file is empty, so we need to add some basic needed html code. Copy the code below and paste it into the file and save. < content id = \"data-content\" > < style > /* Insert your CSS overrides here */ . example-themePrimary a { color : { { @ root . theme . palette . themeprimary } } } . myfirstcss { font-size : 30 px ; font-weight : 600 ; } . icon { width : 20 px ; height : 16 px ; } ul { list-style : none ; display : flex ; flex-wrap : wrap ; } ul li { display : flex ; padding : 8 px ; flex : 1 1 100 % ; } </ style > < div class = \"template\" > {{#if @root.properties.showSelectedFilters}} < pnp-selectedfilters data-filters = \"{{JSONstringify filters.selectedFilters 2}}\" data-filters-configuration = \"{{JSONstringify filters.filtersConfiguration 2}}\" data-instance-id = \"{{filters.instanceId}}\" data-operator = \"{{filters.filterOperator}}\" data-theme-variant = \"{{JSONstringify @root.theme}}\" ></ pnp-selectedfilters > {{/if}} {{#if @root.properties.showResultsCount}} < div class = \"template--resultCount\" > < label class = \"ms-fontWeight-semibold\" > {{getCountMessage @root.data.totalItemsCount @root.inputQueryText}} </ label > </ div > {{/if}} < ul class = \"template--custom\" > {{!-- This div below can be deleted. it is just for showing that is is your first template.--}} < div class = \"myfirstcss\" > This is my custom template!!!! </ div > {{#each data.items as |item|}} {{#> resultTypes item=item}} {{!-- The block below will be used as default item template if no result types matched --}} < li > < pnp-iconfile class = \"icon\" data-extension = \"{{slot item @root.slots.FileType}}\" data-theme-variant = \"{{JSONstringify @root.theme}}\" ></ pnp-iconfile > < span class = \"example-themePrimary\" >< a href = \"{{slot item @root.slots.Path}}\" > {{slot item @root.slots.Title}} </ a ></ span > </ li > {{/resultTypes}} {{/each}} </ ul > </ div > </ content > You now have your first custom template!!","title":"Create a file"},{"location":"create-custom-layouts/create-your-first-custom-template/#change-the-content-of-your-new-template-file","text":"You are going to make a small change to your template so you can check if it is working. Find the line where the text says: <div class=\"myfirstcss\">This is my custom template!!!!</div> Change the text \"This is my custom template!!!!\" to \"This is my first awesome custom template that rocks!!!!\". Maybe you want to add your name to?","title":"Change the content of your new template file"},{"location":"create-custom-layouts/create-your-first-custom-template/#upload-the-custom-template-to-a-sharepoint-library","text":"Open a SharePoint site you use for development. Or create one. Open Shared Documents Create a folder called \"PnPSearchTemplates\" Upload the file to this folder. The URL to this template is: <siteurl>/Shared Documents/PnPSearchTemplates/mycustomtemplate.html Change <siteurl> with the URL of the site you created/are using. Will be something like this: https://contoso.sharepoint.com/sites/mydevsite You will need this when you are configuring the PnP Search Template web part.","title":"Upload the custom template to a SharePoint library"},{"location":"create-custom-layouts/create-your-first-custom-template/#test-the-custom-template","text":"Open a SharePoint site you use for development. Create a new page, call it what you want and use whatever template you want (Blank is fine) In a section add the \"PnP Search Results\" web part Choose to configure the web part Select SharePoint search Make sure you get some results by typing in a search term in the Query template, like \"{searchTerms} *\" Go to page 2 Select \"Custom\" layout Under \"Use an external template URL\", type in the URL for the custom template file. You cannot type in a URL that does not exist, if so you get an error message. Click outside the URL text box. Publish the page Did the results change layout? If so you have succeeded!","title":"Test the custom template"},{"location":"create-custom-layouts/create-your-first-custom-template/#troubleshooting","text":"If not, check if you copied all the text into the file, and that you did not change anything else than the text.","title":"Troubleshooting"},{"location":"create-custom-layouts/create-your-first-custom-template/#pictures","text":"Insert the URL in \"Use an external template URL\" What the custom search result looks like","title":"Pictures"},{"location":"create-custom-layouts/edit-custom-templates-in-sharepoint/","text":"Edit a custom web part in SharePoint \u00b6 You can edit a custom template directly in SharePoint. Steps \u00b6 Create a custom template Store the template in a SharePoint library Edit the template in directly in SharePoint Note Step 1 The article Create your first custom template , explains how you can create a template and upload it to SharePoint. Note Step 2 The article Store custom templates in SharePoint , explains how you can create a central repository for templates in SharePoint. Edit the template in SharePoint \u00b6 Prerequisites: You have created your first template and it is stored in SharePoint. (Step 1 and Step 2) Open your SharePoint site and navigate to the SharePoint library and folder where the template is stored. Click the template Title to open it. Open the menu \"Open\" and select \"Open in Text Editor\" Do your changes and Click Save. Close the Tab. Check your changes \u00b6 To look at your changes, open a page where you have used the custom template, and refresh the page. The changes you made should now be effective.","title":"Edit a custom web part in SharePoint"},{"location":"create-custom-layouts/edit-custom-templates-in-sharepoint/#edit-a-custom-web-part-in-sharepoint","text":"You can edit a custom template directly in SharePoint.","title":"Edit a custom web part in SharePoint"},{"location":"create-custom-layouts/edit-custom-templates-in-sharepoint/#steps","text":"Create a custom template Store the template in a SharePoint library Edit the template in directly in SharePoint Note Step 1 The article Create your first custom template , explains how you can create a template and upload it to SharePoint. Note Step 2 The article Store custom templates in SharePoint , explains how you can create a central repository for templates in SharePoint.","title":"Steps"},{"location":"create-custom-layouts/edit-custom-templates-in-sharepoint/#edit-the-template-in-sharepoint","text":"Prerequisites: You have created your first template and it is stored in SharePoint. (Step 1 and Step 2) Open your SharePoint site and navigate to the SharePoint library and folder where the template is stored. Click the template Title to open it. Open the menu \"Open\" and select \"Open in Text Editor\" Do your changes and Click Save. Close the Tab.","title":"Edit the template in SharePoint"},{"location":"create-custom-layouts/edit-custom-templates-in-sharepoint/#check-your-changes","text":"To look at your changes, open a page where you have used the custom template, and refresh the page. The changes you made should now be effective.","title":"Check your changes"},{"location":"create-custom-layouts/edit-templates-using-vscode-and-onedrive/","text":"Edit custom templates using Visual Studio Code and OneDrive \u00b6 If you want to achieve the following list, don't stop reading. You have a local development environment for editing your templates. You can see your changes as fast as you can hit the refresh button in your browser. You can see how the template looks in your SharePoint environment. You can use real search results as data. You can use Extensions in VSCode to make it easier to edit html files. We are going to use Visual Studio Code (VSCode) and OneDrive to reach our goal. You do NOT have to use VSCode, you can use any text editor you want. If you need to install VSCode, you can get it here: Visual Studio Code I guess you already have OneDrive, if not, here is the instructions to get started. Sync files with OneDrive (Windows) Sync files with OneDrive on Mac OS X Steps \u00b6 Create the SharePoint environment for developing templates. \u00b6 Setup a SharePoint site, where you want to store your templates. Store custom templates in SharePoint Create a page using PnP Search Results. Create a simple search page Create a custom template and store it in SharePoint. Create your first custom template Configure your search web part to use the new template. (See article in step 3) Sync the template locally and edit using a local editor \u00b6 Open the SharePoint site and library where you have stored your template. Choose \"Sync\" or \"Add Shortcut to OneDrive\", whatever you prefer. Open VSCode (or any other editor you prefer). Open the synced folder in your OneDrive. File - Open Folder Select the folder you just synced You will now see all your templates in this folder. Edit a template. Save a template. Wait a moment till OneDrive is finished syncing. (Should be almost instant) Refresh the Browser window where you have the search web part that is using your template. You should now see the change you made. Repeat 9 - 12, until you are happy with your awesome custom template. Troubleshoot \u00b6 You cannot see any changes on the webpage Check the sync status in OneDrive Make a change that is noticeable Check if the custom template has been set as the template for the search part you are looking at. Did you refresh the page? Is your file-extension .html? Check the code in the template. Tips \u00b6 In VS Code you can format the code by selecting the language mode for the document you are editing. For files with extension .HTML, they are automatically formatted by a rule set for HTML. Since you are going to use Handlebar you should change the language mode to \"Handlebars\".","title":"Edit custom templates using Visual Studio Code and OneDrive"},{"location":"create-custom-layouts/edit-templates-using-vscode-and-onedrive/#edit-custom-templates-using-visual-studio-code-and-onedrive","text":"If you want to achieve the following list, don't stop reading. You have a local development environment for editing your templates. You can see your changes as fast as you can hit the refresh button in your browser. You can see how the template looks in your SharePoint environment. You can use real search results as data. You can use Extensions in VSCode to make it easier to edit html files. We are going to use Visual Studio Code (VSCode) and OneDrive to reach our goal. You do NOT have to use VSCode, you can use any text editor you want. If you need to install VSCode, you can get it here: Visual Studio Code I guess you already have OneDrive, if not, here is the instructions to get started. Sync files with OneDrive (Windows) Sync files with OneDrive on Mac OS X","title":"Edit custom templates using Visual Studio Code and OneDrive"},{"location":"create-custom-layouts/edit-templates-using-vscode-and-onedrive/#steps","text":"","title":"Steps"},{"location":"create-custom-layouts/edit-templates-using-vscode-and-onedrive/#create-the-sharepoint-environment-for-developing-templates","text":"Setup a SharePoint site, where you want to store your templates. Store custom templates in SharePoint Create a page using PnP Search Results. Create a simple search page Create a custom template and store it in SharePoint. Create your first custom template Configure your search web part to use the new template. (See article in step 3)","title":"Create the SharePoint environment for developing templates."},{"location":"create-custom-layouts/edit-templates-using-vscode-and-onedrive/#sync-the-template-locally-and-edit-using-a-local-editor","text":"Open the SharePoint site and library where you have stored your template. Choose \"Sync\" or \"Add Shortcut to OneDrive\", whatever you prefer. Open VSCode (or any other editor you prefer). Open the synced folder in your OneDrive. File - Open Folder Select the folder you just synced You will now see all your templates in this folder. Edit a template. Save a template. Wait a moment till OneDrive is finished syncing. (Should be almost instant) Refresh the Browser window where you have the search web part that is using your template. You should now see the change you made. Repeat 9 - 12, until you are happy with your awesome custom template.","title":"Sync the template locally and edit using a local editor"},{"location":"create-custom-layouts/edit-templates-using-vscode-and-onedrive/#troubleshoot","text":"You cannot see any changes on the webpage Check the sync status in OneDrive Make a change that is noticeable Check if the custom template has been set as the template for the search part you are looking at. Did you refresh the page? Is your file-extension .html? Check the code in the template.","title":"Troubleshoot"},{"location":"create-custom-layouts/edit-templates-using-vscode-and-onedrive/#tips","text":"In VS Code you can format the code by selecting the language mode for the document you are editing. For files with extension .HTML, they are automatically formatted by a rule set for HTML. Since you are going to use Handlebar you should change the language mode to \"Handlebars\".","title":"Tips"},{"location":"create-custom-layouts/howto-store-custom-templates-in-sharepoint/","text":"Store custom templates in SharePoint \u00b6 You can create your own custom templates. If you store them in a central repository, they can be used across PnP Search Result web parts across sites in your tenant. Requirements for using a custom template, referenced by URL are: All users of the PnP Search Result web part, must be able to read those templates. Templates need to have their own URL. A SharePoint site within your tenant is perfect for this scenario, because you get some additional features: Central repository Version control No public access Secure change access Share to others outside of your company Use OneDrive for sync Approval flows (if you want) 5 steps to create a central repository in SharePoint \u00b6 Create a SharePoint site Give \"Everyone except externals\" read access to the site Create a Library Create a Templates Folder Add your custom templates to this folder. Now you can reference these templates using the URL to the file. https://<tenantname>.sharepoint.com/sites/<sitetitle>/<libraryname>/<foldername>/<templatename>.html Example for the a tenant named Contoso \u00b6 Site title Library name Folder name Template names SharePointResources PnPSearch Templates mytemplate.html, mytemplate2.html URLs for the templates in this example: mytemplate.html: https://contoso.sharepoint.com/sites/SharePointResources/PnPSearch/Templates/mytemplate.html mytemplate2.html: https://contoso.sharepoint.com/sites/SharePointResources/PnPSearch/Templates/mytemplate2.html Use the links in a PnP Search Results web part \u00b6 Edit the settings for the PnP Search Results web part. On page 2, under Available Layouts, choose Custom. Type the URL to your custom template in \"Use an external template URL. Republish the page When you edit the custom template, you just have to refresh the page where the web part is embedded to see the changes you made.","title":"Store custom templates in SharePoint"},{"location":"create-custom-layouts/howto-store-custom-templates-in-sharepoint/#store-custom-templates-in-sharepoint","text":"You can create your own custom templates. If you store them in a central repository, they can be used across PnP Search Result web parts across sites in your tenant. Requirements for using a custom template, referenced by URL are: All users of the PnP Search Result web part, must be able to read those templates. Templates need to have their own URL. A SharePoint site within your tenant is perfect for this scenario, because you get some additional features: Central repository Version control No public access Secure change access Share to others outside of your company Use OneDrive for sync Approval flows (if you want)","title":"Store custom templates in SharePoint"},{"location":"create-custom-layouts/howto-store-custom-templates-in-sharepoint/#5-steps-to-create-a-central-repository-in-sharepoint","text":"Create a SharePoint site Give \"Everyone except externals\" read access to the site Create a Library Create a Templates Folder Add your custom templates to this folder. Now you can reference these templates using the URL to the file. https://<tenantname>.sharepoint.com/sites/<sitetitle>/<libraryname>/<foldername>/<templatename>.html","title":"5 steps to create a central repository in SharePoint"},{"location":"create-custom-layouts/howto-store-custom-templates-in-sharepoint/#example-for-the-a-tenant-named-contoso","text":"Site title Library name Folder name Template names SharePointResources PnPSearch Templates mytemplate.html, mytemplate2.html URLs for the templates in this example: mytemplate.html: https://contoso.sharepoint.com/sites/SharePointResources/PnPSearch/Templates/mytemplate.html mytemplate2.html: https://contoso.sharepoint.com/sites/SharePointResources/PnPSearch/Templates/mytemplate2.html","title":"Example for the a tenant named Contoso"},{"location":"create-custom-layouts/howto-store-custom-templates-in-sharepoint/#use-the-links-in-a-pnp-search-results-web-part","text":"Edit the settings for the PnP Search Results web part. On page 2, under Available Layouts, choose Custom. Type the URL to your custom template in \"Use an external template URL. Republish the page When you edit the custom template, you just have to refresh the page where the web part is embedded to see the changes you made.","title":"Use the links in a PnP Search Results web part"},{"location":"extensibility/","text":"Extensibility possibilities \u00b6 This solution supports different levels of customizations depending your requirements: 'Basic' customizations : these include custom settings for data sources, search box, verticals and filters Web Parts + minor updates to existing layouts by adding custom HTML markup (ex: add a custom field in the UI from a data source), updates to builtin layouts fields ('Cards','Details List' and 'People'), etc. They only require HTML, CSS and Handlebars skills to be done . Typically a super user or a webmaster could do that. 'Advanced' customizations : these include major updates like adding a new data source, layout, component or suggestions provider. These are build from scratch and require SharePoint Framework development skills to be done . Typically, a front-end/SharePoint developer could do that. Note Extensibility samples are centralized in a dedicated repository: https://github.com/microsoft-search/pnp-modern-search-extensibility-samples/tree/main Basic customizations \u00b6 'Basic' customizations cover the layout templates updates with HTML, CSS and Handlebars. Refer to the templating documentation to know more. Advanced customizations \u00b6 The solution uses the concept of 'extensibility libraries' . Basically, these are SharePoint Framework library components you put in the global or site collection app catalog that will be loaded automatically by Web Parts to enhance the experience and options (ex: new data source with new options, custom layout, etc.). Simple as that! As a demonstration of capabilities, all builtin data sources, layouts, web components or suggestions providers are built using the same exact interfaces and methods that are publicly available in the @pnp/modern-search-extensibility SPFx library project. All documentation procedures for extensions are based on the demo extensibility library available in the same repository that you can use as reference. Prerequistes \u00b6 For your project to be a valid extensibility library, you must have the following prerequisites: Your project must be an SPFx library component . The main entry point of your library must implement the IExtensibilityLibrary interface from the @pnp/modern-search-extensibility library. You library manifest ID must be registered in the Web Part where you want to use the extension. SPFx version The SPFx library project must use the same SPFx version as the main solution (check source code for current version). Owherwise you may face issues at build time. See GitHub issue #1893 Supported extensions \u00b6 Each Web Part type in the solution supports several extensions or no extension at all. It means even your extensibility library contains all possible extensions, they won't be loaded if the Web Part does not support them. Web Part type Supported extensions Search Results Custom web components. Custom Handlebars customizations (ex: helpers, partials ,etc.). Custom event handlers for adaptive cards actions Custom Data Sources Custom query modifier Search Filters Custom web components ( not directly but via the 'Search Results' Web Part extensibility library registration ). Search box Custom suggestions providers. Search Verticals None. Register your extensibility library with a Web Part \u00b6 When a Web Part type supports one or multiple extensions, you can register them going to the last property pane confguration page in the 'Extensibility configuration' section: From here, you can add the manifest IDs of your libraries and decide to enable or disabled certain libraries. The manifest ID can be found in the <your_library_name>.manifest.json file: Multiple librairies can be registered for a single Web Part instance allowing you to split your extensions into multiple projects (in the end, they will be all concatenated). For instance, this could be convenient when extensions come from different IT providers. Create an extensibility library \u00b6 To create an extensibility library, you have the choice to reuse the one provided in the GitHub repository or start from scratch. In this case: Create a new SharePoint Framework project of type 'Library' with yo @microsoft/sharepoint . Add an npm reference to @pnp/modern-search-extensibility library using npm i @pnp/modern-search-extensibility --save cmd. In the main entry point, implement the IExtensibilityLibrary interface. Provide all method implementations (return empty arrays if you don't implement specific extensions). Implement your extension(s) depending of the type: Layout Web component Suggestions providers Handlebars customizations Adaptive Cards Actions handlers Query modifier Data Sources Creation process always follows more or less the same pattern: Create the extension data logic or render logic. Register the information about the extension to be discovered and instanciated by the target Web Part by implementing the corresponding method according to the IExtensibilityLibrary interface. Bundle gulp bundle --ship and package gulp package-solution --ship and add the solution to the global or site collection catalog (for this one, it must be the same site collection where the Web Part loading that extension(s) is present). Register your manifest ID in the target Web Part instance . Enjoy! Debug a library component \u00b6 Debugging a library component is exactly the same as debugging an SPFx Web Part. Run gulp serve in the hosted workbench and put a 'Search Results' , 'Search Filters' or 'Search Box' Web Part depending the extension you want to test. If registered correctly, your breakpoints will be triggerred by the main Web Part loading your extension. Accessing the SharePoint Framework context and services in a library component \u00b6 In case you need to access the SharePoint Framework context and services, within your custom library component, you can easily do that by relying on the Service Locator pattern available in SPFx. You simply need to declare a public static property with name serviceKey in your library component and provide a constructor that accepts a ServiceScope instance as input argument. For example, here you can see a code excerpt of such a library component that handles custom actions for Adaptive Cards rendering: import { IAdaptiveCardAction , IComponentDefinition , IExtensibilityLibrary , ILayoutDefinition , ISuggestionProviderDefinition , IQueryModifierDefinition } from '@pnp/modern-search-extensibility' ; import { ServiceKey , ServiceScope } from '@microsoft/sp-core-library' ; import { SPHttpClient , SPHttpClientResponse } from '@microsoft/sp-http' ; import { PageContext } from '@microsoft/sp-page-context' ; export class MyCustomLibraryComponent implements IExtensibilityLibrary { public static readonly serviceKey : ServiceKey < MyCustomLibraryComponent > = ServiceKey . create < MyCustomLibraryComponent > ( 'SPFx:MyCustomLibraryComponent' , MyCustomLibraryComponent ); private _spHttpClient : SPHttpClient ; private _pageContext : PageContext ; private _currentWebUrl : string ; constructor ( serviceScope : ServiceScope ) { serviceScope . whenFinished (() => { this . _spHttpClient = serviceScope . consume ( SPHttpClient . serviceKey ); this . _pageContext = serviceScope . consume ( PageContext . serviceKey ); this . _currentWebUrl = this . _pageContext . web . absoluteUrl ; }); } public getCustomLayouts () : ILayoutDefinition [] { return []; } public getCustomWebComponents () : IComponentDefinition < any > [] { return []; } public getCustomSuggestionProviders () : ISuggestionProviderDefinition [] { return []; } public registerHandlebarsCustomizations ? ( handlebarsNamespace : typeof Handlebars ) : void { } public getCustomQueryModifiers ? () : IQueryModifierDefinition []{ } public invokeCardAction ( action : IAdaptiveCardAction ) : void { // Process the action based on type if ( action . type == \"Action.OpenUrl\" ) { window . open ( action . url , \"_blank\" ); } else if ( action . type == \"Action.Submit\" ) { // Process the Submit action based on title switch ( action . title . toLowerCase ()) { case \"user\" : // Invoke the currentUser endpoint this . _spHttpClient . get ( ` ${ this . _currentWebUrl } /_api/web/currentUser` , SPHttpClient . configurations . v1 , null ). then (( response : SPHttpClientResponse ) => { return response . json (); }); break ; default : console.log ( 'Action not supported!' ); break ; } } } public getCustomDataSources () : IDataSourceDefinition [] { return [ { name : 'Custom Data Source' , iconName : 'Database' , key : 'CustomDataSource' , serviceKey : ServiceKey.create < IDataSource > ( 'CustomDataSource' , CustomDataSource ) } ]; } public name () : string { return 'MyCustomLibraryComponent' ; } } In order to run the above sample code, you will need to import in your library the following npm packages: @microsoft/sp-component-base , @microsoft/sp-core-library , and @microsoft/sp-webpart-base .","title":"Extensibility"},{"location":"extensibility/#extensibility-possibilities","text":"This solution supports different levels of customizations depending your requirements: 'Basic' customizations : these include custom settings for data sources, search box, verticals and filters Web Parts + minor updates to existing layouts by adding custom HTML markup (ex: add a custom field in the UI from a data source), updates to builtin layouts fields ('Cards','Details List' and 'People'), etc. They only require HTML, CSS and Handlebars skills to be done . Typically a super user or a webmaster could do that. 'Advanced' customizations : these include major updates like adding a new data source, layout, component or suggestions provider. These are build from scratch and require SharePoint Framework development skills to be done . Typically, a front-end/SharePoint developer could do that. Note Extensibility samples are centralized in a dedicated repository: https://github.com/microsoft-search/pnp-modern-search-extensibility-samples/tree/main","title":"Extensibility possibilities"},{"location":"extensibility/#basic-customizations","text":"'Basic' customizations cover the layout templates updates with HTML, CSS and Handlebars. Refer to the templating documentation to know more.","title":"Basic customizations"},{"location":"extensibility/#advanced-customizations","text":"The solution uses the concept of 'extensibility libraries' . Basically, these are SharePoint Framework library components you put in the global or site collection app catalog that will be loaded automatically by Web Parts to enhance the experience and options (ex: new data source with new options, custom layout, etc.). Simple as that! As a demonstration of capabilities, all builtin data sources, layouts, web components or suggestions providers are built using the same exact interfaces and methods that are publicly available in the @pnp/modern-search-extensibility SPFx library project. All documentation procedures for extensions are based on the demo extensibility library available in the same repository that you can use as reference.","title":"Advanced customizations"},{"location":"extensibility/#prerequistes","text":"For your project to be a valid extensibility library, you must have the following prerequisites: Your project must be an SPFx library component . The main entry point of your library must implement the IExtensibilityLibrary interface from the @pnp/modern-search-extensibility library. You library manifest ID must be registered in the Web Part where you want to use the extension. SPFx version The SPFx library project must use the same SPFx version as the main solution (check source code for current version). Owherwise you may face issues at build time. See GitHub issue #1893","title":"Prerequistes"},{"location":"extensibility/#supported-extensions","text":"Each Web Part type in the solution supports several extensions or no extension at all. It means even your extensibility library contains all possible extensions, they won't be loaded if the Web Part does not support them. Web Part type Supported extensions Search Results Custom web components. Custom Handlebars customizations (ex: helpers, partials ,etc.). Custom event handlers for adaptive cards actions Custom Data Sources Custom query modifier Search Filters Custom web components ( not directly but via the 'Search Results' Web Part extensibility library registration ). Search box Custom suggestions providers. Search Verticals None.","title":"Supported extensions"},{"location":"extensibility/#register-your-extensibility-library-with-a-web-part","text":"When a Web Part type supports one or multiple extensions, you can register them going to the last property pane confguration page in the 'Extensibility configuration' section: From here, you can add the manifest IDs of your libraries and decide to enable or disabled certain libraries. The manifest ID can be found in the <your_library_name>.manifest.json file: Multiple librairies can be registered for a single Web Part instance allowing you to split your extensions into multiple projects (in the end, they will be all concatenated). For instance, this could be convenient when extensions come from different IT providers.","title":"Register your extensibility library with a Web Part"},{"location":"extensibility/#create-an-extensibility-library","text":"To create an extensibility library, you have the choice to reuse the one provided in the GitHub repository or start from scratch. In this case: Create a new SharePoint Framework project of type 'Library' with yo @microsoft/sharepoint . Add an npm reference to @pnp/modern-search-extensibility library using npm i @pnp/modern-search-extensibility --save cmd. In the main entry point, implement the IExtensibilityLibrary interface. Provide all method implementations (return empty arrays if you don't implement specific extensions). Implement your extension(s) depending of the type: Layout Web component Suggestions providers Handlebars customizations Adaptive Cards Actions handlers Query modifier Data Sources Creation process always follows more or less the same pattern: Create the extension data logic or render logic. Register the information about the extension to be discovered and instanciated by the target Web Part by implementing the corresponding method according to the IExtensibilityLibrary interface. Bundle gulp bundle --ship and package gulp package-solution --ship and add the solution to the global or site collection catalog (for this one, it must be the same site collection where the Web Part loading that extension(s) is present). Register your manifest ID in the target Web Part instance . Enjoy!","title":"Create an extensibility library"},{"location":"extensibility/#debug-a-library-component","text":"Debugging a library component is exactly the same as debugging an SPFx Web Part. Run gulp serve in the hosted workbench and put a 'Search Results' , 'Search Filters' or 'Search Box' Web Part depending the extension you want to test. If registered correctly, your breakpoints will be triggerred by the main Web Part loading your extension.","title":"Debug a library component"},{"location":"extensibility/#accessing-the-sharepoint-framework-context-and-services-in-a-library-component","text":"In case you need to access the SharePoint Framework context and services, within your custom library component, you can easily do that by relying on the Service Locator pattern available in SPFx. You simply need to declare a public static property with name serviceKey in your library component and provide a constructor that accepts a ServiceScope instance as input argument. For example, here you can see a code excerpt of such a library component that handles custom actions for Adaptive Cards rendering: import { IAdaptiveCardAction , IComponentDefinition , IExtensibilityLibrary , ILayoutDefinition , ISuggestionProviderDefinition , IQueryModifierDefinition } from '@pnp/modern-search-extensibility' ; import { ServiceKey , ServiceScope } from '@microsoft/sp-core-library' ; import { SPHttpClient , SPHttpClientResponse } from '@microsoft/sp-http' ; import { PageContext } from '@microsoft/sp-page-context' ; export class MyCustomLibraryComponent implements IExtensibilityLibrary { public static readonly serviceKey : ServiceKey < MyCustomLibraryComponent > = ServiceKey . create < MyCustomLibraryComponent > ( 'SPFx:MyCustomLibraryComponent' , MyCustomLibraryComponent ); private _spHttpClient : SPHttpClient ; private _pageContext : PageContext ; private _currentWebUrl : string ; constructor ( serviceScope : ServiceScope ) { serviceScope . whenFinished (() => { this . _spHttpClient = serviceScope . consume ( SPHttpClient . serviceKey ); this . _pageContext = serviceScope . consume ( PageContext . serviceKey ); this . _currentWebUrl = this . _pageContext . web . absoluteUrl ; }); } public getCustomLayouts () : ILayoutDefinition [] { return []; } public getCustomWebComponents () : IComponentDefinition < any > [] { return []; } public getCustomSuggestionProviders () : ISuggestionProviderDefinition [] { return []; } public registerHandlebarsCustomizations ? ( handlebarsNamespace : typeof Handlebars ) : void { } public getCustomQueryModifiers ? () : IQueryModifierDefinition []{ } public invokeCardAction ( action : IAdaptiveCardAction ) : void { // Process the action based on type if ( action . type == \"Action.OpenUrl\" ) { window . open ( action . url , \"_blank\" ); } else if ( action . type == \"Action.Submit\" ) { // Process the Submit action based on title switch ( action . title . toLowerCase ()) { case \"user\" : // Invoke the currentUser endpoint this . _spHttpClient . get ( ` ${ this . _currentWebUrl } /_api/web/currentUser` , SPHttpClient . configurations . v1 , null ). then (( response : SPHttpClientResponse ) => { return response . json (); }); break ; default : console.log ( 'Action not supported!' ); break ; } } } public getCustomDataSources () : IDataSourceDefinition [] { return [ { name : 'Custom Data Source' , iconName : 'Database' , key : 'CustomDataSource' , serviceKey : ServiceKey.create < IDataSource > ( 'CustomDataSource' , CustomDataSource ) } ]; } public name () : string { return 'MyCustomLibraryComponent' ; } } In order to run the above sample code, you will need to import in your library the following npm packages: @microsoft/sp-component-base , @microsoft/sp-core-library , and @microsoft/sp-webpart-base .","title":"Accessing the SharePoint Framework context and services in a library component"},{"location":"extensibility/adaptivecards_customizations/","text":"Register Adaptive Cards Actions handlers customizations \u00b6 If you want to render the search results using a custom Adaptive Card, you might also want to handle custom events upon actions happening in the Adaptive Cards instances. To register a new Adaptive Cards Actions handler customization for the targeted Web Part (i.e. the Web Part instances where the extensibility library is registered and enabled): In the library main entry point (i.e. the class implementing the IExtensibilityLibrary in interface), implement the invokeCardAction(action: any): void method. From within the method write your own implementation of any of the custom actions that you want to handle. public invokeCardAction ( action : any ) : void { // Process the action based on type if ( action . type == \"Action.OpenUrl\" ) { window . open ( action . url , \"_blank\" ); } else if ( action . type == \"Action.Submit\" ) { // Process the action based on title switch ( action . title ) { case 'Click on item' : console . log ( action . data ); break ; case 'Global click' : alert ( action ); break ; default : console.log ( 'Action not supported!' ); break ; } } } In the JSON of the custom Adaptive Card, you can define the custom actions, like in the following code excerpt: { \"$schema\" : \"http://adaptivecards.io/schemas/adaptive-card.json\" , \"type\" : \"AdaptiveCard\" , \"version\" : \"1.3\" , \"body\" : [ { \"type\" : \"TextBlock\" , \"text\" : \"**${$root.data.totalItemsCount}** results\" , \"size\" : \"Medium\" , \"wrap\" : true , \"$when\" : \"${$root.properties.showResultsCount == true}\" }, { \"type\" : \"Container\" , \"$data\" : \"${data.items}\" , \"items\" : [ { \"type\" : \"ColumnSet\" , \"id\" : \"${hitId}\" , \"columns\" : [ { \"type\" : \"Column\" , \"items\" : [ { \"type\" : \"TextBlock\" , \"wrap\" : true , \"text\" : \"<pnp-iconfile class='icon' data-extension='${if(empty($root.slots['FileType']),'',string(jPath($data, concat('.',$root.slots['FileType']))[0]))}'></pnp-iconfile>\" } ], \"width\" : \"auto\" }, { \"type\" : \"Column\" , \"items\" : [ { \"type\" : \"TextBlock\" , \"wrap\" : true , \"text\" : \"[${string(jPath($data, concat('.',$root.slots['Title']))[0])}](${string(jPath($data, concat('.',$root.slots['Path']))[0])})\" } ], \"width\" : \"auto\" }, { \"type\" : \"Column\" , \"items\" : [ { \"type\" : \"ActionSet\" , \"actions\" : [ { \"type\" : \"Action.Submit\" , \"title\" : \"Click on item\" , \"style\" : \"positive\" , \"data\" : { \"id\" : \"123\" } } ], \"spacing\" : \"medium\" } ], \"width\" : \"auto\" } ] } ] } ], \"actions\" : [ { \"type\" : \"Action.Submit\" , \"title\" : \"Global click\" , \"data\" : { \"id\" : \"456\" } }, { \"type\" : \"Action.OpenUrl\" , \"title\" : \"Open URL\" , \"url\" : \"https://pnp.github.io/\" } ] }","title":"Custom event handlers for adaptive cards actions"},{"location":"extensibility/adaptivecards_customizations/#register-adaptive-cards-actions-handlers-customizations","text":"If you want to render the search results using a custom Adaptive Card, you might also want to handle custom events upon actions happening in the Adaptive Cards instances. To register a new Adaptive Cards Actions handler customization for the targeted Web Part (i.e. the Web Part instances where the extensibility library is registered and enabled): In the library main entry point (i.e. the class implementing the IExtensibilityLibrary in interface), implement the invokeCardAction(action: any): void method. From within the method write your own implementation of any of the custom actions that you want to handle. public invokeCardAction ( action : any ) : void { // Process the action based on type if ( action . type == \"Action.OpenUrl\" ) { window . open ( action . url , \"_blank\" ); } else if ( action . type == \"Action.Submit\" ) { // Process the action based on title switch ( action . title ) { case 'Click on item' : console . log ( action . data ); break ; case 'Global click' : alert ( action ); break ; default : console.log ( 'Action not supported!' ); break ; } } } In the JSON of the custom Adaptive Card, you can define the custom actions, like in the following code excerpt: { \"$schema\" : \"http://adaptivecards.io/schemas/adaptive-card.json\" , \"type\" : \"AdaptiveCard\" , \"version\" : \"1.3\" , \"body\" : [ { \"type\" : \"TextBlock\" , \"text\" : \"**${$root.data.totalItemsCount}** results\" , \"size\" : \"Medium\" , \"wrap\" : true , \"$when\" : \"${$root.properties.showResultsCount == true}\" }, { \"type\" : \"Container\" , \"$data\" : \"${data.items}\" , \"items\" : [ { \"type\" : \"ColumnSet\" , \"id\" : \"${hitId}\" , \"columns\" : [ { \"type\" : \"Column\" , \"items\" : [ { \"type\" : \"TextBlock\" , \"wrap\" : true , \"text\" : \"<pnp-iconfile class='icon' data-extension='${if(empty($root.slots['FileType']),'',string(jPath($data, concat('.',$root.slots['FileType']))[0]))}'></pnp-iconfile>\" } ], \"width\" : \"auto\" }, { \"type\" : \"Column\" , \"items\" : [ { \"type\" : \"TextBlock\" , \"wrap\" : true , \"text\" : \"[${string(jPath($data, concat('.',$root.slots['Title']))[0])}](${string(jPath($data, concat('.',$root.slots['Path']))[0])})\" } ], \"width\" : \"auto\" }, { \"type\" : \"Column\" , \"items\" : [ { \"type\" : \"ActionSet\" , \"actions\" : [ { \"type\" : \"Action.Submit\" , \"title\" : \"Click on item\" , \"style\" : \"positive\" , \"data\" : { \"id\" : \"123\" } } ], \"spacing\" : \"medium\" } ], \"width\" : \"auto\" } ] } ] } ], \"actions\" : [ { \"type\" : \"Action.Submit\" , \"title\" : \"Global click\" , \"data\" : { \"id\" : \"456\" } }, { \"type\" : \"Action.OpenUrl\" , \"title\" : \"Open URL\" , \"url\" : \"https://pnp.github.io/\" } ] }","title":"Register Adaptive Cards Actions handlers customizations"},{"location":"extensibility/custom_data_sources/","text":"Create a custom data source \u00b6 Custom data sources can be added to a search results Web Part to get results from your custom source. Custom data source creation process \u00b6 Custom data source creation process comes in two distinct steps: Create the data source logic . Register the data source information for discovery . Create the data source logic \u00b6 In your extensibility library project, create a new CustomDataSource.ts TypeScript file. Create an interface for your data source properties, typically the ones you want to persist in the Web Part property bag. Data source properties are isolated from the other general Web Part properties under the property dataSourceProperties in the property bag object. export interface ICustomDataSourceProperties { possibleResults : string ; } Implement the BaseDataSource abstract class using your properties interface: export class CustomDataSource extends BaseDataSource < ICustomDataSourceProperties > { ... } Implement your data source logic according to the available methods and properties. BaseDataSource - Methods \u00b6 Method Description onInit() The initialization method of your data source (ex: initialize your properties, etc.). You can perform asynchronous calls here. This method will be called when the data source is instantiated by the main Web Part. getPropertyPaneGroupsConfiguration() Returns the property pane fields to display when your data source is selected. These are regular SPFx property fields and groups. Data source properties are isolated from the other general Web Part properties under the property dataSourceProperties . It means you must include that path in your property pane controls to get the value persisted. Defining fields or groups is not mandatory for a provider. If you don't want to expose any option, just return an empty array. onPropertyUpdate() The method will be called when a property pane value is updated. The main Web Part in Reactive mode for property pane fields. getPagingBehavior() The method should return the desired paging behavior for the data source. Will be 'None' if not specified. getFilterBehavior() The method should return the desired filter behavior for the data source. Will be 'Static' if not specified. getAppliedFilters() If any, this method should return the list of filters (i.e data source fields) applied by the data source to filter results. getItemCount() The method should return the total number of items. This information will be used to generate page numbers. getTemplateSlots() The method should return the available template slots for this data source. getSortableFields() The method should return the list of sortable fields for the data source if applicable BaseDataSource - Properties \u00b6 Property Description properties The Web Part properties in the property bag. Corresponds to the isolated dataSourceProperties property in the global property bag. You won't be able to access any other general properties of the Web Part. Register provider information \u00b6 The next step is to provide information about your new data source. In the library main entry point (i.e. the class implementing the IExtensibilityLibrary in interface) return a new IDataSourceDefinition array in the getCustomDataSources() method using these properties: Property Description name The friendly name of your data source that will show up in the configuration panel. iconName The name of an icon from Office UI Fabric/Fluent UI that will be shown in the data source options. key An unique internal key for your data source. serviceKey A service key used to instantiate your data source class. Builtin or custom data sources are instantiated dynamically using SPFx service scopes . public getCustomDataSources () : IDataSourceDefinition [] { return [ { name : 'Custom Data Source' , iconName : 'Database' , key : 'CustomDataSource' , serviceKey : ServiceKey.create < IDataSource > ( 'CustomDataSource' , CustomDataSource ) } ]; }","title":"Custom data sources"},{"location":"extensibility/custom_data_sources/#create-a-custom-data-source","text":"Custom data sources can be added to a search results Web Part to get results from your custom source.","title":"Create a custom data source"},{"location":"extensibility/custom_data_sources/#custom-data-source-creation-process","text":"Custom data source creation process comes in two distinct steps: Create the data source logic . Register the data source information for discovery .","title":"Custom data source creation process"},{"location":"extensibility/custom_data_sources/#create-the-data-source-logic","text":"In your extensibility library project, create a new CustomDataSource.ts TypeScript file. Create an interface for your data source properties, typically the ones you want to persist in the Web Part property bag. Data source properties are isolated from the other general Web Part properties under the property dataSourceProperties in the property bag object. export interface ICustomDataSourceProperties { possibleResults : string ; } Implement the BaseDataSource abstract class using your properties interface: export class CustomDataSource extends BaseDataSource < ICustomDataSourceProperties > { ... } Implement your data source logic according to the available methods and properties.","title":"Create the data source logic"},{"location":"extensibility/custom_data_sources/#basedatasource-methods","text":"Method Description onInit() The initialization method of your data source (ex: initialize your properties, etc.). You can perform asynchronous calls here. This method will be called when the data source is instantiated by the main Web Part. getPropertyPaneGroupsConfiguration() Returns the property pane fields to display when your data source is selected. These are regular SPFx property fields and groups. Data source properties are isolated from the other general Web Part properties under the property dataSourceProperties . It means you must include that path in your property pane controls to get the value persisted. Defining fields or groups is not mandatory for a provider. If you don't want to expose any option, just return an empty array. onPropertyUpdate() The method will be called when a property pane value is updated. The main Web Part in Reactive mode for property pane fields. getPagingBehavior() The method should return the desired paging behavior for the data source. Will be 'None' if not specified. getFilterBehavior() The method should return the desired filter behavior for the data source. Will be 'Static' if not specified. getAppliedFilters() If any, this method should return the list of filters (i.e data source fields) applied by the data source to filter results. getItemCount() The method should return the total number of items. This information will be used to generate page numbers. getTemplateSlots() The method should return the available template slots for this data source. getSortableFields() The method should return the list of sortable fields for the data source if applicable","title":"BaseDataSource - Methods"},{"location":"extensibility/custom_data_sources/#basedatasource-properties","text":"Property Description properties The Web Part properties in the property bag. Corresponds to the isolated dataSourceProperties property in the global property bag. You won't be able to access any other general properties of the Web Part.","title":"BaseDataSource - Properties"},{"location":"extensibility/custom_data_sources/#register-provider-information","text":"The next step is to provide information about your new data source. In the library main entry point (i.e. the class implementing the IExtensibilityLibrary in interface) return a new IDataSourceDefinition array in the getCustomDataSources() method using these properties: Property Description name The friendly name of your data source that will show up in the configuration panel. iconName The name of an icon from Office UI Fabric/Fluent UI that will be shown in the data source options. key An unique internal key for your data source. serviceKey A service key used to instantiate your data source class. Builtin or custom data sources are instantiated dynamically using SPFx service scopes . public getCustomDataSources () : IDataSourceDefinition [] { return [ { name : 'Custom Data Source' , iconName : 'Database' , key : 'CustomDataSource' , serviceKey : ServiceKey.create < IDataSource > ( 'CustomDataSource' , CustomDataSource ) } ]; }","title":"Register provider information"},{"location":"extensibility/custom_layout/","text":"Create a custom layout \u00b6 Custom layouts are only supported for the 'Search Results' Web Part. You can't add custom layout for the 'Search Filters' Web Part. Layout creation process \u00b6 Same as data source, the layout creation process comes in three distinct steps: Create the layout class (i.e. define the property pane options) . Create the HTML template associated to that layout . Register the layout information for discovery . Create the layout \u00b6 In your extensibility library project, create a new MyLayout.ts TypeScript file. Create an interface for your layout properties, typically the ones you want to persist in the Web Part property bag. Layout properties are isolated from the other general Web Part properties under the property layoutProperties in the property bag object. export interface ICustomLayoutProperties { myTextProperty : string ; } Implement the BaseLayout abstract class using your properties interface: export class Customlayout extends BaseLayout < ICustomLayoutProperties > { ... } Implement your layout logic according to the available methods and properties. BaseLayout - Methods \u00b6 Method Description onInit() The initialization method of your layout (ex: initialize your properties, etc.). You can perform asynchronous calls here. This method will be called when the layout is instanciated by the main Web Part. getPropertyPaneGroupsConfiguration() Returns the property pane fields to display when your layout is selected. These are regular SPFx property fields and groups. Layout properties are isolated from the other general Web Part properties under the property layoutProperties . It means you must include that path in your property pane controls get the value persisted (same thing as custom data source). Defining fields or groups is not mandatory for a layout. If you don't want to expose any option, just return an empty array. onPropertyUpdate() The method will be called when a property pane value is updated. The main Web Part in Reactive mode for property pane fields. BaseLayout - Properties \u00b6 Property Description properties The Web Part properties in the property bag. Corresponds to the isolated layoutProperties property in the global property bag. You won't be able to access any other general properties of the Web Part. Create the HTML template file (Handlebars) \u00b6 In your extensibility library project, create a new custom-layout.html HTML file. A layout template is split into two distinct parts: A template part, containing the HTML markup to display your data once fetched . This part is mandatory to display your data. < content id = \"template\" > <!-- Your template content here --> </ content > A placeholder part, containing the HTML markup to display as placeholder while the data are getting fetched . This part is optional. < content id = \"placeholder\" > <!-- Your placeholder content here --> </ content > In a template, you must use Handlebars expressions to access and display your data. Example: iterating through all items {{ #each data.items as | item | }} <!-- Access 'item' data source fields from here (ex: item.Title)--> {{ /each }} Register layout information \u00b6 The next step is to fill information about your new layout. In the library main entry point (i.e. the class implementing the IExtensibilityLibrary in interface) return a new ILayoutDefinition object in the getCustomLayouts() method using these properties: Property Description name The friendly name of your layout that will show up in tiles. iconName An Office UI Fabric icon for your layout. key An unique internal key for your layout. type The layout type ( LayoutType.Results is for the 'Data Visualizer' Web Part, LayoutType.Filter for the 'Data Filter' Web Part). Only LayoutType.Results is supported for now. You can't add custom layout for the 'Data Filter' Web Part. templateContent The template HTML content as string. Use a require statement to get the string content from your HTML file. If you reference a JSON file, you must use the stringified value (ex: JSON.stringify(require('../custom-layout.json'), null, \"\\t\") ) serviceKey A service key used to instanciate your layout class. Builtin or custom data layouts are instanciated dynamically using SPFx service scopes . public getCustomLayouts () : ILayoutDefinition [] { return [ { name : 'My custom layout' , iconName : 'Color' , key : 'CustomLayout' , type : LayoutType . Results , templateContent : require ( '../custom-layout.html' ), serviceKey : ServiceKey.create < ILayout > ( 'MyCompany:CustomLayout' , Customlayout ) } ]; }","title":"Custom layout"},{"location":"extensibility/custom_layout/#create-a-custom-layout","text":"Custom layouts are only supported for the 'Search Results' Web Part. You can't add custom layout for the 'Search Filters' Web Part.","title":"Create a custom layout"},{"location":"extensibility/custom_layout/#layout-creation-process","text":"Same as data source, the layout creation process comes in three distinct steps: Create the layout class (i.e. define the property pane options) . Create the HTML template associated to that layout . Register the layout information for discovery .","title":"Layout creation process"},{"location":"extensibility/custom_layout/#create-the-layout","text":"In your extensibility library project, create a new MyLayout.ts TypeScript file. Create an interface for your layout properties, typically the ones you want to persist in the Web Part property bag. Layout properties are isolated from the other general Web Part properties under the property layoutProperties in the property bag object. export interface ICustomLayoutProperties { myTextProperty : string ; } Implement the BaseLayout abstract class using your properties interface: export class Customlayout extends BaseLayout < ICustomLayoutProperties > { ... } Implement your layout logic according to the available methods and properties.","title":"Create the layout"},{"location":"extensibility/custom_layout/#baselayout-methods","text":"Method Description onInit() The initialization method of your layout (ex: initialize your properties, etc.). You can perform asynchronous calls here. This method will be called when the layout is instanciated by the main Web Part. getPropertyPaneGroupsConfiguration() Returns the property pane fields to display when your layout is selected. These are regular SPFx property fields and groups. Layout properties are isolated from the other general Web Part properties under the property layoutProperties . It means you must include that path in your property pane controls get the value persisted (same thing as custom data source). Defining fields or groups is not mandatory for a layout. If you don't want to expose any option, just return an empty array. onPropertyUpdate() The method will be called when a property pane value is updated. The main Web Part in Reactive mode for property pane fields.","title":"BaseLayout - Methods"},{"location":"extensibility/custom_layout/#baselayout-properties","text":"Property Description properties The Web Part properties in the property bag. Corresponds to the isolated layoutProperties property in the global property bag. You won't be able to access any other general properties of the Web Part.","title":"BaseLayout - Properties"},{"location":"extensibility/custom_layout/#create-the-html-template-file-handlebars","text":"In your extensibility library project, create a new custom-layout.html HTML file. A layout template is split into two distinct parts: A template part, containing the HTML markup to display your data once fetched . This part is mandatory to display your data. < content id = \"template\" > <!-- Your template content here --> </ content > A placeholder part, containing the HTML markup to display as placeholder while the data are getting fetched . This part is optional. < content id = \"placeholder\" > <!-- Your placeholder content here --> </ content > In a template, you must use Handlebars expressions to access and display your data. Example: iterating through all items {{ #each data.items as | item | }} <!-- Access 'item' data source fields from here (ex: item.Title)--> {{ /each }}","title":"Create the HTML template file (Handlebars)"},{"location":"extensibility/custom_layout/#register-layout-information","text":"The next step is to fill information about your new layout. In the library main entry point (i.e. the class implementing the IExtensibilityLibrary in interface) return a new ILayoutDefinition object in the getCustomLayouts() method using these properties: Property Description name The friendly name of your layout that will show up in tiles. iconName An Office UI Fabric icon for your layout. key An unique internal key for your layout. type The layout type ( LayoutType.Results is for the 'Data Visualizer' Web Part, LayoutType.Filter for the 'Data Filter' Web Part). Only LayoutType.Results is supported for now. You can't add custom layout for the 'Data Filter' Web Part. templateContent The template HTML content as string. Use a require statement to get the string content from your HTML file. If you reference a JSON file, you must use the stringified value (ex: JSON.stringify(require('../custom-layout.json'), null, \"\\t\") ) serviceKey A service key used to instanciate your layout class. Builtin or custom data layouts are instanciated dynamically using SPFx service scopes . public getCustomLayouts () : ILayoutDefinition [] { return [ { name : 'My custom layout' , iconName : 'Color' , key : 'CustomLayout' , type : LayoutType . Results , templateContent : require ( '../custom-layout.html' ), serviceKey : ServiceKey.create < ILayout > ( 'MyCompany:CustomLayout' , Customlayout ) } ]; }","title":"Register layout information"},{"location":"extensibility/custom_query_modifications/","text":"Create a custom query modifier \u00b6 Custom query modifier can be added to a search result Web Part to modify search requests before they are sent to the server. A query modifier supports: Modification of query text : a query modifier can alter the query text. Sorted modifications : modifier can be sorted and are executed in order - but you can set a modifier to stop further modifications. Custom modifier creation process \u00b6 Custom modifier creation process comes in two distinct steps: Create the modifier logic . Register the modifier information for discovery . Create the provider logic \u00b6 In your extensibility library project, create a new CustomQueryModifier.ts TypeScript file. Create an interface for your modifier properties, typically the ones you want to persist in the Web Part property bag. Modifier properties are isolated from the other general Web Part properties under the property queryModifierProperties in the property bag object. export interface ICustomQueryModifierProperties { myProperty : string ; } Implement the BaseQueryModifier abstract class using your properties interface: export class CustomQueryModifier extends BaseQueryModifier < ICustomQueryModifierProperties > { ... } Implement your query modifier logic according to the available methods and properties. BaseQueryModifier - Methods \u00b6 Method Description onInit() The initialization method of your query modifier (ex: initialize your properties, etc.). You can perform asynchronous calls here. This method will be called when the provider is instanciated by the main Web Part. This is a good place to initialize any consumed services if any. modifyQuery() Method called to get a query modification when a search is requested. getPropertyPaneGroupsConfiguration() Returns the property pane fields to display when your query modifier is selected. These are regular SPFx property fields and groups. Query modifier properties are isolated from the other general Web Part properties under the property queryModifierProperties . It means you must include that path in your property pane controls get the value persisted. Defining fields or groups is not mandatory for a provider. If you don't want to expose any option, just return an empty array. onPropertyUpdate() The method will be called when a property pane value is updated. The main Web Part is in Reactive mode for property pane fields. BaseQueryModifier - Properties \u00b6 Property Description properties The Web Part properties in the property bag. Corresponds to the isolated queryModifierProperties property in the global property bag. You won't be able to access any other general properties of the Web Part. endWhenSuccessfull Flag indicating if this should be the last query modification when the query was modified - can be switched in the query modifier list overview. Register provider information \u00b6 The next step is to fill information about your new query modifier. In the library main entry point (i.e. the class implementing the IExtensibilityLibrary in interface) return a new IQueryModifierDefinition object in the getCustomQueryModifiers() method using these properties: Property Description name The friendly name of your query modifier that will show up in the configuration panel. key An unique internal key for your data source. description A meaningful description of your query modifier. serviceKey A service key used to instanciate your query modifier class. Builtin or custom query modifiers are instanciated dynamically using SPFx service scopes . public getCustomQueryModifiers () : IQueryModifierDefinition [] { return [ { name : 'Custom Query Modifier' , key : 'CustomQueryModifier' , description : 'A demo custom query modifier from the extensibility library' , serviceKey : ServiceKey.create < IQueryModifier > ( 'MyCompany:CustomQueryModifier' , CustomQueryModifier ) } ]; }","title":"Custom query modifier"},{"location":"extensibility/custom_query_modifications/#create-a-custom-query-modifier","text":"Custom query modifier can be added to a search result Web Part to modify search requests before they are sent to the server. A query modifier supports: Modification of query text : a query modifier can alter the query text. Sorted modifications : modifier can be sorted and are executed in order - but you can set a modifier to stop further modifications.","title":"Create a custom query modifier"},{"location":"extensibility/custom_query_modifications/#custom-modifier-creation-process","text":"Custom modifier creation process comes in two distinct steps: Create the modifier logic . Register the modifier information for discovery .","title":"Custom modifier creation process"},{"location":"extensibility/custom_query_modifications/#create-the-provider-logic","text":"In your extensibility library project, create a new CustomQueryModifier.ts TypeScript file. Create an interface for your modifier properties, typically the ones you want to persist in the Web Part property bag. Modifier properties are isolated from the other general Web Part properties under the property queryModifierProperties in the property bag object. export interface ICustomQueryModifierProperties { myProperty : string ; } Implement the BaseQueryModifier abstract class using your properties interface: export class CustomQueryModifier extends BaseQueryModifier < ICustomQueryModifierProperties > { ... } Implement your query modifier logic according to the available methods and properties.","title":"Create the provider logic"},{"location":"extensibility/custom_query_modifications/#basequerymodifier-methods","text":"Method Description onInit() The initialization method of your query modifier (ex: initialize your properties, etc.). You can perform asynchronous calls here. This method will be called when the provider is instanciated by the main Web Part. This is a good place to initialize any consumed services if any. modifyQuery() Method called to get a query modification when a search is requested. getPropertyPaneGroupsConfiguration() Returns the property pane fields to display when your query modifier is selected. These are regular SPFx property fields and groups. Query modifier properties are isolated from the other general Web Part properties under the property queryModifierProperties . It means you must include that path in your property pane controls get the value persisted. Defining fields or groups is not mandatory for a provider. If you don't want to expose any option, just return an empty array. onPropertyUpdate() The method will be called when a property pane value is updated. The main Web Part is in Reactive mode for property pane fields.","title":"BaseQueryModifier - Methods"},{"location":"extensibility/custom_query_modifications/#basequerymodifier-properties","text":"Property Description properties The Web Part properties in the property bag. Corresponds to the isolated queryModifierProperties property in the global property bag. You won't be able to access any other general properties of the Web Part. endWhenSuccessfull Flag indicating if this should be the last query modification when the query was modified - can be switched in the query modifier list overview.","title":"BaseQueryModifier - Properties"},{"location":"extensibility/custom_query_modifications/#register-provider-information","text":"The next step is to fill information about your new query modifier. In the library main entry point (i.e. the class implementing the IExtensibilityLibrary in interface) return a new IQueryModifierDefinition object in the getCustomQueryModifiers() method using these properties: Property Description name The friendly name of your query modifier that will show up in the configuration panel. key An unique internal key for your data source. description A meaningful description of your query modifier. serviceKey A service key used to instanciate your query modifier class. Builtin or custom query modifiers are instanciated dynamically using SPFx service scopes . public getCustomQueryModifiers () : IQueryModifierDefinition [] { return [ { name : 'Custom Query Modifier' , key : 'CustomQueryModifier' , description : 'A demo custom query modifier from the extensibility library' , serviceKey : ServiceKey.create < IQueryModifier > ( 'MyCompany:CustomQueryModifier' , CustomQueryModifier ) } ]; }","title":"Register provider information"},{"location":"extensibility/custom_suggestions_provider/","text":"Create a custom suggestions providers \u00b6 Custom suggestions providers can be added to a search box Web Part to get normalized keywords during search. A suggestions provider supports: Zero term suggestions : suggestions displayed when the search box get the initial focus and no term is provided. Suggestions based on a keywords : suggestions matching specific keywords provided in the search box. Custom suggestions provider creation process \u00b6 Suggestions provider creation process comes in two distinct steps: Create the provider logic . Register the provider information for discovery . Create the provider logic \u00b6 In your extensibility library project, create a new MyProvider.ts TypeScript file. Create an interface for your provider properties, typically the ones you want to persist in the Web Part property bag. Providers properties are isolated from the other general Web Part properties under the property providerProperties in the property bag object. export interface ICustomSuggestionProviderProperties { myProperty : string ; } Implement the BaseSuggestionProvider abstract class using your properties interface: export class CustomSuggestionProvider extends BaseSuggestionProvider < ICustomSuggestionProviderProperties > { ... } Implement your provider logic according to the available methods and properties. BaseSuggestionProvider - Methods \u00b6 Method Description onInit() The initialization method of your provider (ex: initialize your properties, etc.). You can perform asynchronous calls here. This method will be called when the provider is instanciated by the main Web Part. This is a good place to fetch any zero term suggestions if any. getSuggestions() Method called to retrieve suggestions when a keyword is entered (in paramter). getZeroTermSuggestions() Method called to retrieve the zero term suggestions (i.e. when the search box gets initial focus). getPropertyPaneGroupsConfiguration() Returns the property pane fields to display when your provider is selected. These are regular SPFx property fields and groups. PRovider properties are isolated from the other general Web Part properties under the property providerProperties . It means you must include that path in your property pane controls get the value persisted. Defining fields or groups is not mandatory for a provider. If you don't want to expose any option, just return an empty array. onPropertyUpdate() The method will be called when a property pane value is updated. The main Web Part in Reactive mode for property pane fields. BaseSuggestionProvider - Properties \u00b6 Property Description properties The Web Part properties in the property bag. Corresponds to the isolated providerProperties property in the global property bag. You won't be able to access any other general properties of the Web Part. isZeroTermSuggestionsEnabled Flag indicating if the provider supports zero term suggestions or not. Register provider information \u00b6 The next step is to fill information about your new suggestions provider. In the library main entry point (i.e. the class implementing the IExtensibilityLibrary in interface) return a new ISuggestionProviderDefinition object in the getCustomSuggestionProviders() method using these properties: Property Description name The friendly name of your provider that will show up in the configuration panel. key An unique internal key for your data source. description A meaningful description of your provider. serviceKey A service key used to instanciate your provider class. Builtin or custom providers are instanciated dynamically using SPFx service scopes . public getCustomSuggestionProviders () : ISuggestionProviderDefinition [] { return [ { name : 'Custom Suggestions Provider' , key : 'CustomSuggestionsProvider' , description : 'A demo custom suggestions provider from the extensibility library' , serviceKey : ServiceKey.create < ISuggestionProvider > ( 'MyCompany:CustomSuggestionsProvider' , CustomSuggestionProvider ) } ]; }","title":"Custom suggestions provider"},{"location":"extensibility/custom_suggestions_provider/#create-a-custom-suggestions-providers","text":"Custom suggestions providers can be added to a search box Web Part to get normalized keywords during search. A suggestions provider supports: Zero term suggestions : suggestions displayed when the search box get the initial focus and no term is provided. Suggestions based on a keywords : suggestions matching specific keywords provided in the search box.","title":"Create a custom suggestions providers"},{"location":"extensibility/custom_suggestions_provider/#custom-suggestions-provider-creation-process","text":"Suggestions provider creation process comes in two distinct steps: Create the provider logic . Register the provider information for discovery .","title":"Custom suggestions provider creation process"},{"location":"extensibility/custom_suggestions_provider/#create-the-provider-logic","text":"In your extensibility library project, create a new MyProvider.ts TypeScript file. Create an interface for your provider properties, typically the ones you want to persist in the Web Part property bag. Providers properties are isolated from the other general Web Part properties under the property providerProperties in the property bag object. export interface ICustomSuggestionProviderProperties { myProperty : string ; } Implement the BaseSuggestionProvider abstract class using your properties interface: export class CustomSuggestionProvider extends BaseSuggestionProvider < ICustomSuggestionProviderProperties > { ... } Implement your provider logic according to the available methods and properties.","title":"Create the provider logic"},{"location":"extensibility/custom_suggestions_provider/#basesuggestionprovider-methods","text":"Method Description onInit() The initialization method of your provider (ex: initialize your properties, etc.). You can perform asynchronous calls here. This method will be called when the provider is instanciated by the main Web Part. This is a good place to fetch any zero term suggestions if any. getSuggestions() Method called to retrieve suggestions when a keyword is entered (in paramter). getZeroTermSuggestions() Method called to retrieve the zero term suggestions (i.e. when the search box gets initial focus). getPropertyPaneGroupsConfiguration() Returns the property pane fields to display when your provider is selected. These are regular SPFx property fields and groups. PRovider properties are isolated from the other general Web Part properties under the property providerProperties . It means you must include that path in your property pane controls get the value persisted. Defining fields or groups is not mandatory for a provider. If you don't want to expose any option, just return an empty array. onPropertyUpdate() The method will be called when a property pane value is updated. The main Web Part in Reactive mode for property pane fields.","title":"BaseSuggestionProvider - Methods"},{"location":"extensibility/custom_suggestions_provider/#basesuggestionprovider-properties","text":"Property Description properties The Web Part properties in the property bag. Corresponds to the isolated providerProperties property in the global property bag. You won't be able to access any other general properties of the Web Part. isZeroTermSuggestionsEnabled Flag indicating if the provider supports zero term suggestions or not.","title":"BaseSuggestionProvider - Properties"},{"location":"extensibility/custom_suggestions_provider/#register-provider-information","text":"The next step is to fill information about your new suggestions provider. In the library main entry point (i.e. the class implementing the IExtensibilityLibrary in interface) return a new ISuggestionProviderDefinition object in the getCustomSuggestionProviders() method using these properties: Property Description name The friendly name of your provider that will show up in the configuration panel. key An unique internal key for your data source. description A meaningful description of your provider. serviceKey A service key used to instanciate your provider class. Builtin or custom providers are instanciated dynamically using SPFx service scopes . public getCustomSuggestionProviders () : ISuggestionProviderDefinition [] { return [ { name : 'Custom Suggestions Provider' , key : 'CustomSuggestionsProvider' , description : 'A demo custom suggestions provider from the extensibility library' , serviceKey : ServiceKey.create < ISuggestionProvider > ( 'MyCompany:CustomSuggestionsProvider' , CustomSuggestionProvider ) } ]; }","title":"Register provider information"},{"location":"extensibility/custom_web_component/","text":"Create a custom web component \u00b6 What is a web component? \u00b6 A web component is a custom HTML element that can be used in your templates to implement complex behaviors. In the solution we used them here as \"wrappers\" for React components to be able to use them with Handlebars. More information about web components in general can be found here . By default, several components are available ( see the complete list ). If these does not fit your requirement, you can still create your own. Web component creation process \u00b6 Web component creation process comes in two distinct steps: Create the component class and its React sub components . Register the component information for discovery . Create the component logic and sub components \u00b6 A web component is typically composed of these parts: A web component class derived from the native HTMLElement class. A main React component to be rendered inside the web component. To create new component: In your extensibility library project, create a new MyComponent.ts JSX file. Create a new class extending the abstract class BaseWebComponent . This class must have at least the connectedCallback() method from base interface HTMLElement . export class MyCustomComponentWebComponent extends BaseWebComponent { public constructor () { super (); } public async connectedCallback () { ... } } Create a new regular React component (in the same file or a separate file and as class or hook): export interface IObjectParam { myProperty : string ; } export interface ICustomComponentProps { /** * A sample string param */ myStringParam? : string ; /*** * A sample object param */ myObjectParam? : IObjectParam ; } export interface ICustomComponentState { } export class CustomComponent extends React . Component < ICustomComponentProps , ICustomComponentState > { public render () { // Parse custom object const myObject : IObjectParam = this . props . myObjectParam ; return < div > { this . props . myStringParam } { myObject . myProperty } < /div>; } } In this solution, web components are considered stateless , meaning they will be entirely recreated when an attribute is changed (coming from the property pane). It means you can still use an internal state in your React components but not rely on the parent context (props) since it will be recreated every time by the Handlebars template if a property pane value is updated. The componentDidMount() method will be called every time in this case (not componentDidUpdate() ). In your web component class, render your React component: public async connectedCallback () { let props = this . resolveAttributes (); const customComponent = < CustomComponent {... props } /> ; ReactDOM . render ( customComponent , this ); } The resolveAttributes() method will look at all data-* HTML attributes in your web component custom element node and return a corresponding key/value pair object with values in their guessed type that you can pass directly to your React component as props. By convention, web component attributes have to be passed using camel case to be tranformed into React component props. For instance: a data-my-string-param HTML attribute becomes myStringParam prop. Supported guessed types for attributes are boolean , string , date and object . All non supported types will be passed a string . HTML attributes must use the data- prefix to be retrieved correctly. To pass JSON objects, you can use the JSONstringify Handlebars helper. If valid JSON, they will be returned as objects by the resolveAttributes() method. Example < my-custom-component data-my-string-param = \"Default value\" data-my-object-param = \"{{JSONstringify this 2}}\" data-my-date-param = \"01/01/2020\" data-my-boolean-param = \"true\" > </ my-custom-component > Register component information \u00b6 The next step is to fill information about your new component. In the library main entry point (i.e. the class implementing the IExtensibilityLibrary in interface) return a new IComponentDefinition object in the getCustomWebComponents() method using these properties: Property Description componentName The name for your component. This name will be used as the custom HTML element name (ex: <my-custom-component> ). componentClass The web component class for that component. public getCustomWebComponents () : IComponentDefinition < any > [] { return [ { componentName : 'my-custom-component' , componentClass : MyCustomComponentWebComponent } ]; } Consume services from BaseWebComponent \u00b6 const msGraphClientFactory = this . _serviceScope . consume < MSGraphClientFactory > ( MSGraphClientFactory . serviceKey ); const msGraphClient = await msGraphClientFactory . getClient ();","title":"Custom web component"},{"location":"extensibility/custom_web_component/#create-a-custom-web-component","text":"","title":"Create a custom web component"},{"location":"extensibility/custom_web_component/#what-is-a-web-component","text":"A web component is a custom HTML element that can be used in your templates to implement complex behaviors. In the solution we used them here as \"wrappers\" for React components to be able to use them with Handlebars. More information about web components in general can be found here . By default, several components are available ( see the complete list ). If these does not fit your requirement, you can still create your own.","title":"What is a web component?"},{"location":"extensibility/custom_web_component/#web-component-creation-process","text":"Web component creation process comes in two distinct steps: Create the component class and its React sub components . Register the component information for discovery .","title":"Web component creation process"},{"location":"extensibility/custom_web_component/#create-the-component-logic-and-sub-components","text":"A web component is typically composed of these parts: A web component class derived from the native HTMLElement class. A main React component to be rendered inside the web component. To create new component: In your extensibility library project, create a new MyComponent.ts JSX file. Create a new class extending the abstract class BaseWebComponent . This class must have at least the connectedCallback() method from base interface HTMLElement . export class MyCustomComponentWebComponent extends BaseWebComponent { public constructor () { super (); } public async connectedCallback () { ... } } Create a new regular React component (in the same file or a separate file and as class or hook): export interface IObjectParam { myProperty : string ; } export interface ICustomComponentProps { /** * A sample string param */ myStringParam? : string ; /*** * A sample object param */ myObjectParam? : IObjectParam ; } export interface ICustomComponentState { } export class CustomComponent extends React . Component < ICustomComponentProps , ICustomComponentState > { public render () { // Parse custom object const myObject : IObjectParam = this . props . myObjectParam ; return < div > { this . props . myStringParam } { myObject . myProperty } < /div>; } } In this solution, web components are considered stateless , meaning they will be entirely recreated when an attribute is changed (coming from the property pane). It means you can still use an internal state in your React components but not rely on the parent context (props) since it will be recreated every time by the Handlebars template if a property pane value is updated. The componentDidMount() method will be called every time in this case (not componentDidUpdate() ). In your web component class, render your React component: public async connectedCallback () { let props = this . resolveAttributes (); const customComponent = < CustomComponent {... props } /> ; ReactDOM . render ( customComponent , this ); } The resolveAttributes() method will look at all data-* HTML attributes in your web component custom element node and return a corresponding key/value pair object with values in their guessed type that you can pass directly to your React component as props. By convention, web component attributes have to be passed using camel case to be tranformed into React component props. For instance: a data-my-string-param HTML attribute becomes myStringParam prop. Supported guessed types for attributes are boolean , string , date and object . All non supported types will be passed a string . HTML attributes must use the data- prefix to be retrieved correctly. To pass JSON objects, you can use the JSONstringify Handlebars helper. If valid JSON, they will be returned as objects by the resolveAttributes() method. Example < my-custom-component data-my-string-param = \"Default value\" data-my-object-param = \"{{JSONstringify this 2}}\" data-my-date-param = \"01/01/2020\" data-my-boolean-param = \"true\" > </ my-custom-component >","title":"Create the component logic and sub components"},{"location":"extensibility/custom_web_component/#register-component-information","text":"The next step is to fill information about your new component. In the library main entry point (i.e. the class implementing the IExtensibilityLibrary in interface) return a new IComponentDefinition object in the getCustomWebComponents() method using these properties: Property Description componentName The name for your component. This name will be used as the custom HTML element name (ex: <my-custom-component> ). componentClass The web component class for that component. public getCustomWebComponents () : IComponentDefinition < any > [] { return [ { componentName : 'my-custom-component' , componentClass : MyCustomComponentWebComponent } ]; }","title":"Register component information"},{"location":"extensibility/custom_web_component/#consume-services-from-basewebcomponent","text":"const msGraphClientFactory = this . _serviceScope . consume < MSGraphClientFactory > ( MSGraphClientFactory . serviceKey ); const msGraphClient = await msGraphClientFactory . getClient ();","title":"Consume services from BaseWebComponent"},{"location":"extensibility/handlebars_customizations/","text":"Register Handlebars customizations \u00b6 By default, builtin helpers and open-source Handlebars helpers are available. If these don't fit your requirements, you can still create your own custom helper or partial that you can use in your HTML templates or layout fields (ex: 'Cards' or 'Details List' layouts). To avoid any conflict, each Web Part instance gets its own Handlebars isolated namespace (i.e. using Handlebars.create() ) meaning registering customizations in the global Handlebars namespace won't work (ex: using Handlebars.registerHelper() directly). To register a new Handlebars customization for the targeted Web Part (i.e. the Web Part instances where the extensibility library is registered and enabled): In the library main entry point (i.e. the class implementing the IExtensibilityLibrary in interface), register your customization using the registerHandlebarsCustomizations() method. The namespace parameter corresponds to the targeted Web Part Handlebars isolated namespace: From here, use the Handlebars API to add your customizations to this specific namespace. They will be availabe in templates for registered Web Part instances: public registerHandlebarsCustomizations ( namespace : typeof Handlebars ) { // Register custom Handlebars helpers // Usage {{myHelper 'value'}} namespace . registerHelper ( 'myHelper' , ( value : string ) => { return new namespace . SafeString ( value . toUpperCase ()); }); } To reference the deployed manifest id of your extension in the search web part see the Introduction .","title":"Custom Handlebars customizations"},{"location":"extensibility/handlebars_customizations/#register-handlebars-customizations","text":"By default, builtin helpers and open-source Handlebars helpers are available. If these don't fit your requirements, you can still create your own custom helper or partial that you can use in your HTML templates or layout fields (ex: 'Cards' or 'Details List' layouts). To avoid any conflict, each Web Part instance gets its own Handlebars isolated namespace (i.e. using Handlebars.create() ) meaning registering customizations in the global Handlebars namespace won't work (ex: using Handlebars.registerHelper() directly). To register a new Handlebars customization for the targeted Web Part (i.e. the Web Part instances where the extensibility library is registered and enabled): In the library main entry point (i.e. the class implementing the IExtensibilityLibrary in interface), register your customization using the registerHandlebarsCustomizations() method. The namespace parameter corresponds to the targeted Web Part Handlebars isolated namespace: From here, use the Handlebars API to add your customizations to this specific namespace. They will be availabe in templates for registered Web Part instances: public registerHandlebarsCustomizations ( namespace : typeof Handlebars ) { // Register custom Handlebars helpers // Usage {{myHelper 'value'}} namespace . registerHelper ( 'myHelper' , ( value : string ) => { return new namespace . SafeString ( value . toUpperCase ()); }); } To reference the deployed manifest id of your extension in the search web part see the Introduction .","title":"Register Handlebars customizations"},{"location":"extensibility/templating/","text":"Customize layout templates \u00b6 In a basic customization scenario, super users and webmasters can customize existing templates or start from a blank template to adapt the UI to their requirements. Templates can use either Handlebars or Adaptive cards templates to display data retrieved from the data source. Depdending of the template type, there are several options to customize a template: Handlebars \u00b6 Use regular HTML markup, Handlebars syntax and helpers . Write custom CSS styles . Adaptive cards \u00b6 Use declarative Adaptive Cards JSON templates with data. Both techniques \u00b6 Use data sources slots Use default web components provided by the solution. Use Microsoft Graph Toolkit components . Handlebars, HTML and CSS customizations \u00b6 The templates and fields HTML markup is sanitized automatically preventing XSS attacks. We used DOMPurify to do so. It means for instance, you cannot add your own <script> tags or inline JavaScript. Template structure \u00b6 A layout template is always split into two distinct parts: < content id = \"template\" > <!-- Your template content here --> </ content > < content id = \"placeholder\" > <!-- Your placeholder content here --> </ content > A template part, containing the HTML markup to display your data once fetched . This part is mandatory to display your data. A placeholder part, containing the HTML markup to display as placeholder while the data are getting fetched . This part is optional. Both can use Handlebars and web components (Microsoft Graph Toolkit included). Handlebars helpers \u00b6 The following custom helpers are available in addition to the handlebars-helpers . If those don't do the job for you, you can still write your own using the extensibility library . The markdown and logging helpers are not available. For times use multiply as times is a custom iterator. dayDiff \u00b6 Syntax {{dayDiff <date1> <date2>}} Description Return the number of days between two dates, eg. show an icon for files created within the last 30 days. Example {{#compare (dayDiff (getDate Created 'YYYY-MMM-DD' ) (getDate timestamp 'YYYY-MMM-DD' )) \"<=\" 30 }} <img src='/SiteAssets/New.png' />{{/compare}} getAttachments \u00b6 Syntax {{getAttachments}} Description Return object structure for list item attachments. Example {{#getAttachments LinkOfficeChild}}<a href=\"{{url}}\">{{index}} - {{fileName}}</href>{{/getAttachments}} getCountMessage \u00b6 Syntax {{getCountMessage <total items count> <keywords>}} Description Display a friendly message displaying the result and the entered keywords. Example {{getCountMessage 5 \"contoso\"}} will display '5 results for 'contoso' . getDate \u00b6 Syntax {{getDate <data_value> \"<format>\" \"<time handling>\"}} Description Format the date with Moment.js according to the current language. Date in the managed property should be on the form 2018-09-10T06:29:25.0000000Z for the function to work. <time handling> is optional and takes: 0 = format to browsers time zone (default) 1 = ignore Z time and handle as browsers local time zone 2 = strip time and set to 00:00:00 in browsers local time zone 3 = display in the time zone for the current web 4 = display in the time zone from the user's profile Example {{getDate 2018-09-10T06:29:25.0000000Z 'LL'}} getGraphPreviewUrl \u00b6 Syntax {{getGraphPreviewUrl \"<absolute_URL>\"}} Description Try to determine the preview URL based on an absolute URL using the unified Microsoft Graph URL syntax. For instance, https://contoso.sharepoint.com/sites/dev/Shared%20Documents/MyDocument.pdf becomes https://contoso.sharepoint.com/sites/dev/Shared%20Documents/?id=/sites/dev/Shared%20Documents/MyDocument.pdf&parent=/sites/dev/Shared%20Documents Example {{getGraphPreviewUrl \"https://contoso.sharepoint.com/sites/dev/Shared%20Documents/MyDocument.pdf\"}} getPageContext \u00b6 Syntax {{getPageContext \"<SPFx page property>\"}} Description Retrieve a property from the SPFx context object. Example {{getPageContext \"user.displayName\"}} or {{getPageContext \"cultureInfo.currentUICultureName\"}} getSummary \u00b6 Syntax {{getSummary \"<value>\"}} Description Use with SharePoint Search data source and the HitHighlightedSummary SharePoint search managed property . Returns the formatted value for rendering. Example {{getSummary \"HitHighlightedSummary\"}} getTagName \u00b6 Syntax {{getTagName \"<value>\"}} Description Use with tag fields . Returns the name of the tag, omitting the ID in the tag string ( L0\\|#000000000-0000-0000-0000-000000000000\\|\u2026 ). Example {{getTagName \"Tag\"}} getUnique \u00b6 Syntax {{getUnique items \"<property>\"}} Description Return the unique values as a new array based on an array or property of an object in the array. Example {{getUnique items \"NewsCategory\"}} getUniqueCount \u00b6 Syntax {{getUniqueCount items \"<property>\"}} or {{getUniqueCount array}} Description Get the unique count of a property over the result set (or another array) or get the unique count of objects in an array. Example: [1,1,1,2,2,4] would return 3 . Example {{getUniqueCount [1,1,1,2,2,4]}} getUrlField \u00b6 Syntax {{getUrlField <managed_propertyOWSURLH> \"URL|Title\"}} Description Use with SharePoint Search data source . Returns the URL or Title part of a URL auto-created managed property Example {{getUrlField MyPropertyOWSURLH \"Title\"}} getUrlParameter \u00b6 Syntax {{getUrlParameter <parameter> <url>}} Description Return the query parameter value from a URL. Omitting the optional url parameter uses the current browser URL. Example {{getUrlParameter \"k\"}} return the value of the k query parameter from the browser URL. {{getUrlParameter \"k\" \"https://foo?k=test\"}} return the value of the k query parameter from the provided URL. getUserEmail \u00b6 Syntax {{getUserEmail <value>}} Description Extract the user email in a string based on a email regex (ex: a claim). Returns the first match. Example {{getUserEmail \"franck.cornu@contoso.onmicrosoft.com | Franck Cornu | 693A30232E667C6D656D626572736869707C6672616E636B2E636F726E7540616571756F736465762E6F6E6D6963726F736F66742E636F6D i:0#.f|membership|franck.cornu@contoso.onmicrosoft.com\"}} #group \u00b6 Syntax {{#group items by=\"<property>\"}} Description Group items by a specific results property. See https://github.com/shannonmoeller/handlebars-group-by for usage. Example {{#group items by=\"RefinableString00\"}} regex \u00b6 Syntax {{regex <expression> <string>}} Description Run a regular expression and return the match. Return - if not match. Example {{regex '\\d+' 'digit 15 is a number'}} will return 15 slot \u00b6 Syntax {{slot item <property_name>}} Description Return the <property_name> value for the item object. Supports deep property paths. Example {{slot item \"property.subproperty\"}} #times \u00b6 Syntax {{#times <number>}} Description Iterate the block <number> times. Example {{#times 5}} some mark up {{/times}} urlParse \u00b6 Syntax {{urlParse <url>}} Description Same as Handlebar Helpers. Omitting the optional url parameter uses the current browser URL. Example {{get \"query\" (urlParse)}} return the query part of a URL Need any other helper? Let us know here ! Using built-in web components \u00b6 By default, several components are available ( see the complete list ). If these does not fit your requirement, you can still create your own using the extensibility library . Custom CSS styles \u00b6 Default Behavior \u00b6 Inside an HTML template (or layout field), you can write your own CSS styles using a <style> tag. Even better, you can inject Handlebars variables, helpers, conditional blocks, etc. right inside it and get dynamic classes or attributes < content id = \"data-content\" > < style > . example-themePrimary a { color : {{ @ root . theme . palette . themePrimary } } ; } ... </ style > < div class = \"template\" > ... ... However, all CSS rules (including @media rules) will be all prefixed automatically by an unique ID ( pnp-template_<Web Part instance ID> ) to make sure styles are isolated from other Web Parts on the page. We do this to avoid conflicts between classes in the global context. Use of CSS Layers \u00b6 In contrast to the automatically prefixing all styles with the web part instance ids, the style can live in its own so called layer. This way styles bleeding into the rest of the page can be avoided. Layered styles - in contrast to the default behavior - allows mechanisms such as container queries and other future improvements such as CSS Nesting . CSS support a mechanism for isolation CSS declarations in layers. To use this mechanism specify on the style tag the data property data-cssscope as layer. < content id = \"data-content\" > < style data-cssscope = \"layer\" > . example-themePrimary a { color : {{ @ root . theme . palette . themePrimary } } ; } ... </ style > < div class = \"template\" > ... ... This convert the CSS into the following form: < style data-cssscope = \"layer\" > @ layer { . example-themePrimary a { color : {{ @ root . theme . palette . themePrimary }} ; } ... } </ style > Browser support for CSS Layer on can-i-use. Hide error message using CSS \u00b6 By default the web parts will output an error message if something goes wrong on for example API calls. If you want to hide the error message you can add the following CSS in your custom template. < content id = \"data-content\" > < style > . pnpSearchResultsErrorMessage { display : none ; } ... </ style > < div class = \"template\" > ... ... Use SharePoint contexts and theme in your templates \u00b6 If you need to use current site theme colors, fonts and so on you can use the theme property available in the @root Handlebars context like this: < content id = \"data-content\" > < style > . example-themePrimary { color: {{@root.theme.palette.themePrimary}}; } ... </ styles > ... < span class = \"example-themePrimary\" > {{Title}} </ span > ... </ content > If you want to reference the current user, you can get that from a context variable like this: < div > Login: {{@root.context.user.loginName}} </ div > You can also use this variable in the 'Details List' and 'Cards' layouts in field expressions. A good way to see all available context values is to switch to the debug layout and inspect the values: Work with placeholders \u00b6 To indicate the data are loading, you can create placeholders (shimmers) using the <content id=\"placeholder-content\"> section of your HTML template: The placeholder is only loaded during first data load. For subsequent requests, a overlay will be displayed. < content id = \"placeholder-content\" > < style > . placeholder . icon { width : 20 px ; height : 16 px ; margin-right : 5 px ; } . placeholder ul { list-style : none ; } . placeholder ul li { display : flex ; align-items : center ; padding : 8 px ; } </ style > < div class = \"placeholder\" > < ul > {{#times 5}} < li > < div class = \"icon placeholder--shimmer\" ></ div > < span class = \"placeholder--shimmer placeholder--line\" style = \"width: 60%\" ></ span > </ li > {{/times}} </ ul > </ div > </ content > Use CSS classes placeholder--shimmer and placeholder--line to build your placeholders. Basically, you can reuse the same HTML structure as your template content markup, but using these these classes instead to fill areas. If no placeholder is present in the template, a default one will be loaded. Microsoft Graph Toolkit \u00b6 The Microsoft Graph Toolkit is a collection of reusable, framework-agnostic web components and helpers for accessing and working with Microsoft Graph. The components are fully functional right of out of the box, with built in providers that authenticate with and fetch data from Microsoft Graph. In the solution, you can use Graph Tookit components without the need to re-authenticate against Microsoft Graph because the Web Parts already use the SharePoint provider . Refer to the official documentation to see all available components . For instance, we use the Microsoft Graph Toolkit for the people layout via <mgt-person> . Build templates with item selection \u00b6 If your template requires items selection for dynamic filtering, you can follow these guidelines to design your template structure. The item selection feature is based on the Office Fluent UI Selection component and custom data attributes. The available data attributes you can use in your HTML template are: data-selection-index : the index of the item being represented. This would go on the root of the tile/row. data-selection-toggle : this boolean flag would be set on the element which should handle toggles.This could be a checkbox or a div. data-selection-all-toggle : this boolean flag indicates that clicking it should toggle all selection. data-selection-disabled : allows a branch of the DOM to be marked to ignore input events that alter selections. data-selection-select : allows a branch of the DOM to ensure that the current item is selected upon interaction. As item key you must use the builtin Handlebars {{@index}} property in the {{#each}} loop. Also because state managed is internally managed by the Web Part, we provide you an Handlebars helper isItemSelected to help to apply styles depending of the selection (ex: apply a CSS class or not). To use this helper correctly, you must pass the current selected keys and current index to get the selected state for an item: (isItemSelected @root.selectedKeys @index) Template example with item selection < style > . selected { background-color : {{ @ root . theme . palette . themeLighter } } ; border : 1px solid { {@root.theme.palette.themePrimary } } ; color : { {@root.theme.palette.themePrimary } } ; } ... </ style > ... {{#each data.items as |item|}} < div class = \"{{#if (isItemSelected @root.selectedKeys @index)}}selected{{/if}}\" data-is-focusable data-selection-index = \"{{@index}}\" data-selection-toggle > < span > {{slot item @root.slots.Title}} </ span > </ div > {{/each}} Note If you allowed multi items selection, you must use CTRL + Left click to select multiple elements. You can also select a range of elements using SHIFT + Left click . Adaptive cards customizations \u00b6 As defined by Microsoft: \"Adaptive Cards are platform-agnostic snippets of UI, authored in JSON, that apps and services can openly exchange. When delivered to a specific app, the JSON is transformed into native UI that automatically adapts to its surroundings. It helps design and integrate light-weight UI for all major platforms and frameworks.\" This new way of displaying data can be used in the Modern Data Visualizer solution as well. You can use the adaptive cards builder to create your template https://www.adaptivecards.io/designer/ . Adaptive cards can be used for SharePoint Search and Micrososft Search data sources. Use web components and HTML markup in adaptive cards \u00b6 Web components and HTML are supported in adaptive cards through markdown processing. To use it simply, add your HTML markup in the text property. Example: ... { \"type\" : \"Column\" , \"items\" : [ { \"type\" : \"TextBlock\" , \"wrap\" : true , \"text\" : \"<pnp-iconfile class='icon' data-extension='${string(jPath($data, concat('.',$root.slots['FileType']))[0])}'></pnp-iconfile>\" } ], \"width\" : \"auto\" } ... HTML in adaptive cards will be sanitized. Reference a slot in a adaptive card \u00b6 Since it is not possible to create custom functions with adaptive cards templates right now, slots values can only be accessed using the builtin jPath function and the following syntax: \"items\" : [ { \"type\" : \"TextBlock\" , \"wrap\" : true , \"text\" : \"${string(jPath($data, concat('.',$root.slots['<your_slot_name>']))[0])}\" \" } ], To reference a field without a slot, just use its name: \"items\" : [ { \"type\" : \"TextBlock\" , \"wrap\" : true , \"text\" : \"${Title}\" \" } ], Explanation string() is here to make sure the result of the jPath expression will always be a string. If omitted, if the slot provided (i.e. the object path) doesn't exist, it will return null causing a render error . The jPath function always returns an array. jPath(<data>, concat('.', $root.slots['<your_slot_name>'])) where <data> is the JSON object used to resolve the slot. When looping through items , use the $data token representing the current item with properties. The expression concat('.', $root.slots['<your_slot_name>'])) is to comply with the jPath syntax: every property path should be begin with a '.' (See the official jPath documentation ). Styling your adaptive cards \u00b6 When selecting the adaptive cards mode, you can also setup styles through the host configuration . From the official Microsoft documentation: \"HostConfig is a cross-platform configuration object that specifies how an Adaptive Card Renderer generates UI.\" .","title":"Templating"},{"location":"extensibility/templating/#customize-layout-templates","text":"In a basic customization scenario, super users and webmasters can customize existing templates or start from a blank template to adapt the UI to their requirements. Templates can use either Handlebars or Adaptive cards templates to display data retrieved from the data source. Depdending of the template type, there are several options to customize a template:","title":"Customize layout templates"},{"location":"extensibility/templating/#handlebars","text":"Use regular HTML markup, Handlebars syntax and helpers . Write custom CSS styles .","title":"Handlebars"},{"location":"extensibility/templating/#adaptive-cards","text":"Use declarative Adaptive Cards JSON templates with data.","title":"Adaptive cards"},{"location":"extensibility/templating/#both-techniques","text":"Use data sources slots Use default web components provided by the solution. Use Microsoft Graph Toolkit components .","title":"Both techniques"},{"location":"extensibility/templating/#handlebars-html-and-css-customizations","text":"The templates and fields HTML markup is sanitized automatically preventing XSS attacks. We used DOMPurify to do so. It means for instance, you cannot add your own <script> tags or inline JavaScript.","title":"Handlebars, HTML and CSS customizations"},{"location":"extensibility/templating/#template-structure","text":"A layout template is always split into two distinct parts: < content id = \"template\" > <!-- Your template content here --> </ content > < content id = \"placeholder\" > <!-- Your placeholder content here --> </ content > A template part, containing the HTML markup to display your data once fetched . This part is mandatory to display your data. A placeholder part, containing the HTML markup to display as placeholder while the data are getting fetched . This part is optional. Both can use Handlebars and web components (Microsoft Graph Toolkit included).","title":"Template structure"},{"location":"extensibility/templating/#handlebars-helpers","text":"The following custom helpers are available in addition to the handlebars-helpers . If those don't do the job for you, you can still write your own using the extensibility library . The markdown and logging helpers are not available. For times use multiply as times is a custom iterator.","title":"Handlebars helpers"},{"location":"extensibility/templating/#daydiff","text":"Syntax {{dayDiff <date1> <date2>}} Description Return the number of days between two dates, eg. show an icon for files created within the last 30 days. Example {{#compare (dayDiff (getDate Created 'YYYY-MMM-DD' ) (getDate timestamp 'YYYY-MMM-DD' )) \"<=\" 30 }} <img src='/SiteAssets/New.png' />{{/compare}}","title":"dayDiff"},{"location":"extensibility/templating/#getattachments","text":"Syntax {{getAttachments}} Description Return object structure for list item attachments. Example {{#getAttachments LinkOfficeChild}}<a href=\"{{url}}\">{{index}} - {{fileName}}</href>{{/getAttachments}}","title":"getAttachments"},{"location":"extensibility/templating/#getcountmessage","text":"Syntax {{getCountMessage <total items count> <keywords>}} Description Display a friendly message displaying the result and the entered keywords. Example {{getCountMessage 5 \"contoso\"}} will display '5 results for 'contoso' .","title":"getCountMessage"},{"location":"extensibility/templating/#getdate","text":"Syntax {{getDate <data_value> \"<format>\" \"<time handling>\"}} Description Format the date with Moment.js according to the current language. Date in the managed property should be on the form 2018-09-10T06:29:25.0000000Z for the function to work. <time handling> is optional and takes: 0 = format to browsers time zone (default) 1 = ignore Z time and handle as browsers local time zone 2 = strip time and set to 00:00:00 in browsers local time zone 3 = display in the time zone for the current web 4 = display in the time zone from the user's profile Example {{getDate 2018-09-10T06:29:25.0000000Z 'LL'}}","title":"getDate"},{"location":"extensibility/templating/#getgraphpreviewurl","text":"Syntax {{getGraphPreviewUrl \"<absolute_URL>\"}} Description Try to determine the preview URL based on an absolute URL using the unified Microsoft Graph URL syntax. For instance, https://contoso.sharepoint.com/sites/dev/Shared%20Documents/MyDocument.pdf becomes https://contoso.sharepoint.com/sites/dev/Shared%20Documents/?id=/sites/dev/Shared%20Documents/MyDocument.pdf&parent=/sites/dev/Shared%20Documents Example {{getGraphPreviewUrl \"https://contoso.sharepoint.com/sites/dev/Shared%20Documents/MyDocument.pdf\"}}","title":"getGraphPreviewUrl"},{"location":"extensibility/templating/#getpagecontext","text":"Syntax {{getPageContext \"<SPFx page property>\"}} Description Retrieve a property from the SPFx context object. Example {{getPageContext \"user.displayName\"}} or {{getPageContext \"cultureInfo.currentUICultureName\"}}","title":"getPageContext"},{"location":"extensibility/templating/#getsummary","text":"Syntax {{getSummary \"<value>\"}} Description Use with SharePoint Search data source and the HitHighlightedSummary SharePoint search managed property . Returns the formatted value for rendering. Example {{getSummary \"HitHighlightedSummary\"}}","title":"getSummary"},{"location":"extensibility/templating/#gettagname","text":"Syntax {{getTagName \"<value>\"}} Description Use with tag fields . Returns the name of the tag, omitting the ID in the tag string ( L0\\|#000000000-0000-0000-0000-000000000000\\|\u2026 ). Example {{getTagName \"Tag\"}}","title":"getTagName"},{"location":"extensibility/templating/#getunique","text":"Syntax {{getUnique items \"<property>\"}} Description Return the unique values as a new array based on an array or property of an object in the array. Example {{getUnique items \"NewsCategory\"}}","title":"getUnique"},{"location":"extensibility/templating/#getuniquecount","text":"Syntax {{getUniqueCount items \"<property>\"}} or {{getUniqueCount array}} Description Get the unique count of a property over the result set (or another array) or get the unique count of objects in an array. Example: [1,1,1,2,2,4] would return 3 . Example {{getUniqueCount [1,1,1,2,2,4]}}","title":"getUniqueCount"},{"location":"extensibility/templating/#geturlfield","text":"Syntax {{getUrlField <managed_propertyOWSURLH> \"URL|Title\"}} Description Use with SharePoint Search data source . Returns the URL or Title part of a URL auto-created managed property Example {{getUrlField MyPropertyOWSURLH \"Title\"}}","title":"getUrlField"},{"location":"extensibility/templating/#geturlparameter","text":"Syntax {{getUrlParameter <parameter> <url>}} Description Return the query parameter value from a URL. Omitting the optional url parameter uses the current browser URL. Example {{getUrlParameter \"k\"}} return the value of the k query parameter from the browser URL. {{getUrlParameter \"k\" \"https://foo?k=test\"}} return the value of the k query parameter from the provided URL.","title":"getUrlParameter"},{"location":"extensibility/templating/#getuseremail","text":"Syntax {{getUserEmail <value>}} Description Extract the user email in a string based on a email regex (ex: a claim). Returns the first match. Example {{getUserEmail \"franck.cornu@contoso.onmicrosoft.com | Franck Cornu | 693A30232E667C6D656D626572736869707C6672616E636B2E636F726E7540616571756F736465762E6F6E6D6963726F736F66742E636F6D i:0#.f|membership|franck.cornu@contoso.onmicrosoft.com\"}}","title":"getUserEmail"},{"location":"extensibility/templating/#group","text":"Syntax {{#group items by=\"<property>\"}} Description Group items by a specific results property. See https://github.com/shannonmoeller/handlebars-group-by for usage. Example {{#group items by=\"RefinableString00\"}}","title":"#group"},{"location":"extensibility/templating/#regex","text":"Syntax {{regex <expression> <string>}} Description Run a regular expression and return the match. Return - if not match. Example {{regex '\\d+' 'digit 15 is a number'}} will return 15","title":"regex"},{"location":"extensibility/templating/#slot","text":"Syntax {{slot item <property_name>}} Description Return the <property_name> value for the item object. Supports deep property paths. Example {{slot item \"property.subproperty\"}}","title":"slot"},{"location":"extensibility/templating/#times","text":"Syntax {{#times <number>}} Description Iterate the block <number> times. Example {{#times 5}} some mark up {{/times}}","title":"#times"},{"location":"extensibility/templating/#urlparse","text":"Syntax {{urlParse <url>}} Description Same as Handlebar Helpers. Omitting the optional url parameter uses the current browser URL. Example {{get \"query\" (urlParse)}} return the query part of a URL Need any other helper? Let us know here !","title":"urlParse"},{"location":"extensibility/templating/#using-built-in-web-components","text":"By default, several components are available ( see the complete list ). If these does not fit your requirement, you can still create your own using the extensibility library .","title":"Using built-in web components"},{"location":"extensibility/templating/#custom-css-styles","text":"","title":"Custom CSS styles"},{"location":"extensibility/templating/#default-behavior","text":"Inside an HTML template (or layout field), you can write your own CSS styles using a <style> tag. Even better, you can inject Handlebars variables, helpers, conditional blocks, etc. right inside it and get dynamic classes or attributes < content id = \"data-content\" > < style > . example-themePrimary a { color : {{ @ root . theme . palette . themePrimary } } ; } ... </ style > < div class = \"template\" > ... ... However, all CSS rules (including @media rules) will be all prefixed automatically by an unique ID ( pnp-template_<Web Part instance ID> ) to make sure styles are isolated from other Web Parts on the page. We do this to avoid conflicts between classes in the global context.","title":"Default Behavior"},{"location":"extensibility/templating/#use-of-css-layers","text":"In contrast to the automatically prefixing all styles with the web part instance ids, the style can live in its own so called layer. This way styles bleeding into the rest of the page can be avoided. Layered styles - in contrast to the default behavior - allows mechanisms such as container queries and other future improvements such as CSS Nesting . CSS support a mechanism for isolation CSS declarations in layers. To use this mechanism specify on the style tag the data property data-cssscope as layer. < content id = \"data-content\" > < style data-cssscope = \"layer\" > . example-themePrimary a { color : {{ @ root . theme . palette . themePrimary } } ; } ... </ style > < div class = \"template\" > ... ... This convert the CSS into the following form: < style data-cssscope = \"layer\" > @ layer { . example-themePrimary a { color : {{ @ root . theme . palette . themePrimary }} ; } ... } </ style > Browser support for CSS Layer on can-i-use.","title":"Use of CSS Layers"},{"location":"extensibility/templating/#hide-error-message-using-css","text":"By default the web parts will output an error message if something goes wrong on for example API calls. If you want to hide the error message you can add the following CSS in your custom template. < content id = \"data-content\" > < style > . pnpSearchResultsErrorMessage { display : none ; } ... </ style > < div class = \"template\" > ... ...","title":"Hide error message using CSS"},{"location":"extensibility/templating/#use-sharepoint-contexts-and-theme-in-your-templates","text":"If you need to use current site theme colors, fonts and so on you can use the theme property available in the @root Handlebars context like this: < content id = \"data-content\" > < style > . example-themePrimary { color: {{@root.theme.palette.themePrimary}}; } ... </ styles > ... < span class = \"example-themePrimary\" > {{Title}} </ span > ... </ content > If you want to reference the current user, you can get that from a context variable like this: < div > Login: {{@root.context.user.loginName}} </ div > You can also use this variable in the 'Details List' and 'Cards' layouts in field expressions. A good way to see all available context values is to switch to the debug layout and inspect the values:","title":"Use SharePoint contexts and theme in your templates"},{"location":"extensibility/templating/#work-with-placeholders","text":"To indicate the data are loading, you can create placeholders (shimmers) using the <content id=\"placeholder-content\"> section of your HTML template: The placeholder is only loaded during first data load. For subsequent requests, a overlay will be displayed. < content id = \"placeholder-content\" > < style > . placeholder . icon { width : 20 px ; height : 16 px ; margin-right : 5 px ; } . placeholder ul { list-style : none ; } . placeholder ul li { display : flex ; align-items : center ; padding : 8 px ; } </ style > < div class = \"placeholder\" > < ul > {{#times 5}} < li > < div class = \"icon placeholder--shimmer\" ></ div > < span class = \"placeholder--shimmer placeholder--line\" style = \"width: 60%\" ></ span > </ li > {{/times}} </ ul > </ div > </ content > Use CSS classes placeholder--shimmer and placeholder--line to build your placeholders. Basically, you can reuse the same HTML structure as your template content markup, but using these these classes instead to fill areas. If no placeholder is present in the template, a default one will be loaded.","title":"Work with placeholders"},{"location":"extensibility/templating/#microsoft-graph-toolkit","text":"The Microsoft Graph Toolkit is a collection of reusable, framework-agnostic web components and helpers for accessing and working with Microsoft Graph. The components are fully functional right of out of the box, with built in providers that authenticate with and fetch data from Microsoft Graph. In the solution, you can use Graph Tookit components without the need to re-authenticate against Microsoft Graph because the Web Parts already use the SharePoint provider . Refer to the official documentation to see all available components . For instance, we use the Microsoft Graph Toolkit for the people layout via <mgt-person> .","title":"Microsoft Graph Toolkit"},{"location":"extensibility/templating/#build-templates-with-item-selection","text":"If your template requires items selection for dynamic filtering, you can follow these guidelines to design your template structure. The item selection feature is based on the Office Fluent UI Selection component and custom data attributes. The available data attributes you can use in your HTML template are: data-selection-index : the index of the item being represented. This would go on the root of the tile/row. data-selection-toggle : this boolean flag would be set on the element which should handle toggles.This could be a checkbox or a div. data-selection-all-toggle : this boolean flag indicates that clicking it should toggle all selection. data-selection-disabled : allows a branch of the DOM to be marked to ignore input events that alter selections. data-selection-select : allows a branch of the DOM to ensure that the current item is selected upon interaction. As item key you must use the builtin Handlebars {{@index}} property in the {{#each}} loop. Also because state managed is internally managed by the Web Part, we provide you an Handlebars helper isItemSelected to help to apply styles depending of the selection (ex: apply a CSS class or not). To use this helper correctly, you must pass the current selected keys and current index to get the selected state for an item: (isItemSelected @root.selectedKeys @index) Template example with item selection < style > . selected { background-color : {{ @ root . theme . palette . themeLighter } } ; border : 1px solid { {@root.theme.palette.themePrimary } } ; color : { {@root.theme.palette.themePrimary } } ; } ... </ style > ... {{#each data.items as |item|}} < div class = \"{{#if (isItemSelected @root.selectedKeys @index)}}selected{{/if}}\" data-is-focusable data-selection-index = \"{{@index}}\" data-selection-toggle > < span > {{slot item @root.slots.Title}} </ span > </ div > {{/each}} Note If you allowed multi items selection, you must use CTRL + Left click to select multiple elements. You can also select a range of elements using SHIFT + Left click .","title":"Build templates with item selection"},{"location":"extensibility/templating/#adaptive-cards-customizations","text":"As defined by Microsoft: \"Adaptive Cards are platform-agnostic snippets of UI, authored in JSON, that apps and services can openly exchange. When delivered to a specific app, the JSON is transformed into native UI that automatically adapts to its surroundings. It helps design and integrate light-weight UI for all major platforms and frameworks.\" This new way of displaying data can be used in the Modern Data Visualizer solution as well. You can use the adaptive cards builder to create your template https://www.adaptivecards.io/designer/ . Adaptive cards can be used for SharePoint Search and Micrososft Search data sources.","title":"Adaptive cards customizations"},{"location":"extensibility/templating/#use-web-components-and-html-markup-in-adaptive-cards","text":"Web components and HTML are supported in adaptive cards through markdown processing. To use it simply, add your HTML markup in the text property. Example: ... { \"type\" : \"Column\" , \"items\" : [ { \"type\" : \"TextBlock\" , \"wrap\" : true , \"text\" : \"<pnp-iconfile class='icon' data-extension='${string(jPath($data, concat('.',$root.slots['FileType']))[0])}'></pnp-iconfile>\" } ], \"width\" : \"auto\" } ... HTML in adaptive cards will be sanitized.","title":"Use web components and HTML markup in adaptive cards"},{"location":"extensibility/templating/#reference-a-slot-in-a-adaptive-card","text":"Since it is not possible to create custom functions with adaptive cards templates right now, slots values can only be accessed using the builtin jPath function and the following syntax: \"items\" : [ { \"type\" : \"TextBlock\" , \"wrap\" : true , \"text\" : \"${string(jPath($data, concat('.',$root.slots['<your_slot_name>']))[0])}\" \" } ], To reference a field without a slot, just use its name: \"items\" : [ { \"type\" : \"TextBlock\" , \"wrap\" : true , \"text\" : \"${Title}\" \" } ], Explanation string() is here to make sure the result of the jPath expression will always be a string. If omitted, if the slot provided (i.e. the object path) doesn't exist, it will return null causing a render error . The jPath function always returns an array. jPath(<data>, concat('.', $root.slots['<your_slot_name>'])) where <data> is the JSON object used to resolve the slot. When looping through items , use the $data token representing the current item with properties. The expression concat('.', $root.slots['<your_slot_name>'])) is to comply with the jPath syntax: every property path should be begin with a '.' (See the official jPath documentation ).","title":"Reference a slot in a adaptive card"},{"location":"extensibility/templating/#styling-your-adaptive-cards","text":"When selecting the adaptive cards mode, you can also setup styles through the host configuration . From the official Microsoft documentation: \"HostConfig is a cross-platform configuration object that specifies how an Adaptive Card Renderer generates UI.\" .","title":"Styling your adaptive cards"},{"location":"extensibility/web_components_list/","text":"Builtin web components \u00b6 Here are the list of all reusable web components you can use to customize your templates. Builtin web components <pnp-iconfile> <pnp-documentcard> <pnp-filepreview> <pnp-icon> <pnp-panel> <pnp-collapsible> <pnp-persona> <pnp-img> <pnp-breadcrumb> All other web components you will see in builtin layout templates are considered internal and are not supported for custom use. All components have an optional data-theme-variant attribute used to set the theme for your internal React components (for instance using Office UI Fabric). This value is typically retrieved from the root Handlebars context and reflect the current section theme where the Web Part belongs. If not set, the theme of current site will be used as fallback and may not corespond to the current section theme . <pnp-iconfile> \u00b6 Description : Render a file icon according to an extension. - Usage < pnp-iconfile data-extension = \"docx\" data-is-container = \"false\" data-size = \"32\" > </ pnp-iconfile > Parameter Description data-extension The file extension to render. data-is-container If true or 1 , the icon will be a folder. data-size The size of the icon to display. <pnp-documentcard> \u00b6 Description : Render a document card. Usage < pnp-documentcard data-location = \"&lt;a href=\\&quot;https://...\\&quot;&gt;Title&lt;/a&gt;\" data-title = \"Title\" data-preview-image = \"https://...\" data-preview-url = \"https://...\" data-date = \"01/01/2020\" data-href = \"https://...\" data-author = \"David Lopez\" data-profile-image = \"/_layouts/15/userphoto.aspx?size=L&username=david.lopez@contoso.com\" data-file-extension = \"docx\" data-enable-preview = \"true\" data-is-container = \"false\" data-show-file-icon = \"true\" > ` </ pnp-documentcard > Parameter Description data-location The document card location. HTML is allowed here. You must encode the string for this scenario. data-title The document card title. data-preview-image The preview image URL for the card. data-preview-url The preview URL for the card. data-href The URL for the card title. data-author The author to display. data-profile-image The profile image URL for the author if any. data-file-extension The document card file extension if any. data-enable-preview If the card supports preview. If true , a preview URL + preview image URL should be set. data-is-container If true or 1 , the file icon will be a folder icon. show-file-icon If true or 1 , the file icon will be hidden/displayed. <pnp-filepreview> \u00b6 Description : Render file preview in a callout when the wrapped element is clicked . The wrapped element can be anything (text, image, etc.) Usage < pnp-filepreview data-preview-url = \"https://...\" data-preview-image-url = \"https://...\" > < span > Wrapped element </ span > </ pnp-filepreview > Parameter Description data-preview-image The preview image URL for the callout displayed while the preview is loading in a iframe (optional). data-preview-url The preview URL for the element in the callout. <pnp-icon> \u00b6 Description : Display an Office UI Fabric icon . Usage < pnp-icon data-name = \"Tag\" aria-hidden = \"true\" ></ pnp-icon > Parameter Description data-name The Office UI Fabric icon name to display (case sensitive). <pnp-panel> \u00b6 Description : display a panel with ( panel-content ) content when the associated outer panel-open element is clicked. Usage < pnp-panel data-is-open = \"false\" data-is-light-dismiss = \"true\" data-is-blocking = \"true\" data-size = \"2\" data-panel-header-text = \"Panel header!\" > < template id = \"panel-open\" > <!-- All the content here will be wrapped with an onclick event opening/hiding the panel --> Click me! </ template > < template id = \"panel-content\" > <!-- Panel content goes here --> Panel content! </ template > </ pnp-panel > <pnp-collapsible> \u00b6 Description : expand/collapse the collapsible-content content when the text with data-group-name is clicked. Usage < pnp-collapsible data-group-name = \"Collapsible content\" data-default-collapsed = \"true\" > < template id = \"collapsible-header\" > < div > My Header! </ div > </ template > < template id = \"collapsible-content\" > < div > My Content! </ div > </ template > < template id = \"collapsible-footer\" > < div > My Footer! </ div > </ template > </ pnp-collapsible > Parameter Description data-default-collapsed If the content should be collapsed by default true/false . data-group-name The header group name for expand/collapse. <pnp-persona> \u00b6 Description : display a persona item with relevant information. Usage < pnp-persona data-image-url = \"/_layouts/15/userphoto.aspx?size=L&username=david.lopez@contoso.com\" data-primary-text = \"David Lopez\" data-secondary-text = \"Unknown\" data-tertiary-text = \"\" data-optional-text = \"514 928 0000\" data-persona-size = \"\" data-native-lpc = true data-show-presence = true data-user-object-id = \"[GUID]\" > </ pnp-persona > Parameter Description data-image-url The persona image URL. data-primary-text The primary text (ex: person display name). data-secondary-text The secondary text to display (ex: job title). data-tertiary-text The tertiary text to display (ex: work phone). data-optional-text The optional text to display. data-persona-size The size of the persona item to display (no only the picture). Valid values are tiny = 0 extraExtraSmall = 1 extraSmall = 2 small = 3 regular = 4 large = 5 extraLarge = 6 data-native-lpc Enable SharePoint native Live Persona Card on hover. data-show-presence Show the user's presence-information. data-user-object-id The person's Entra ID Object-ID (a GUID normally provided by the default-slot \"PersonQuery\" which is mapped to managed property \"AADObjectID\") <pnp-img> \u00b6 Description : Display an image with support for fallback behavior. Usage < pnp-img loading = \"lazy\" src = \"https://someimage.png\" data-error-image = \"https://fallbackimage.png\" /> < pnp-img src = \"https://someimage.png\" hideOnError /> Parameter Description errorImage URL to the fallback image hideOnError Hide image on error <pnp-breadcrumb> \u00b6 Description : Render a breadcrumb path of a SharePoint entity (file, item, folder, document library etc.). Usage : Get started with: < pnp-breadcrumb data-path = \"{{OriginalPath}}\" data-site-url = \"{{SPSiteURL}}\" data-web-url = \"{{SPWebUrl}}\" data-entity-title = \"{{Title}}\" data-entity-file-type = \"{{FileType}}\" /> Use all properties: < pnp-breadcrumb data-path = \"{{OriginalPath}}\" data-site-url = \"{{SPSiteURL}}\" data-web-url = \"{{SPWebUrl}}\" data-entity-title = \"{{Title}}\" data-entity-file-type = \"{{FileType}}\" data-include-site-name = \"false\" data-include-entity-name = \"true\" data-breadcrumb-items-as-links = \"true\" data-max-displayed-items = \"3\" data-overflow-index = \"0\" data-font-size = \"12\" /> Parameter Description data-path Used for creating the breadcrumb path. Component is designed to receive OriginalPath or Path property. Property is required for rendering the breadcrumb path. String data-site-url Used for creating the breadcrumb path. Component is designed to receive SPSiteURL property. Property is required for rendering the breadcrumb path. String data-web-url Used for creating the breadcrumb path. Component is designed to receive SPWebUrl property. Property is required for rendering the breadcrumb path. String data-entity-title Used for creating the breadcrumb path. Component is designed to receive Title property. Property is required for rendering the breadcrumb path. String data-entity-file-type Used for creating the breadcrumb path. Component is designed to receive FileType property. Property is required for rendering the breadcrumb path. String data-include-site-name If the site name should be included in the breadcrumb items. Optional, default value true . Boolean data-include-entity-name If the entity name should be included in the breadcrumb items. If the value is set to false , not only is the entity name excluded from the breadcrumb path, but also the last item in the breadcrumb path is not highlighted in bold. Optional, default value true . Boolean data-breadcrumb-items-as-links If the breadcrumb items should be clickable links to the path they represent. Optional, default value true . Boolean data-max-displayed-items The maximum number of breadcrumb items to display before coalescing. If not specified, all breadcrumbs will be rendered. Optional, default value 3 . Int data-overflow-index Index where overflow items will be collapsed. Optional, default value 0 . Int data-font-size Font size of breadcrumb items. Optional, default value 12 . Int","title":"Builtin web components"},{"location":"extensibility/web_components_list/#builtin-web-components","text":"Here are the list of all reusable web components you can use to customize your templates. Builtin web components <pnp-iconfile> <pnp-documentcard> <pnp-filepreview> <pnp-icon> <pnp-panel> <pnp-collapsible> <pnp-persona> <pnp-img> <pnp-breadcrumb> All other web components you will see in builtin layout templates are considered internal and are not supported for custom use. All components have an optional data-theme-variant attribute used to set the theme for your internal React components (for instance using Office UI Fabric). This value is typically retrieved from the root Handlebars context and reflect the current section theme where the Web Part belongs. If not set, the theme of current site will be used as fallback and may not corespond to the current section theme .","title":"Builtin web components"},{"location":"extensibility/web_components_list/#pnp-iconfile","text":"Description : Render a file icon according to an extension. - Usage < pnp-iconfile data-extension = \"docx\" data-is-container = \"false\" data-size = \"32\" > </ pnp-iconfile > Parameter Description data-extension The file extension to render. data-is-container If true or 1 , the icon will be a folder. data-size The size of the icon to display.","title":"&lt;pnp-iconfile&gt;"},{"location":"extensibility/web_components_list/#pnp-documentcard","text":"Description : Render a document card. Usage < pnp-documentcard data-location = \"&lt;a href=\\&quot;https://...\\&quot;&gt;Title&lt;/a&gt;\" data-title = \"Title\" data-preview-image = \"https://...\" data-preview-url = \"https://...\" data-date = \"01/01/2020\" data-href = \"https://...\" data-author = \"David Lopez\" data-profile-image = \"/_layouts/15/userphoto.aspx?size=L&username=david.lopez@contoso.com\" data-file-extension = \"docx\" data-enable-preview = \"true\" data-is-container = \"false\" data-show-file-icon = \"true\" > ` </ pnp-documentcard > Parameter Description data-location The document card location. HTML is allowed here. You must encode the string for this scenario. data-title The document card title. data-preview-image The preview image URL for the card. data-preview-url The preview URL for the card. data-href The URL for the card title. data-author The author to display. data-profile-image The profile image URL for the author if any. data-file-extension The document card file extension if any. data-enable-preview If the card supports preview. If true , a preview URL + preview image URL should be set. data-is-container If true or 1 , the file icon will be a folder icon. show-file-icon If true or 1 , the file icon will be hidden/displayed.","title":"&lt;pnp-documentcard&gt;"},{"location":"extensibility/web_components_list/#pnp-filepreview","text":"Description : Render file preview in a callout when the wrapped element is clicked . The wrapped element can be anything (text, image, etc.) Usage < pnp-filepreview data-preview-url = \"https://...\" data-preview-image-url = \"https://...\" > < span > Wrapped element </ span > </ pnp-filepreview > Parameter Description data-preview-image The preview image URL for the callout displayed while the preview is loading in a iframe (optional). data-preview-url The preview URL for the element in the callout.","title":"&lt;pnp-filepreview&gt;"},{"location":"extensibility/web_components_list/#pnp-icon","text":"Description : Display an Office UI Fabric icon . Usage < pnp-icon data-name = \"Tag\" aria-hidden = \"true\" ></ pnp-icon > Parameter Description data-name The Office UI Fabric icon name to display (case sensitive).","title":"&lt;pnp-icon&gt;"},{"location":"extensibility/web_components_list/#pnp-panel","text":"Description : display a panel with ( panel-content ) content when the associated outer panel-open element is clicked. Usage < pnp-panel data-is-open = \"false\" data-is-light-dismiss = \"true\" data-is-blocking = \"true\" data-size = \"2\" data-panel-header-text = \"Panel header!\" > < template id = \"panel-open\" > <!-- All the content here will be wrapped with an onclick event opening/hiding the panel --> Click me! </ template > < template id = \"panel-content\" > <!-- Panel content goes here --> Panel content! </ template > </ pnp-panel >","title":"&lt;pnp-panel&gt;"},{"location":"extensibility/web_components_list/#pnp-collapsible","text":"Description : expand/collapse the collapsible-content content when the text with data-group-name is clicked. Usage < pnp-collapsible data-group-name = \"Collapsible content\" data-default-collapsed = \"true\" > < template id = \"collapsible-header\" > < div > My Header! </ div > </ template > < template id = \"collapsible-content\" > < div > My Content! </ div > </ template > < template id = \"collapsible-footer\" > < div > My Footer! </ div > </ template > </ pnp-collapsible > Parameter Description data-default-collapsed If the content should be collapsed by default true/false . data-group-name The header group name for expand/collapse.","title":"&lt;pnp-collapsible&gt;"},{"location":"extensibility/web_components_list/#pnp-persona","text":"Description : display a persona item with relevant information. Usage < pnp-persona data-image-url = \"/_layouts/15/userphoto.aspx?size=L&username=david.lopez@contoso.com\" data-primary-text = \"David Lopez\" data-secondary-text = \"Unknown\" data-tertiary-text = \"\" data-optional-text = \"514 928 0000\" data-persona-size = \"\" data-native-lpc = true data-show-presence = true data-user-object-id = \"[GUID]\" > </ pnp-persona > Parameter Description data-image-url The persona image URL. data-primary-text The primary text (ex: person display name). data-secondary-text The secondary text to display (ex: job title). data-tertiary-text The tertiary text to display (ex: work phone). data-optional-text The optional text to display. data-persona-size The size of the persona item to display (no only the picture). Valid values are tiny = 0 extraExtraSmall = 1 extraSmall = 2 small = 3 regular = 4 large = 5 extraLarge = 6 data-native-lpc Enable SharePoint native Live Persona Card on hover. data-show-presence Show the user's presence-information. data-user-object-id The person's Entra ID Object-ID (a GUID normally provided by the default-slot \"PersonQuery\" which is mapped to managed property \"AADObjectID\")","title":"&lt;pnp-persona&gt;"},{"location":"extensibility/web_components_list/#pnp-img","text":"Description : Display an image with support for fallback behavior. Usage < pnp-img loading = \"lazy\" src = \"https://someimage.png\" data-error-image = \"https://fallbackimage.png\" /> < pnp-img src = \"https://someimage.png\" hideOnError /> Parameter Description errorImage URL to the fallback image hideOnError Hide image on error","title":"&lt;pnp-img&gt;"},{"location":"extensibility/web_components_list/#pnp-breadcrumb","text":"Description : Render a breadcrumb path of a SharePoint entity (file, item, folder, document library etc.). Usage : Get started with: < pnp-breadcrumb data-path = \"{{OriginalPath}}\" data-site-url = \"{{SPSiteURL}}\" data-web-url = \"{{SPWebUrl}}\" data-entity-title = \"{{Title}}\" data-entity-file-type = \"{{FileType}}\" /> Use all properties: < pnp-breadcrumb data-path = \"{{OriginalPath}}\" data-site-url = \"{{SPSiteURL}}\" data-web-url = \"{{SPWebUrl}}\" data-entity-title = \"{{Title}}\" data-entity-file-type = \"{{FileType}}\" data-include-site-name = \"false\" data-include-entity-name = \"true\" data-breadcrumb-items-as-links = \"true\" data-max-displayed-items = \"3\" data-overflow-index = \"0\" data-font-size = \"12\" /> Parameter Description data-path Used for creating the breadcrumb path. Component is designed to receive OriginalPath or Path property. Property is required for rendering the breadcrumb path. String data-site-url Used for creating the breadcrumb path. Component is designed to receive SPSiteURL property. Property is required for rendering the breadcrumb path. String data-web-url Used for creating the breadcrumb path. Component is designed to receive SPWebUrl property. Property is required for rendering the breadcrumb path. String data-entity-title Used for creating the breadcrumb path. Component is designed to receive Title property. Property is required for rendering the breadcrumb path. String data-entity-file-type Used for creating the breadcrumb path. Component is designed to receive FileType property. Property is required for rendering the breadcrumb path. String data-include-site-name If the site name should be included in the breadcrumb items. Optional, default value true . Boolean data-include-entity-name If the entity name should be included in the breadcrumb items. If the value is set to false , not only is the entity name excluded from the breadcrumb path, but also the last item in the breadcrumb path is not highlighted in bold. Optional, default value true . Boolean data-breadcrumb-items-as-links If the breadcrumb items should be clickable links to the path they represent. Optional, default value true . Boolean data-max-displayed-items The maximum number of breadcrumb items to display before coalescing. If not specified, all breadcrumbs will be rendered. Optional, default value 3 . Int data-overflow-index Index where overflow items will be collapsed. Optional, default value 0 . Int data-font-size Font size of breadcrumb items. Optional, default value 12 . Int","title":"&lt;pnp-breadcrumb&gt;"},{"location":"scenarios/","text":"Scenarios \u00b6 This section of the documentation provides some scenario-based recipes for building solutions with the PnP Modern Search Web Parts. It can be confusing to look across the documentation for ways to solve specific needs, so these scenarios may help. Wherever possible, we link back to the core documentation rather than explaining actions in duplicate. Create a simple search page \u00b6 We can create a search-driven experience simply by adding the PnP Modern Search Web Parts to a page: PnP Search Box and PnP Search Results. Set up Managed Properties \u00b6 In order to use your custom column values as filters in your PnP Modern Search search solutions, those columns must be mapped to refinable manage properties and they must be mapped to Managed Properties. Build a page with filters \u00b6 Most search solutions require some filters (aka refiners) to allow the user to filter the initial results. Create a search page with verticals (on different pages) \u00b6 Search verticals can be used to selectively search specific content per vertical. Using the SharePoint provider you can use result sources to limit the content returned, or you can add the required KQL in the web part itself. This sample shows how to set up multiple search verticals on different pages. Create a search page with verticals (within the same page) \u00b6 Search verticals can be used to selectively search specific content per vertical. Using the SharePoint provider you can use result sources to limit the content returned, or you can add the required KQL in the web part itself. This sample shows how to set up multiple search verticals on the same page. Create a useful People Search \u00b6 With the Modern Search Web Parts you can create a simple and useful People Search. You can search or filter people and you can show informations on the People Card when you hover. Use PnP Results web part as a Department Web Part \u00b6 With the Modern Search Web Parts you can create a simple and useful Department Web part. Use query rules for promoted links \u00b6 With the Modern Search Web Parts you can show promoted links for important results. They will be configured with query rules in the SharePoint Search Admin Center. Promoted results will show users more informations and direct links about specific, predefined, terms they searching for. Use query string from url for dynamic results \u00b6 This scenario describes how to use query string as value in the URL from the current page. You can use URL query string parameters to build dynamic search pages. Use a library with metadata that you can use the query string parameter in the URL. Setup Results web part to show birthdays \u00b6 A common request in any intranet is to show birthdays of employees. This scenario describes how to use stock SharePoint search to show birthdays of employees in the search results. Setup Results web part to show work anniversaries \u00b6 Showing the work anniversaries of employees is a common request in any intranet. This scenario describes one way to achive this using a sleight of hand trick/cheating as the search index does not contains the information we need. Connect one Search Results web part to another Search Results Web Part \u00b6 This scenario describes how to connect more then one results Web Part together. One results Web Part will view the sites, connected with the current HUB site, the other, connected results Web Part, will show the documents from the selected site. Display Multilingual term store values with PnP Search Results \u00b6 This scenario describes how term store values can be displayed in multiple languages in the PnP Modern Search.","title":"Scenario tutorials"},{"location":"scenarios/#scenarios","text":"This section of the documentation provides some scenario-based recipes for building solutions with the PnP Modern Search Web Parts. It can be confusing to look across the documentation for ways to solve specific needs, so these scenarios may help. Wherever possible, we link back to the core documentation rather than explaining actions in duplicate.","title":"Scenarios"},{"location":"scenarios/#create-a-simple-search-page","text":"We can create a search-driven experience simply by adding the PnP Modern Search Web Parts to a page: PnP Search Box and PnP Search Results.","title":"Create a simple search page"},{"location":"scenarios/#set-up-managed-properties","text":"In order to use your custom column values as filters in your PnP Modern Search search solutions, those columns must be mapped to refinable manage properties and they must be mapped to Managed Properties.","title":"Set up Managed Properties"},{"location":"scenarios/#build-a-page-with-filters","text":"Most search solutions require some filters (aka refiners) to allow the user to filter the initial results.","title":"Build a page with filters"},{"location":"scenarios/#create-a-search-page-with-verticals-on-different-pages","text":"Search verticals can be used to selectively search specific content per vertical. Using the SharePoint provider you can use result sources to limit the content returned, or you can add the required KQL in the web part itself. This sample shows how to set up multiple search verticals on different pages.","title":"Create a search page with verticals (on different pages)"},{"location":"scenarios/#create-a-search-page-with-verticals-within-the-same-page","text":"Search verticals can be used to selectively search specific content per vertical. Using the SharePoint provider you can use result sources to limit the content returned, or you can add the required KQL in the web part itself. This sample shows how to set up multiple search verticals on the same page.","title":"Create a search page with verticals (within the same page)"},{"location":"scenarios/#create-a-useful-people-search","text":"With the Modern Search Web Parts you can create a simple and useful People Search. You can search or filter people and you can show informations on the People Card when you hover.","title":"Create a useful People Search"},{"location":"scenarios/#use-pnp-results-web-part-as-a-department-web-part","text":"With the Modern Search Web Parts you can create a simple and useful Department Web part.","title":"Use PnP Results web part as a Department Web Part"},{"location":"scenarios/#use-query-rules-for-promoted-links","text":"With the Modern Search Web Parts you can show promoted links for important results. They will be configured with query rules in the SharePoint Search Admin Center. Promoted results will show users more informations and direct links about specific, predefined, terms they searching for.","title":"Use query rules for promoted links"},{"location":"scenarios/#use-query-string-from-url-for-dynamic-results","text":"This scenario describes how to use query string as value in the URL from the current page. You can use URL query string parameters to build dynamic search pages. Use a library with metadata that you can use the query string parameter in the URL.","title":"Use query string from url for dynamic results"},{"location":"scenarios/#setup-results-web-part-to-show-birthdays","text":"A common request in any intranet is to show birthdays of employees. This scenario describes how to use stock SharePoint search to show birthdays of employees in the search results.","title":"Setup Results web part to show birthdays"},{"location":"scenarios/#setup-results-web-part-to-show-work-anniversaries","text":"Showing the work anniversaries of employees is a common request in any intranet. This scenario describes one way to achive this using a sleight of hand trick/cheating as the search index does not contains the information we need.","title":"Setup Results web part to show work anniversaries"},{"location":"scenarios/#connect-one-search-results-web-part-to-another-search-results-web-part","text":"This scenario describes how to connect more then one results Web Part together. One results Web Part will view the sites, connected with the current HUB site, the other, connected results Web Part, will show the documents from the selected site.","title":"Connect one Search Results web part to another Search Results Web Part"},{"location":"scenarios/#display-multilingual-term-store-values-with-pnp-search-results","text":"This scenario describes how term store values can be displayed in multiple languages in the PnP Modern Search.","title":"Display Multilingual term store values with PnP Search Results"},{"location":"scenarios/Connect-to-a-search-results-webpart/","text":"Connect to a search results webpart \u00b6 Note The PnP Modern Search Web Parts must be deployed to your App Catalog and activated on your site. See the installation documentation for details. This scenario describes how to connect more then one results Web Part together. One results Web Part will view the sites, connected with the current HUB site, the other, connected results Web Part, will show the documents from the selected site. SharePoint HUB site structure \u00b6 As basic architecture we need a SharePoint HUB site and sites associated to the HUB site. Create a simple search page \u00b6 We need a SharePoint page configured with the PnP Modern Search Web Parts. See the scenario how you can create a simple search page Add two PnP Results Web Part, we will configure this web parts later: Configure first results Web Part with current HUB site and associated sites \u00b6 In the first PnP Results Web Part add the query to show the current HUB site and the associated sites to the HUB. Query template: {searchTerms} contentclass=STS_Site AND DepartmentID:{{Site.id._guid}} Table with HUB properties with detail information: https://learn.microsoft.com/en-us/sharepoint/crawled-and-managed-properties-overview Activate the details list layout and activate the option \"Allow items selection\" in the results Web Part. You can display only the title column, we don't need the other columns. Configure second results Web Part connected to the first \u00b6 The second PnP Search Results Web Part on the same page need the query that will show the documents from the selected site in the first results web part. Query template: {searchTerms} DepartmentID:{{Site.id._guid}} AND IsDocument:1 Activate the details list layout. You can display only the title and created column, we don't need the other columns. You need to configure the chapter \"Use data from this Web Part\" under Available connections! Save the page. Solution and test your Web Part connections \u00b6 After the configuration you can select a site and the documents will be show up for the selected site.","title":"Connect to a search results webpart"},{"location":"scenarios/Connect-to-a-search-results-webpart/#connect-to-a-search-results-webpart","text":"Note The PnP Modern Search Web Parts must be deployed to your App Catalog and activated on your site. See the installation documentation for details. This scenario describes how to connect more then one results Web Part together. One results Web Part will view the sites, connected with the current HUB site, the other, connected results Web Part, will show the documents from the selected site.","title":"Connect to a search results webpart"},{"location":"scenarios/Connect-to-a-search-results-webpart/#sharepoint-hub-site-structure","text":"As basic architecture we need a SharePoint HUB site and sites associated to the HUB site.","title":"SharePoint HUB site structure"},{"location":"scenarios/Connect-to-a-search-results-webpart/#create-a-simple-search-page","text":"We need a SharePoint page configured with the PnP Modern Search Web Parts. See the scenario how you can create a simple search page Add two PnP Results Web Part, we will configure this web parts later:","title":"Create a simple search page"},{"location":"scenarios/Connect-to-a-search-results-webpart/#configure-first-results-web-part-with-current-hub-site-and-associated-sites","text":"In the first PnP Results Web Part add the query to show the current HUB site and the associated sites to the HUB. Query template: {searchTerms} contentclass=STS_Site AND DepartmentID:{{Site.id._guid}} Table with HUB properties with detail information: https://learn.microsoft.com/en-us/sharepoint/crawled-and-managed-properties-overview Activate the details list layout and activate the option \"Allow items selection\" in the results Web Part. You can display only the title column, we don't need the other columns.","title":"Configure first results Web Part with current HUB site and associated sites"},{"location":"scenarios/Connect-to-a-search-results-webpart/#configure-second-results-web-part-connected-to-the-first","text":"The second PnP Search Results Web Part on the same page need the query that will show the documents from the selected site in the first results web part. Query template: {searchTerms} DepartmentID:{{Site.id._guid}} AND IsDocument:1 Activate the details list layout. You can display only the title and created column, we don't need the other columns. You need to configure the chapter \"Use data from this Web Part\" under Available connections! Save the page.","title":"Configure second results Web Part connected to the first"},{"location":"scenarios/Connect-to-a-search-results-webpart/#solution-and-test-your-web-part-connections","text":"After the configuration you can select a site and the documents will be show up for the selected site.","title":"Solution and test your Web Part connections"},{"location":"scenarios/Create-a-search-page-with-verticals-on-different-pages/","text":"Scenario 9 - Create a search page with verticals (on different pages) \u00b6 Note The PnP Modern Search Web Parts must be deployed to your App Catalog and activated on your site. See the installation documentation for details. This scenario describes how to configure multiple Search Verticals on different pages and how you can pass the search query to the linked search page. When you use a lot Verticals, it's recommended, to split the Search Results Web Parts to different page. Create two new SharePoint pages \u00b6 For the scenario, to add the Search Web Parts, you must first create two new modern SharePoint pages. We will be configure this new pages as search pages with the PnP Modern Search Web Parts. Add PnP Search Web Parts \u00b6 On the newly created pages, add the PnP Modern Search Web Part Search Box, Search Verticals and Search Results. You can use the same initial configuration for both pages. The WebParts can be arranged and configured on the page as desired. Configure first Search page \u00b6 Configure Search Box \u00b6 You need to configure the \"Available Connections\" in the PnP Search Box Web Part. Use dynamic data source as default input, to connect to the page environment. This is require for a dynamic search experience when you switch between the different search pages. Configure Search Vertical \u00b6 In the Search Verticals Web Part, the verticals (tabs) must be configured. Insert the tab name and a fluent icon for e better visualization. When the results are on the same page, you don't need an Link URL (Verticals Everything and Knowledge in the screen below). But for our Scenario, we need an other search page. Activate the option \"Is Hyperlink\" and add the URL to the search page, very important, add the parameter q at the end of the URL, with this parameter, you will transfer your search query to the second search page. Example URL: https://{tenant}/{site}/{page}?{parameter} Looks like: https://{tenant}/sites/ModernSearchCenter/SitePages/Modern-Search-V4-Verticals.aspx?q={SearchBoxQuery} Configure Search Results \u00b6 The Results WebPart displays all results. Select the data source SharePoint and the result source \"LocalSharePointResults\". In the \"Available Connections\" section, the connection to the Search Box and the Search Vertical must be configured. Configure second Search page \u00b6 As next, you will be configure the second search page, it's the page, that you referred above in the verticals from the first page. Configure Search Box \u00b6 You need the same configuration like in the first Search Page. Use dynamic data source as default input, to connect to the page environment. This configuration received the same query as started into the Search Box in the first Search page. Configure Search Vertical \u00b6 In the Search Verticals Web Part, the verticals (tabs) must be configured. Insert the tab name and a fluent icon for e better visualization. In this page, the \"Videos\" vertical is connected to the same page, the other two's vertical refer to the first search page, also with the +q= parameter. Configure Search Results \u00b6 The Results WebPart displays all Video results. Select the data source SharePoint and the result source \"LocalVideoResults\". In the \"Available Connections\" section, the connection to the Search Box and the Search Vertical must be configured. Both pages are configured, the query will be transfered from one page to the other and the results will show us the informations from the result sourcen, what we have configured. Test your configuration \u00b6 The query from the Search Box is sent to the Search Results. When you switch to an other Search Page, that are configured in the Vertical, the new page is open in the same tab an the query input will be transferred to the Search Results and Verticals on the second page.","title":"Scenario 9 - Create a search page with verticals (on different pages)"},{"location":"scenarios/Create-a-search-page-with-verticals-on-different-pages/#scenario-9-create-a-search-page-with-verticals-on-different-pages","text":"Note The PnP Modern Search Web Parts must be deployed to your App Catalog and activated on your site. See the installation documentation for details. This scenario describes how to configure multiple Search Verticals on different pages and how you can pass the search query to the linked search page. When you use a lot Verticals, it's recommended, to split the Search Results Web Parts to different page.","title":"Scenario 9 - Create a search page with verticals (on different pages)"},{"location":"scenarios/Create-a-search-page-with-verticals-on-different-pages/#create-two-new-sharepoint-pages","text":"For the scenario, to add the Search Web Parts, you must first create two new modern SharePoint pages. We will be configure this new pages as search pages with the PnP Modern Search Web Parts.","title":"Create two new SharePoint pages"},{"location":"scenarios/Create-a-search-page-with-verticals-on-different-pages/#add-pnp-search-web-parts","text":"On the newly created pages, add the PnP Modern Search Web Part Search Box, Search Verticals and Search Results. You can use the same initial configuration for both pages. The WebParts can be arranged and configured on the page as desired.","title":"Add PnP Search Web Parts"},{"location":"scenarios/Create-a-search-page-with-verticals-on-different-pages/#configure-first-search-page","text":"","title":"Configure first Search page"},{"location":"scenarios/Create-a-search-page-with-verticals-on-different-pages/#configure-search-box","text":"You need to configure the \"Available Connections\" in the PnP Search Box Web Part. Use dynamic data source as default input, to connect to the page environment. This is require for a dynamic search experience when you switch between the different search pages.","title":"Configure Search Box"},{"location":"scenarios/Create-a-search-page-with-verticals-on-different-pages/#configure-search-vertical","text":"In the Search Verticals Web Part, the verticals (tabs) must be configured. Insert the tab name and a fluent icon for e better visualization. When the results are on the same page, you don't need an Link URL (Verticals Everything and Knowledge in the screen below). But for our Scenario, we need an other search page. Activate the option \"Is Hyperlink\" and add the URL to the search page, very important, add the parameter q at the end of the URL, with this parameter, you will transfer your search query to the second search page. Example URL: https://{tenant}/{site}/{page}?{parameter} Looks like: https://{tenant}/sites/ModernSearchCenter/SitePages/Modern-Search-V4-Verticals.aspx?q={SearchBoxQuery}","title":"Configure Search Vertical"},{"location":"scenarios/Create-a-search-page-with-verticals-on-different-pages/#configure-search-results","text":"The Results WebPart displays all results. Select the data source SharePoint and the result source \"LocalSharePointResults\". In the \"Available Connections\" section, the connection to the Search Box and the Search Vertical must be configured.","title":"Configure Search Results"},{"location":"scenarios/Create-a-search-page-with-verticals-on-different-pages/#configure-second-search-page","text":"As next, you will be configure the second search page, it's the page, that you referred above in the verticals from the first page.","title":"Configure second Search page"},{"location":"scenarios/Create-a-search-page-with-verticals-on-different-pages/#configure-search-box_1","text":"You need the same configuration like in the first Search Page. Use dynamic data source as default input, to connect to the page environment. This configuration received the same query as started into the Search Box in the first Search page.","title":"Configure Search Box"},{"location":"scenarios/Create-a-search-page-with-verticals-on-different-pages/#configure-search-vertical_1","text":"In the Search Verticals Web Part, the verticals (tabs) must be configured. Insert the tab name and a fluent icon for e better visualization. In this page, the \"Videos\" vertical is connected to the same page, the other two's vertical refer to the first search page, also with the +q= parameter.","title":"Configure Search Vertical"},{"location":"scenarios/Create-a-search-page-with-verticals-on-different-pages/#configure-search-results_1","text":"The Results WebPart displays all Video results. Select the data source SharePoint and the result source \"LocalVideoResults\". In the \"Available Connections\" section, the connection to the Search Box and the Search Vertical must be configured. Both pages are configured, the query will be transfered from one page to the other and the results will show us the informations from the result sourcen, what we have configured.","title":"Configure Search Results"},{"location":"scenarios/Create-a-search-page-with-verticals-on-different-pages/#test-your-configuration","text":"The query from the Search Box is sent to the Search Results. When you switch to an other Search Page, that are configured in the Vertical, the new page is open in the same tab an the query input will be transferred to the Search Results and Verticals on the second page.","title":"Test your configuration"},{"location":"scenarios/Create-a-search-page-with-verticals-within-the-same-page/","text":"Scenario 8 - Create a search page with verticals (within the same page) \u00b6 Note The PnP Modern Search Web Parts must be deployed to your App Catalog and activated on your site. See the installation documentation for details. This scenario describes how to configure multiple Search Verticals on the same page. Create a new sharepoint page \u00b6 To add the Search Web Parts, you must first create a new modern SharePoint page. We will be configure this new page as a search page with the PnP Modern Search Web Parts. Add PnP Search Web Parts \u00b6 On the newly created page, add the PnP Modern Search Web Part Search Box, Search Verticals, and Search Results, twice. The Web Parts can be arranged and configured on the page as desired. Configure Search Box \u00b6 You can leave the default configuration. Configure Search Vertical \u00b6 In the Search Verticals Web Part, the verticals (tabs) must be configured. Insert the tab name and a fluent icon for e better visualization. The results are on the same page, so a link URL are not necessary. Configure first Search Result Web Part \u00b6 The first Results Web Part displays all results. Select the data source SharePoint and the result source \"LocalSharePointResults\". In the \"available connections\" section, the connection to the Search Box and the Search Vertical must be configured. The results web part should only be displayed if the vertical \"Everything\" is active. Configure second Search Result Web Part \u00b6 The second results web part displays results from the predefined result source knowledge, configures the result source in the SharePoint admin center, and the GUID must be added to the Web Part. In the \"available connections\" section, the connection to the Search Box and the Search Vertical must be configured again. The Results Web Part should only be displayed if the vertical \"Knowledge\" is selected. After that, the minimum configuration is complete and the search page must be saved and published. The configuration can be customized, and a different layout can be used for the search results per Results WebPart. Testing your configuration \u00b6 Now the query from the Search Box is sent to the verticals, depending on the choice of the verticals, the results are then displayed in the search result.","title":"Scenario 8 - Create a search page with verticals (within the same page)"},{"location":"scenarios/Create-a-search-page-with-verticals-within-the-same-page/#scenario-8-create-a-search-page-with-verticals-within-the-same-page","text":"Note The PnP Modern Search Web Parts must be deployed to your App Catalog and activated on your site. See the installation documentation for details. This scenario describes how to configure multiple Search Verticals on the same page.","title":"Scenario 8 - Create a search page with verticals (within the same page)"},{"location":"scenarios/Create-a-search-page-with-verticals-within-the-same-page/#create-a-new-sharepoint-page","text":"To add the Search Web Parts, you must first create a new modern SharePoint page. We will be configure this new page as a search page with the PnP Modern Search Web Parts.","title":"Create a new sharepoint page"},{"location":"scenarios/Create-a-search-page-with-verticals-within-the-same-page/#add-pnp-search-web-parts","text":"On the newly created page, add the PnP Modern Search Web Part Search Box, Search Verticals, and Search Results, twice. The Web Parts can be arranged and configured on the page as desired.","title":"Add PnP Search Web Parts"},{"location":"scenarios/Create-a-search-page-with-verticals-within-the-same-page/#configure-search-box","text":"You can leave the default configuration.","title":"Configure Search Box"},{"location":"scenarios/Create-a-search-page-with-verticals-within-the-same-page/#configure-search-vertical","text":"In the Search Verticals Web Part, the verticals (tabs) must be configured. Insert the tab name and a fluent icon for e better visualization. The results are on the same page, so a link URL are not necessary.","title":"Configure Search Vertical"},{"location":"scenarios/Create-a-search-page-with-verticals-within-the-same-page/#configure-first-search-result-web-part","text":"The first Results Web Part displays all results. Select the data source SharePoint and the result source \"LocalSharePointResults\". In the \"available connections\" section, the connection to the Search Box and the Search Vertical must be configured. The results web part should only be displayed if the vertical \"Everything\" is active.","title":"Configure first Search Result Web Part"},{"location":"scenarios/Create-a-search-page-with-verticals-within-the-same-page/#configure-second-search-result-web-part","text":"The second results web part displays results from the predefined result source knowledge, configures the result source in the SharePoint admin center, and the GUID must be added to the Web Part. In the \"available connections\" section, the connection to the Search Box and the Search Vertical must be configured again. The Results Web Part should only be displayed if the vertical \"Knowledge\" is selected. After that, the minimum configuration is complete and the search page must be saved and published. The configuration can be customized, and a different layout can be used for the search results per Results WebPart.","title":"Configure second Search Result Web Part"},{"location":"scenarios/Create-a-search-page-with-verticals-within-the-same-page/#testing-your-configuration","text":"Now the query from the Search Box is sent to the verticals, depending on the choice of the verticals, the results are then displayed in the search result.","title":"Testing your configuration"},{"location":"scenarios/Create-a-useful-People-Search/","text":"Create a useful People Search \u00b6 Note The PnP Modern Search Web Parts must be deployed to your App Catalog and activated on your site. See the installation documentation for details. This scenario describes how to configure a People Search with the PnP Modern Search Web Parts. You can search people in the Search Box or use filters with the Filters Web Part. With the defined layouts you can show your People Results with relevant information about the person. It's a basic configuration for a useful People Search, the PnP Web Parts have a lot more settings to configure. Create a new SharePoint page \u00b6 To add the Search Web Parts, you must first create a new modern SharePoint page. We will be configure this new page as a search page with the PnP Modern Search Web Parts. Add PnP Search Web Parts \u00b6 On the newly created page, add the PnP Modern Search Web Part Search Box, Search Filters and Search Results. The WebParts can be arranged and configured on the page as desired. Configure Search Box \u00b6 You can change the placeholder text to display in the Search Box, you can leave the default configuration for the other settings. Configure Search Filters \u00b6 Connect your Search Filters Web Part to the existing Results Web Part under \"Use data from these Web Parts\" and customize filters with your own properties. Customize filters \u00b6 Add your own filter properties to the Search Filters. This are the properties from the UPS (= SharePoint User Profile Service), check the propertiy settings in your SharePoint Search Schema. Configure Search Results \u00b6 Use the SharePoint Search as source and configure the Search Results Web Part to show only people. Choose the existing default result source LocalPeopleResults. With the query template you can exclude admin oder system accounts. In this example, only show user with an email addess this contains mehr365. Additional options to include or exclude User Profiles *User Profiles must have a valid Email address\": (WorkEmail:Mehr365.com OR WorkEmail:thebankoflondon.com) This will include only those two email domains and thereby exclude everybody else, like guest users and Cloud Only users *User Profiles that have been marked as \"Do not show\": Try searching for \"SPS-HideFromAddressLists\":1 in a tool like SP Editor or SP Query Tool ( or just use the editor for the Search Result Source ) If you see any hit then those User Profiles should most like not be shown in the Directory. The HideFromAddressLists field is actually set in MSExchange and is used to hide users in the Global Address List. *Exclude User Profiles based on text based field: -preferredname:admin -preferredname:test -preferredname:Foreign Principal -accountname:spo *Exclude User Profiles that does not have a value is certain properties: The requirement is that User Profiles should be excluded if the Department field is empty. This can be handled by using owstaxIdSPShDepartment:\"#8ed8c9ea-7052-4c1d-a4d7-b9c10bffea6f\" This query selects every User Profile where that has a value anywhere in the Termset \"Department\" in the Global Termstore. Please ensure that the GUID of the root item of the Department Termset in your tenant matches the GUID shown above. The same approach can be used for the remaining peroperties that are based on a TermSet. *Exclude User Profiles that does have a phonenumber (MobilPhone:0 OR MobilPhone:1 OR MobilPhone:2 OR MobilPhone:3 OR MobilPhone:4 OR MobilPhone:5 OR MobilPhone:6 OR MobilPhone:7 OR MobilPhone:8 OR MobilPhone:9 ) Unfortunately it is difficult to filter on a text property. The query above works but it is not pretty. Layout configuration \u00b6 It is a predefined people layout available for the people search. Use People as Search Results layout. Layout options \u00b6 In the section layout options you can manage the people fields, that will be showing in the results. When you like an people hover card, then activate this option, but you need to activate API access for Microsoft Graph in your SharePoint admin center. Use also an component size for your results. Web Part Connections \u00b6 As the last step, activate the connections. Use the query from your configured Search Box, you can also configure a default value. Conntect your Search Results also to the Filters Web Part. Solution \u00b6 After the configuration i have a useful People Search incl. Hover card, with basic configuration. You have a lot more filter and layout options that you can configure.","title":"Create a useful People Search"},{"location":"scenarios/Create-a-useful-People-Search/#create-a-useful-people-search","text":"Note The PnP Modern Search Web Parts must be deployed to your App Catalog and activated on your site. See the installation documentation for details. This scenario describes how to configure a People Search with the PnP Modern Search Web Parts. You can search people in the Search Box or use filters with the Filters Web Part. With the defined layouts you can show your People Results with relevant information about the person. It's a basic configuration for a useful People Search, the PnP Web Parts have a lot more settings to configure.","title":"Create a useful People Search"},{"location":"scenarios/Create-a-useful-People-Search/#create-a-new-sharepoint-page","text":"To add the Search Web Parts, you must first create a new modern SharePoint page. We will be configure this new page as a search page with the PnP Modern Search Web Parts.","title":"Create a new SharePoint page"},{"location":"scenarios/Create-a-useful-People-Search/#add-pnp-search-web-parts","text":"On the newly created page, add the PnP Modern Search Web Part Search Box, Search Filters and Search Results. The WebParts can be arranged and configured on the page as desired.","title":"Add PnP Search Web Parts"},{"location":"scenarios/Create-a-useful-People-Search/#configure-search-box","text":"You can change the placeholder text to display in the Search Box, you can leave the default configuration for the other settings.","title":"Configure Search Box"},{"location":"scenarios/Create-a-useful-People-Search/#configure-search-filters","text":"Connect your Search Filters Web Part to the existing Results Web Part under \"Use data from these Web Parts\" and customize filters with your own properties.","title":"Configure Search Filters"},{"location":"scenarios/Create-a-useful-People-Search/#customize-filters","text":"Add your own filter properties to the Search Filters. This are the properties from the UPS (= SharePoint User Profile Service), check the propertiy settings in your SharePoint Search Schema.","title":"Customize filters"},{"location":"scenarios/Create-a-useful-People-Search/#configure-search-results","text":"Use the SharePoint Search as source and configure the Search Results Web Part to show only people. Choose the existing default result source LocalPeopleResults. With the query template you can exclude admin oder system accounts. In this example, only show user with an email addess this contains mehr365.","title":"Configure Search Results"},{"location":"scenarios/Create-a-useful-People-Search/#layout-configuration","text":"It is a predefined people layout available for the people search. Use People as Search Results layout.","title":"Layout configuration"},{"location":"scenarios/Create-a-useful-People-Search/#layout-options","text":"In the section layout options you can manage the people fields, that will be showing in the results. When you like an people hover card, then activate this option, but you need to activate API access for Microsoft Graph in your SharePoint admin center. Use also an component size for your results.","title":"Layout options"},{"location":"scenarios/Create-a-useful-People-Search/#web-part-connections","text":"As the last step, activate the connections. Use the query from your configured Search Box, you can also configure a default value. Conntect your Search Results also to the Filters Web Part.","title":"Web Part Connections"},{"location":"scenarios/Create-a-useful-People-Search/#solution","text":"After the configuration i have a useful People Search incl. Hover card, with basic configuration. You have a lot more filter and layout options that you can configure.","title":"Solution"},{"location":"scenarios/Setup-Results-web-part-to-show-birthdays/","text":"A common requirement for intranets is to show birthdays of employees and as the SharePoint User Profile Application has a property for birthdays, it is a natural choice to use search to show birthdays of employees. In addition, at the time of writing (2023), the Graph API does not have a property for birthdays, so we can't use the Graph API to get the information. The tricky part is that in the User profile application the birthday value is store is a rather unusual datatype: \"date no year\" In my tenant the SPS-Birthday property was mapped to RefinableDate00 and the actual value in the property is 2000-[the date]: (use the magnificent SP Editor tool or SP Search Query Tool to inspect the managed properties) So, the query had to be something like \"those accounts where RefinableDate00 = 2000 + the value of today's date In KQL we have the token \"today\" that will give us today's date, but as far as I know, we can't get the components the date consist of, like Month and Day. Luckily, the PnP Modern search provides additional Tokens, see Tokens So the final query is: RefinableDate00=2000-{CurrentMonth}-{CurrentDate}T00:00:00Z ( and of cause a criteria to exclude former employees, like SPS-HideFromAddressLists<>1)","title":"Setup Results web part to show birthdays"},{"location":"scenarios/Setup-Results-web-part-to-show-work-anniversaries/","text":"Getting PnP Modern Search to show work anniversaries should be easy enoght, right? Just add a couple of managed properties and a couple of web parts and you are done. Well, not quite. The problem is that date manipulation in KQL is hard at best and sometimes impossible. In order to find a work anniversary you must compare Today and the Hiredate managed property, but ONLY the day and month part. Calculating how many years the employee has been with the company is also required and it seems like there is no way to get that using KQL. Objective \u00b6 We want to be able to display two options: - Employees having a work anniversary today, and also how many years they have been with the company - Employees having a work anniversary within the next 7 days + number of years. How to cheat \u00b6 In order to achieve the objectives, I had to get: - The account - The hiredate, but with the year segment being the current year - The number of years the employee has been with company at the next anniversary Lets add birthdayThisYear while I was at it, in order to be able to show upcoming birthdays. The basic idea is that we want to change the hiredate from eg. 10/26/2005 to 10/26/2023 as that allows us to compare Today with this value \ud83d\ude00 (RefinableDate12 is mapped to the HiredateThisYear property) Who is having a work anniversary today? RefinableDate12=Today Anniversary within the next x days is also a piece of cake: RefinableDate12<{Today+7} AND RefinableDate12>{Today} Implementation \u00b6 Asking the intern to keep the list above in sync would be a cruel and unusual punishment, and hence actually forbidden in the USA, something to do with a constitution or something like that. The list should of course be synced with the source, in this case the User Profile Application, at least once each month. The reason I am not using Graph is that birthday is not in the schema. Prereq: Map SPS-Birthday and SPS-Hiredate to RefinableDate00/01 or similar Once data is showing up in those RefinableDate properties you should be ready to create the list. Grab the script here . It will create a few Site Columns and a Content type on the site collection of your choosing. The list is then created, and the Content type added to the list. The Add-UserDataToList function will query the UPA for accounts and write the data we need to the list. Hit the Reindex site in the site collections Search and Offline Availability section for the site columns to be picked up by search. Map the crawled properties to a couple of RefinableDates. If possible it is recommended to make this mapping on the tenant level as it ensures that you can use them in your entire tenant. Find the Content Type ID of the Content type created by the script. Add a Results web part, name it \"Todays work anniversaries\" Set the Query template to: Contenttypeid:0x01009290F0FA40E7CB42B55D6D96F897262B* RefinableDate12=Today (replace 0x01009290F0FA40E7CB42B55D6D96F897262B with the value for the your content type) Add a Results web part, name it \"Upcoming anniversaries (7 days)\" Set the Query template to: Contenttypeid:0x01009290F0FA40E7CB42B55D6D96F897262B* RefinableDate12<{Today+7} AND RefinableDate12>{Today} (replace 0x01009290F0FA40E7CB42B55D6D96F897262B with the value for your content type) Add the managed properties birthdayhiredateAccountOWSUSER, nextWorkAnniversaryInYearsOWSTNMBR, RefinableDate10, RefinableDate12 to the Selected Properties in both web parts. Enter Layout slots Change UserEmail to use the birthdayhiredateAccountOWSUSER property Change Date from Created to RefinableDate12 For both web parts you can select the People layout on \"page 2\" in the web part configuration. Set Secondary text to: {{{Title}}} has been with us {{{nextWorkAnniversaryInYearsOWSTNMBR}}} years (remember to click Use Handlebars expression) Set Tertiary text to: {{getDate (slot item @root.slots.Date) \"MMMM-D\"}} (remember to click Use Handlebars expression) Set the sorting on the Upcoming Anniversaries to RefinableDate12 asc Run the Add-UserDataToList function in a runbook or similar once a month and you should be done\ud83d\ude0a Near the end of the year you might need to run is once per day.","title":"Setup Results web part to show work anniversaries"},{"location":"scenarios/Setup-Results-web-part-to-show-work-anniversaries/#objective","text":"We want to be able to display two options: - Employees having a work anniversary today, and also how many years they have been with the company - Employees having a work anniversary within the next 7 days + number of years.","title":"Objective"},{"location":"scenarios/Setup-Results-web-part-to-show-work-anniversaries/#how-to-cheat","text":"In order to achieve the objectives, I had to get: - The account - The hiredate, but with the year segment being the current year - The number of years the employee has been with company at the next anniversary Lets add birthdayThisYear while I was at it, in order to be able to show upcoming birthdays. The basic idea is that we want to change the hiredate from eg. 10/26/2005 to 10/26/2023 as that allows us to compare Today with this value \ud83d\ude00 (RefinableDate12 is mapped to the HiredateThisYear property) Who is having a work anniversary today? RefinableDate12=Today Anniversary within the next x days is also a piece of cake: RefinableDate12<{Today+7} AND RefinableDate12>{Today}","title":"How to cheat"},{"location":"scenarios/Setup-Results-web-part-to-show-work-anniversaries/#implementation","text":"Asking the intern to keep the list above in sync would be a cruel and unusual punishment, and hence actually forbidden in the USA, something to do with a constitution or something like that. The list should of course be synced with the source, in this case the User Profile Application, at least once each month. The reason I am not using Graph is that birthday is not in the schema. Prereq: Map SPS-Birthday and SPS-Hiredate to RefinableDate00/01 or similar Once data is showing up in those RefinableDate properties you should be ready to create the list. Grab the script here . It will create a few Site Columns and a Content type on the site collection of your choosing. The list is then created, and the Content type added to the list. The Add-UserDataToList function will query the UPA for accounts and write the data we need to the list. Hit the Reindex site in the site collections Search and Offline Availability section for the site columns to be picked up by search. Map the crawled properties to a couple of RefinableDates. If possible it is recommended to make this mapping on the tenant level as it ensures that you can use them in your entire tenant. Find the Content Type ID of the Content type created by the script. Add a Results web part, name it \"Todays work anniversaries\" Set the Query template to: Contenttypeid:0x01009290F0FA40E7CB42B55D6D96F897262B* RefinableDate12=Today (replace 0x01009290F0FA40E7CB42B55D6D96F897262B with the value for the your content type) Add a Results web part, name it \"Upcoming anniversaries (7 days)\" Set the Query template to: Contenttypeid:0x01009290F0FA40E7CB42B55D6D96F897262B* RefinableDate12<{Today+7} AND RefinableDate12>{Today} (replace 0x01009290F0FA40E7CB42B55D6D96F897262B with the value for your content type) Add the managed properties birthdayhiredateAccountOWSUSER, nextWorkAnniversaryInYearsOWSTNMBR, RefinableDate10, RefinableDate12 to the Selected Properties in both web parts. Enter Layout slots Change UserEmail to use the birthdayhiredateAccountOWSUSER property Change Date from Created to RefinableDate12 For both web parts you can select the People layout on \"page 2\" in the web part configuration. Set Secondary text to: {{{Title}}} has been with us {{{nextWorkAnniversaryInYearsOWSTNMBR}}} years (remember to click Use Handlebars expression) Set Tertiary text to: {{getDate (slot item @root.slots.Date) \"MMMM-D\"}} (remember to click Use Handlebars expression) Set the sorting on the Upcoming Anniversaries to RefinableDate12 asc Run the Add-UserDataToList function in a runbook or similar once a month and you should be done\ud83d\ude0a Near the end of the year you might need to run is once per day.","title":"Implementation"},{"location":"scenarios/Use-query-rules-for-promoted-links/","text":"Use query rules for promoted links \u00b6 Note The PnP Modern Search Web Parts must be deployed to your App Catalog and activated on your site. See the installation documentation for details. This scenario describes how to configure query rules for promoted links and how they show in the PnP Modern Search Web Parts. As Admin you will be configure query rules in the SharePoint Search Admin Center. After that you can activate query rules in PnP Search Results Web Part. When a search query matches with predefined terms, a promoted link will show in the Search Result Web Part. Create a query rule (in SharePoint Admin Center) \u00b6 As Global or SharePoint Admin in M365 you can configure query rules in the M365 SharePoint Admin Center for Tenant level. Under More features you can find Search, in there you find the point Manage Query Rules. You need to choice the results source, for which you want to configure a rule. As second step you can create a new query rule. Configure a query condition \u00b6 Add a rule name, use the query condition \"Query Matches Keyword Exactly\" and add your terms semi-colon separated into the field. Add an Action \u00b6 Now an action must be added for something to happen. Add a Promoted Result to show important information in search results. Save your promoted result. Configured query rule \u00b6 Default the query rule is active under publishing, if you don't want to see this role in the search results, you can uncheck it. That was the last work in the SharePoint Admin Center, now it's time to configure the search web parts. Create a new sharepoint page \u00b6 To add the Search Web Parts, you must first create a new modern SharePoint page. We will be configure this new page as a search page with the PnP Modern Search Web Parts. Add PnP Search Web Parts \u00b6 On the newly created page, add the PnP Modern Search Web Part Search Box and Search Results. The WebParts can be arranged and configured on the page as desired. Configure Search Results \u00b6 Use the SharePoint Search as source. Choose the existing default result source LocalSharePointResults, it's the same, that we have configured for the query rule before. On the same web part configuration step, but more down, you will check enable query rules. No more As the last step, activate the connections. Use the query from your configured Search Box, you can also configure a default value. Show your promoted links \u00b6 If you now search for a defined term, promoted links will be displayed on top of the results. It's a default template integrated in the solution, feel free to customize your own visual in a custom result template.","title":"Use query rules for promoted links"},{"location":"scenarios/Use-query-rules-for-promoted-links/#use-query-rules-for-promoted-links","text":"Note The PnP Modern Search Web Parts must be deployed to your App Catalog and activated on your site. See the installation documentation for details. This scenario describes how to configure query rules for promoted links and how they show in the PnP Modern Search Web Parts. As Admin you will be configure query rules in the SharePoint Search Admin Center. After that you can activate query rules in PnP Search Results Web Part. When a search query matches with predefined terms, a promoted link will show in the Search Result Web Part.","title":"Use query rules for promoted links"},{"location":"scenarios/Use-query-rules-for-promoted-links/#create-a-query-rule-in-sharepoint-admin-center","text":"As Global or SharePoint Admin in M365 you can configure query rules in the M365 SharePoint Admin Center for Tenant level. Under More features you can find Search, in there you find the point Manage Query Rules. You need to choice the results source, for which you want to configure a rule. As second step you can create a new query rule.","title":"Create a query rule (in SharePoint Admin Center)"},{"location":"scenarios/Use-query-rules-for-promoted-links/#configure-a-query-condition","text":"Add a rule name, use the query condition \"Query Matches Keyword Exactly\" and add your terms semi-colon separated into the field.","title":"Configure a query condition"},{"location":"scenarios/Use-query-rules-for-promoted-links/#add-an-action","text":"Now an action must be added for something to happen. Add a Promoted Result to show important information in search results. Save your promoted result.","title":"Add an Action"},{"location":"scenarios/Use-query-rules-for-promoted-links/#configured-query-rule","text":"Default the query rule is active under publishing, if you don't want to see this role in the search results, you can uncheck it. That was the last work in the SharePoint Admin Center, now it's time to configure the search web parts.","title":"Configured query rule"},{"location":"scenarios/Use-query-rules-for-promoted-links/#create-a-new-sharepoint-page","text":"To add the Search Web Parts, you must first create a new modern SharePoint page. We will be configure this new page as a search page with the PnP Modern Search Web Parts.","title":"Create a new sharepoint page"},{"location":"scenarios/Use-query-rules-for-promoted-links/#add-pnp-search-web-parts","text":"On the newly created page, add the PnP Modern Search Web Part Search Box and Search Results. The WebParts can be arranged and configured on the page as desired.","title":"Add PnP Search Web Parts"},{"location":"scenarios/Use-query-rules-for-promoted-links/#configure-search-results","text":"Use the SharePoint Search as source. Choose the existing default result source LocalSharePointResults, it's the same, that we have configured for the query rule before. On the same web part configuration step, but more down, you will check enable query rules. No more As the last step, activate the connections. Use the query from your configured Search Box, you can also configure a default value.","title":"Configure Search Results"},{"location":"scenarios/Use-query-rules-for-promoted-links/#show-your-promoted-links","text":"If you now search for a defined term, promoted links will be displayed on top of the results. It's a default template integrated in the solution, feel free to customize your own visual in a custom result template.","title":"Show your promoted links"},{"location":"scenarios/create-simple-search-page/","text":"Scenario 1: Create a simple search page \u00b6 Note The PnP Modern Search Web Parts must be deployed to your App Catalog and activated on your site. See the installation documentation for details. Create a new SharePoint page \u00b6 Any page can contain the PnP Modern Search Web Parts. For simple Search Results only, we may embed the Web Part in a page with other content, but generally we create a new page. From the home page of you site (you must be a Site Owner), click on + New / Page. Configure the page as you would any other, adding a page name. Add the Web Parts to the page \u00b6 Click on the + where you would like to add a PnP Modern Search Web Part and type \"PnP\" to filter to the Web Parts. Select the PnP Search Box . Below the PnP Search Box, add PnP Search Results . Connect the Web Parts \u00b6 Now you need to connect the Web Parts in their properties panes. For this simple scenario, you don't need to change any properties for the PnP Search Box . Click on the Configure button in the middle of the PnP Search Results Web Part. This will open the property pane for the Web Part. Again, keeping things simple, click the SharePoint Search button. At the bottom of the property pane, click Next to go to the third property panel. Turn on the Use input query text toggle and set the options as shown. Publish the page. At this point, you have a fully functional search page with a PnP Search Box and PnP Search Results. While this isn't all that different than what you can do with the Microsoft Search box at the top of every screen, you've laid the ground work for a more robust and customized search experience.","title":"Scenario 1: Create a simple search page"},{"location":"scenarios/create-simple-search-page/#scenario-1-create-a-simple-search-page","text":"Note The PnP Modern Search Web Parts must be deployed to your App Catalog and activated on your site. See the installation documentation for details.","title":"Scenario 1: Create a simple search page"},{"location":"scenarios/create-simple-search-page/#create-a-new-sharepoint-page","text":"Any page can contain the PnP Modern Search Web Parts. For simple Search Results only, we may embed the Web Part in a page with other content, but generally we create a new page. From the home page of you site (you must be a Site Owner), click on + New / Page. Configure the page as you would any other, adding a page name.","title":"Create a new SharePoint page"},{"location":"scenarios/create-simple-search-page/#add-the-web-parts-to-the-page","text":"Click on the + where you would like to add a PnP Modern Search Web Part and type \"PnP\" to filter to the Web Parts. Select the PnP Search Box . Below the PnP Search Box, add PnP Search Results .","title":"Add the Web Parts to the page"},{"location":"scenarios/create-simple-search-page/#connect-the-web-parts","text":"Now you need to connect the Web Parts in their properties panes. For this simple scenario, you don't need to change any properties for the PnP Search Box . Click on the Configure button in the middle of the PnP Search Results Web Part. This will open the property pane for the Web Part. Again, keeping things simple, click the SharePoint Search button. At the bottom of the property pane, click Next to go to the third property panel. Turn on the Use input query text toggle and set the options as shown. Publish the page. At this point, you have a fully functional search page with a PnP Search Box and PnP Search Results. While this isn't all that different than what you can do with the Microsoft Search box at the top of every screen, you've laid the ground work for a more robust and customized search experience.","title":"Connect the Web Parts"},{"location":"scenarios/display-multilingual-term-store-values-with-pnp-search-results/","text":"Display Multilingual term store values with PnP Search Results \u00b6 Note The PnP Modern Search Web Parts must be deployed to your App Catalog and activated on your site. See the installation documentation for details. This scenario describes how term store values can be displayed in multiple languages in the PnP Modern Search. Prepare the scenario \u00b6 I use the colours as example in my case, it's simple to understand in different languages. You need also 2 different users with different language settings for a quicklier testing. Create a SharePoint Term store and translate the terms into another language, i use english as a default language and german as work language. Translate every term within the term set. Create a SharePoint site column with type Managed Metadata and use the newly created term set. Add the new site column to a SharePoint document library and tag your documents. When you check the library with your 2 different users, you can see SharePoint will be translate the multilingual term sets in the language from the user, where is logged in. SharePoint will be translate all default terms also in the other language, but not columns or views, but you can translate this terms manually. Library in english: Library in german: As prepare for our search configuration, map the new crawled property to RefinableStringXX Managed Properties, please attention, map both Crawled properties, OWS_ and the OWS_TAXID_, to Managed Properties. Now, we are ready to jump into our search scenario, let's go \ud83d\ude80 Add PnP Search Results WebPart to a page \u00b6 Add the PnP Search Results WebPart to a new or existing site page. See the scenario how you can create a simple search page Configure Search Results WebPart \u00b6 Configure the new PnP Results WebPart with a SharePoint Search source and as simply as possible, with a path-query and add the new Managed Properties as Selected properties in the WebPart configuration. Add the new Managed Property, with the OWS_, as Managed columns into the results WebPart and save the page. Check the page with both users and different language settings and you can see, the terms will NOT translate into the languages, we can see the default language as column values. Configure multilingual columns \u00b6 Edit the page and go back to Manage columns, activate the Use Handlebar expression and insert {{AutoRefinableString127}} , the second property mapped to the crawled property OWS_TAXID_, as expression. Enable localization on the first page from the PnP Search Results configuration. Testing Search configuration \u00b6 After saving the configuration, now you can see the translated values in the PnP Search Results WebPart in the different languages. Results in english \u00b6 Results in german \u00b6 *A little multilingual disclaimer: The search columns or SharePoint WebPart titles are not multilingual, but you can use SharePoint Multilingual Pages to configure more in a different language. See more in the Microsoft article: Create multilingual SharePoint sites, pages, and news","title":"Display Multilingual term store values with PnP Search Results"},{"location":"scenarios/display-multilingual-term-store-values-with-pnp-search-results/#display-multilingual-term-store-values-with-pnp-search-results","text":"Note The PnP Modern Search Web Parts must be deployed to your App Catalog and activated on your site. See the installation documentation for details. This scenario describes how term store values can be displayed in multiple languages in the PnP Modern Search.","title":"Display Multilingual term store values with PnP Search Results"},{"location":"scenarios/display-multilingual-term-store-values-with-pnp-search-results/#prepare-the-scenario","text":"I use the colours as example in my case, it's simple to understand in different languages. You need also 2 different users with different language settings for a quicklier testing. Create a SharePoint Term store and translate the terms into another language, i use english as a default language and german as work language. Translate every term within the term set. Create a SharePoint site column with type Managed Metadata and use the newly created term set. Add the new site column to a SharePoint document library and tag your documents. When you check the library with your 2 different users, you can see SharePoint will be translate the multilingual term sets in the language from the user, where is logged in. SharePoint will be translate all default terms also in the other language, but not columns or views, but you can translate this terms manually. Library in english: Library in german: As prepare for our search configuration, map the new crawled property to RefinableStringXX Managed Properties, please attention, map both Crawled properties, OWS_ and the OWS_TAXID_, to Managed Properties. Now, we are ready to jump into our search scenario, let's go \ud83d\ude80","title":"Prepare the scenario"},{"location":"scenarios/display-multilingual-term-store-values-with-pnp-search-results/#add-pnp-search-results-webpart-to-a-page","text":"Add the PnP Search Results WebPart to a new or existing site page. See the scenario how you can create a simple search page","title":"Add PnP Search Results WebPart to a page"},{"location":"scenarios/display-multilingual-term-store-values-with-pnp-search-results/#configure-search-results-webpart","text":"Configure the new PnP Results WebPart with a SharePoint Search source and as simply as possible, with a path-query and add the new Managed Properties as Selected properties in the WebPart configuration. Add the new Managed Property, with the OWS_, as Managed columns into the results WebPart and save the page. Check the page with both users and different language settings and you can see, the terms will NOT translate into the languages, we can see the default language as column values.","title":"Configure Search Results WebPart"},{"location":"scenarios/display-multilingual-term-store-values-with-pnp-search-results/#configure-multilingual-columns","text":"Edit the page and go back to Manage columns, activate the Use Handlebar expression and insert {{AutoRefinableString127}} , the second property mapped to the crawled property OWS_TAXID_, as expression. Enable localization on the first page from the PnP Search Results configuration.","title":"Configure multilingual columns"},{"location":"scenarios/display-multilingual-term-store-values-with-pnp-search-results/#testing-search-configuration","text":"After saving the configuration, now you can see the translated values in the PnP Search Results WebPart in the different languages.","title":"Testing Search configuration"},{"location":"scenarios/display-multilingual-term-store-values-with-pnp-search-results/#results-in-english","text":"","title":"Results in english"},{"location":"scenarios/display-multilingual-term-store-values-with-pnp-search-results/#results-in-german","text":"*A little multilingual disclaimer: The search columns or SharePoint WebPart titles are not multilingual, but you can use SharePoint Multilingual Pages to configure more in a different language. See more in the Microsoft article: Create multilingual SharePoint sites, pages, and news","title":"Results in german"},{"location":"scenarios/page-with-filters/","text":"Scenario 3: Build a page with filters \u00b6 Note The PnP Modern Search Web Parts must be deployed to your App Catalog and activated on your site. See the installation documentation for details. Add a PnP Filters Web Part \u00b6 Adding filters to your search page takes a few steps. First, decide on your page layout. One common layout is shown below, with the PnP Search Box in a One column page section with a One-third left section below, having the PnP Filter Web Part on the left and the PnP Search Results Web Part on the right. In the image above, you can see the PnP Filter Web Part still \"wants\" to be configured. This happens in two places: you must connect the PnP Filter Web Part to your PnP Search Results Web Part, and vice versa. On panel 3 of the PnP Search Results Web Part in the Connect to a filters Web Part section, turn on the connection and select the PnP Filter Web Part you've added. Next, go to the properties for the PnP Filter Web Part and connect ot the PnP Search Results Web Part. In case you're wondering, the reason you need to make these connections in both Web Part is there are more complex scenarios the Web Parts can support, and those may require multiple connections in the two location. More about those possibilities in other scenarios. Add the Managed Properties to the Selected properties \u00b6 Next you need to add the columns which you would like to use as filters to the PnP Search Results Web Part in the Selected properties (Properties panel 1). The Selected properties tell the PnP Search Results Web Part which values to ask the search APIs to retrieve for each result. If the value is retrieved, you can use it in your result display, but more importantly for this scenario, the PnP Filter Web Part can consume those values to provide the filter values. In some cases, you'll use out-of-the-box columns like Created or Author (aka Created By). More often, you'll use Managed Properties you've set up in the Set up Managed Properties scenario. Click on the Selected properties and check off the Managed Properties you'd like to use in your filters. Only check off the Managed Properties you'll actually use; including unnecessary Managed Properties may slow down your page, since unnecessary values will be retrieved. Set up the filters \u00b6 Once you're retrieving the Managed Properties you want to use for filters, you need to set them up in the PnP Filter Web Part. In the PnP Filters Web Part properties, click on the Edit button In this panel, you can add each filter you'd like to provide to your users and select a template to use for displaying it. See the PnP Filters Web Part documentation for the specifics. In this example, we're setting up filters for Created and Created By . Note we are using appropriate templates based on the type of data in each Managed Property. Save your page, and your users will now be able to filter their search results based on the filters you have chosen.","title":"Scenario 3: Build a page with filters"},{"location":"scenarios/page-with-filters/#scenario-3-build-a-page-with-filters","text":"Note The PnP Modern Search Web Parts must be deployed to your App Catalog and activated on your site. See the installation documentation for details.","title":"Scenario 3: Build a page with filters"},{"location":"scenarios/page-with-filters/#add-a-pnp-filters-web-part","text":"Adding filters to your search page takes a few steps. First, decide on your page layout. One common layout is shown below, with the PnP Search Box in a One column page section with a One-third left section below, having the PnP Filter Web Part on the left and the PnP Search Results Web Part on the right. In the image above, you can see the PnP Filter Web Part still \"wants\" to be configured. This happens in two places: you must connect the PnP Filter Web Part to your PnP Search Results Web Part, and vice versa. On panel 3 of the PnP Search Results Web Part in the Connect to a filters Web Part section, turn on the connection and select the PnP Filter Web Part you've added. Next, go to the properties for the PnP Filter Web Part and connect ot the PnP Search Results Web Part. In case you're wondering, the reason you need to make these connections in both Web Part is there are more complex scenarios the Web Parts can support, and those may require multiple connections in the two location. More about those possibilities in other scenarios.","title":"Add a PnP Filters Web Part"},{"location":"scenarios/page-with-filters/#add-the-managed-properties-to-the-selected-properties","text":"Next you need to add the columns which you would like to use as filters to the PnP Search Results Web Part in the Selected properties (Properties panel 1). The Selected properties tell the PnP Search Results Web Part which values to ask the search APIs to retrieve for each result. If the value is retrieved, you can use it in your result display, but more importantly for this scenario, the PnP Filter Web Part can consume those values to provide the filter values. In some cases, you'll use out-of-the-box columns like Created or Author (aka Created By). More often, you'll use Managed Properties you've set up in the Set up Managed Properties scenario. Click on the Selected properties and check off the Managed Properties you'd like to use in your filters. Only check off the Managed Properties you'll actually use; including unnecessary Managed Properties may slow down your page, since unnecessary values will be retrieved.","title":"Add the Managed Properties to the Selected properties"},{"location":"scenarios/page-with-filters/#set-up-the-filters","text":"Once you're retrieving the Managed Properties you want to use for filters, you need to set them up in the PnP Filter Web Part. In the PnP Filters Web Part properties, click on the Edit button In this panel, you can add each filter you'd like to provide to your users and select a template to use for displaying it. See the PnP Filters Web Part documentation for the specifics. In this example, we're setting up filters for Created and Created By . Note we are using appropriate templates based on the type of data in each Managed Property. Save your page, and your users will now be able to filter their search results based on the filters you have chosen.","title":"Set up the filters"},{"location":"scenarios/search-verticals-with-parameter/","text":"Search verticals with query string parameter \u00b6 Note The PnP Modern Search Web Parts must be deployed to your App Catalog and activated on your site. See the installation documentation for details. This scenario describes how you can use query string parameters in search verticals and how you can directly open a vertical with the query string parameter from a url. Create a new SharePoint page \u00b6 Create a new search page and connect the results webpart with the verticals webpart. Configure search verticals \u00b6 Configure the search verticals of your choice with not too long and a useful, clear, \"Tab value\". I like the icons for an better visual experience for the users. Configure query string paramter \u00b6 By default you have a \"v\" as search query parameter. I like a specific, more meaningful, parameter like \"tab\". Open verticals with query parameters \u00b6 After the configuration you can add the query string parameter to the url and open the specific search vertical direct from a link in page content or from the SharePoint navigation. Sample URL with query string parameter https:// .sharepoint.com/sites/ /SitePages/>SEARCH-PAGE>.aspx?Tab=Sites","title":"Search verticals with query string parameter"},{"location":"scenarios/search-verticals-with-parameter/#search-verticals-with-query-string-parameter","text":"Note The PnP Modern Search Web Parts must be deployed to your App Catalog and activated on your site. See the installation documentation for details. This scenario describes how you can use query string parameters in search verticals and how you can directly open a vertical with the query string parameter from a url.","title":"Search verticals with query string parameter"},{"location":"scenarios/search-verticals-with-parameter/#create-a-new-sharepoint-page","text":"Create a new search page and connect the results webpart with the verticals webpart.","title":"Create a new SharePoint page"},{"location":"scenarios/search-verticals-with-parameter/#configure-search-verticals","text":"Configure the search verticals of your choice with not too long and a useful, clear, \"Tab value\". I like the icons for an better visual experience for the users.","title":"Configure search verticals"},{"location":"scenarios/search-verticals-with-parameter/#configure-query-string-paramter","text":"By default you have a \"v\" as search query parameter. I like a specific, more meaningful, parameter like \"tab\".","title":"Configure query string paramter"},{"location":"scenarios/search-verticals-with-parameter/#open-verticals-with-query-parameters","text":"After the configuration you can add the query string parameter to the url and open the specific search vertical direct from a link in page content or from the SharePoint navigation. Sample URL with query string parameter https:// .sharepoint.com/sites/ /SitePages/>SEARCH-PAGE>.aspx?Tab=Sites","title":"Open verticals with query parameters"},{"location":"scenarios/set-up-managed-properties/","text":"Scenario 2: Set up Managed Properties \u00b6 Note The PnP Modern Search Web Parts must be deployed to your App Catalog and activated on your site. See the installation documentation for details. If you've followed Scenario 1: Create a simple search page , you already have a functioning search experience. One of the big benefits of the PnP Modern Search Web Parts is the ability to add filters, also known as refiners. Set up list/library columns and Managed Properties \u00b6 When creating a list column named Foo , this will yield a crawled property of ows_Foo when an item is indexed. In turn the crawled property ows_Foo can be mapped to e.g. the managed property RefinableString10 , and used in search results or as a filter property. Set up Site Columns and Managed Properties \u00b6 Note Read the article How Do Site Columns Become Managed Properties - Thus Available for Search to learn about how to set up your Managed Metadata Site Columns for use in search experiences. At this point, you've set up Managed Properties you can use as you display results in the PnP Search Results Web Part as well as in your PnP Filters Web Part.","title":"Scenario 2: Set up Managed Properties"},{"location":"scenarios/set-up-managed-properties/#scenario-2-set-up-managed-properties","text":"Note The PnP Modern Search Web Parts must be deployed to your App Catalog and activated on your site. See the installation documentation for details. If you've followed Scenario 1: Create a simple search page , you already have a functioning search experience. One of the big benefits of the PnP Modern Search Web Parts is the ability to add filters, also known as refiners.","title":"Scenario 2: Set up Managed Properties"},{"location":"scenarios/set-up-managed-properties/#set-up-listlibrary-columns-and-managed-properties","text":"When creating a list column named Foo , this will yield a crawled property of ows_Foo when an item is indexed. In turn the crawled property ows_Foo can be mapped to e.g. the managed property RefinableString10 , and used in search results or as a filter property.","title":"Set up list/library columns and Managed Properties"},{"location":"scenarios/set-up-managed-properties/#set-up-site-columns-and-managed-properties","text":"Note Read the article How Do Site Columns Become Managed Properties - Thus Available for Search to learn about how to set up your Managed Metadata Site Columns for use in search experiences. At this point, you've set up Managed Properties you can use as you display results in the PnP Search Results Web Part as well as in your PnP Filters Web Part.","title":"Set up Site Columns and Managed Properties"},{"location":"scenarios/use-query-string-in-url/","text":"Use query string from url for dynamic results \u00b6 Note The PnP Modern Search Web Parts must be deployed to your App Catalog and activated on your site. See the installation documentation for details. This scenario describes how to use query string as value in the URL from the current page. You can use URL query string parameters to build dynamic search pages. Use a library with metadata that you can use the query string parameter in the URL. The value in the query string need to match with the metadata in the library. Create a new SharePoint page \u00b6 To add the Search Web Parts, you must first create a new modern SharePoint page. We will be configure this new page as a search page with the PnP Modern Search Web Parts. Add PnP Search Web Parts \u00b6 On the newly created page, add an SharePoint Quick links Web Part and one PnP Modern Search Web Part - Search Results. The Web Parts can be arranged and configured on the page as desired. Configure Search Results \u00b6 Use the SharePoint Search as source and configure a query template. In this case i will show only documents from one library with metadata in the search results. Choose the existing default result source LocalSharePointResults. Layout configuration \u00b6 You can use the default configuration. User Query String from URL \u00b6 There are two options available to use the Query String parameter from the URL. You only need one of the options. Option 1 \u00b6 Configure Web Part Connections \u00b6 Activate the \"use input query text\" connection in the existing Results Web Part. Configure \"Page environment\" as source, \"Query string\" as page environment property, \"Query parameters\" as query string property. You will miss the \"Event\" Query String from the URL on this time. Add your query string to the URL manually and your query string is available in the configuration. Use the query string \"Event\" in the queryParameters properties drop down in the Web Part configuration. As example: * Full URL: https://[TENANT]/sites/[SITEURL]/SitePages/[PAGE].aspx?Event=Teams Nation&Mode=Edit * Query String: Event= * Value: Teams Nation Option 2 \u00b6 Query String in Query template \u00b6 In Option two you can use Query template to \"read\" the Query string parameter direct from the URL. You don't need a configured web part connection as in option one. Add links with query string \u00b6 After the Web Part configuration create quick links in the existing SharePoint Quicklinks Web Part and use links with the query string in the URL. Solution \u00b6 After the links are created and saved, we are ready to test the scenario. With a click (1) the URL is passed with the parameter (2) and the PnP Modern Search Results Web Part, with the connection, will read the query string value a show only documents with a matching (3).","title":"Use query string from url for dynamic results"},{"location":"scenarios/use-query-string-in-url/#use-query-string-from-url-for-dynamic-results","text":"Note The PnP Modern Search Web Parts must be deployed to your App Catalog and activated on your site. See the installation documentation for details. This scenario describes how to use query string as value in the URL from the current page. You can use URL query string parameters to build dynamic search pages. Use a library with metadata that you can use the query string parameter in the URL. The value in the query string need to match with the metadata in the library.","title":"Use query string from url for dynamic results"},{"location":"scenarios/use-query-string-in-url/#create-a-new-sharepoint-page","text":"To add the Search Web Parts, you must first create a new modern SharePoint page. We will be configure this new page as a search page with the PnP Modern Search Web Parts.","title":"Create a new SharePoint page"},{"location":"scenarios/use-query-string-in-url/#add-pnp-search-web-parts","text":"On the newly created page, add an SharePoint Quick links Web Part and one PnP Modern Search Web Part - Search Results. The Web Parts can be arranged and configured on the page as desired.","title":"Add PnP Search Web Parts"},{"location":"scenarios/use-query-string-in-url/#configure-search-results","text":"Use the SharePoint Search as source and configure a query template. In this case i will show only documents from one library with metadata in the search results. Choose the existing default result source LocalSharePointResults.","title":"Configure Search Results"},{"location":"scenarios/use-query-string-in-url/#layout-configuration","text":"You can use the default configuration.","title":"Layout configuration"},{"location":"scenarios/use-query-string-in-url/#user-query-string-from-url","text":"There are two options available to use the Query String parameter from the URL. You only need one of the options.","title":"User Query String from URL"},{"location":"scenarios/use-query-string-in-url/#option-1","text":"","title":"Option 1"},{"location":"scenarios/use-query-string-in-url/#configure-web-part-connections","text":"Activate the \"use input query text\" connection in the existing Results Web Part. Configure \"Page environment\" as source, \"Query string\" as page environment property, \"Query parameters\" as query string property. You will miss the \"Event\" Query String from the URL on this time. Add your query string to the URL manually and your query string is available in the configuration. Use the query string \"Event\" in the queryParameters properties drop down in the Web Part configuration. As example: * Full URL: https://[TENANT]/sites/[SITEURL]/SitePages/[PAGE].aspx?Event=Teams Nation&Mode=Edit * Query String: Event= * Value: Teams Nation","title":"Configure Web Part Connections"},{"location":"scenarios/use-query-string-in-url/#option-2","text":"","title":"Option 2"},{"location":"scenarios/use-query-string-in-url/#query-string-in-query-template","text":"In Option two you can use Query template to \"read\" the Query string parameter direct from the URL. You don't need a configured web part connection as in option one.","title":"Query String in Query template"},{"location":"scenarios/use-query-string-in-url/#add-links-with-query-string","text":"After the Web Part configuration create quick links in the existing SharePoint Quicklinks Web Part and use links with the query string in the URL.","title":"Add links with query string"},{"location":"scenarios/use-query-string-in-url/#solution","text":"After the links are created and saved, we are ready to test the scenario. With a click (1) the URL is passed with the parameter (2) and the PnP Modern Search Results Web Part, with the connection, will read the query string value a show only documents with a matching (3).","title":"Solution"},{"location":"scenarios/use-search-as-a-department-webpart/","text":"Using the PnP Modern Search Results web part as a Department Web Part \u00b6 Note The PnP Modern Search Web Parts must be deployed to your App Catalog and activated on your site. See the installation documentation for details. Occasionally we get the request to display the members of a department on a modern SharePoint web page. Using the People Web part is out of the question as this web part only shows a static list of people, and we want the listing to show the members of the Department at any given time. This scenario describes how to use the PnP Modern Search Results web part as a Department Web Part. It's a basic configuration for a useful Department web part, and you can change the many options to make it suit your needs. You can even customize the Layout template. Find the unique ID for the department \u00b6 The list of departments is store in the Term Store so locate the department you want to show, and note the Unique identifier. Create a new SharePoint page \u00b6 To add the Search Web Parts, you must first create a new modern SharePoint page. We will be configure this new page as a search page with the PnP Modern Search Web Parts. Add PnP Search Results Web Part \u00b6 On the newly created page, add the PnP Modern Search Results Web Part. Configure Search Results \u00b6 Use the SharePoint Search as source. Change the Result Source Id/Scope|Name to LocalPeopleResults In the Query template you enter owstaxIdSPShDepartment:\"THE_ID_FROM_THE_TERMSTORE\" . If you feel very brave you can use a query like Department=Marketing . The result will be the same....for now. Down the road the department will most likely change name a number of times, and each time you will have to update the query. When using the unique ID we don't have do anything. Layout configuration \u00b6 There is a predefined people layout available for the people search. Use People as Search Results layout. In the section Layout options you can manage the people fields, that will be showing in the results. If you would like to show a people hover card, then activate this option, but you need to activate API access for Microsoft Graph in your SharePoint admin center. Select a component size for your results. Update the Web part title to a value of your chosing , like \"Marketing\", and you are done. Solution \u00b6 After the configuration you have a useful Department web part incl. Hover card.","title":"Using the PnP Modern Search Results web part as a Department Web Part"},{"location":"scenarios/use-search-as-a-department-webpart/#using-the-pnp-modern-search-results-web-part-as-a-department-web-part","text":"Note The PnP Modern Search Web Parts must be deployed to your App Catalog and activated on your site. See the installation documentation for details. Occasionally we get the request to display the members of a department on a modern SharePoint web page. Using the People Web part is out of the question as this web part only shows a static list of people, and we want the listing to show the members of the Department at any given time. This scenario describes how to use the PnP Modern Search Results web part as a Department Web Part. It's a basic configuration for a useful Department web part, and you can change the many options to make it suit your needs. You can even customize the Layout template.","title":"Using the PnP Modern Search Results web part as a Department Web Part"},{"location":"scenarios/use-search-as-a-department-webpart/#find-the-unique-id-for-the-department","text":"The list of departments is store in the Term Store so locate the department you want to show, and note the Unique identifier.","title":"Find the unique ID for the department"},{"location":"scenarios/use-search-as-a-department-webpart/#create-a-new-sharepoint-page","text":"To add the Search Web Parts, you must first create a new modern SharePoint page. We will be configure this new page as a search page with the PnP Modern Search Web Parts.","title":"Create a new SharePoint page"},{"location":"scenarios/use-search-as-a-department-webpart/#add-pnp-search-results-web-part","text":"On the newly created page, add the PnP Modern Search Results Web Part.","title":"Add PnP Search Results Web Part"},{"location":"scenarios/use-search-as-a-department-webpart/#configure-search-results","text":"Use the SharePoint Search as source. Change the Result Source Id/Scope|Name to LocalPeopleResults In the Query template you enter owstaxIdSPShDepartment:\"THE_ID_FROM_THE_TERMSTORE\" . If you feel very brave you can use a query like Department=Marketing . The result will be the same....for now. Down the road the department will most likely change name a number of times, and each time you will have to update the query. When using the unique ID we don't have do anything.","title":"Configure Search Results"},{"location":"scenarios/use-search-as-a-department-webpart/#layout-configuration","text":"There is a predefined people layout available for the people search. Use People as Search Results layout. In the section Layout options you can manage the people fields, that will be showing in the results. If you would like to show a people hover card, then activate this option, but you need to activate API access for Microsoft Graph in your SharePoint admin center. Select a component size for your results. Update the Web part title to a value of your chosing , like \"Marketing\", and you are done.","title":"Layout configuration"},{"location":"scenarios/use-search-as-a-department-webpart/#solution","text":"After the configuration you have a useful Department web part incl. Hover card.","title":"Solution"},{"location":"scenarios/assets/search-verticals-with-parameter/readme/","text":"","title":"Readme"},{"location":"scenarios/includes/deployment-note/","text":"Note The PnP Modern Search Web Parts must be deployed to your App Catalog and activated on your site. See the installation documentation for details.","title":"Deployment note"},{"location":"usage/search-box/","text":"Search box Web Part \u00b6 The 'Search box' Web Part allows users to enter free text search queries connected to a 'Search Results' Web Part. Configuration \u00b6 Search box settings \u00b6 Setting Description Default value Placeholder text The placeholder text to display in the search box. \"Enter your search terms...\" Query input transformation template Query that will be sent to the page as URL fragment ( # ) Search box keyword entered by the user. Send the query to a new page Sends the search query text to a new page. From here you can select the page URL, the open behavior and send method (URL fragment '#' or a query string parameter). The input value can be transformed before sending it to another page. {inputQueryText} is replaced with the value from the search box and other tokens are also supported. False. Reset query on clear Sends new search query request when clear search query from search box. False. Query suggestions \u00b6 The query suggestions allows users to easily find relevant query keywords based on their entry: Setting Description Default value Enable query suggestions Enable or disable query suggestions. False. Configure available providers Enable or disable the suggestions providers available for this Web Part. By default, only the \"SharePoint Static search suggestions\" is available (disabled by default). To add values for this provider, refer to the following documentation (caution: it can take up to 24h for changes to take effect). Multiple providers can be enabled at once. Number of suggestions to show per group The number of suggestions to show per group. 10. Connections \u00b6 Optionally, you can set a default query text coming from an other dynamic data source on the page. For instance, connect the search box to a page environment variable like a query string parameter. The value retrieved from a connected data source will be displayed automatically at page load in the text box if present and broadcasted to any other Web Parts connected to the search box Web Part (ex: a 'Search Results' Web Part) resulting to a cascading effect.","title":"Usage"},{"location":"usage/search-box/#search-box-web-part","text":"The 'Search box' Web Part allows users to enter free text search queries connected to a 'Search Results' Web Part.","title":"Search box Web Part"},{"location":"usage/search-box/#configuration","text":"","title":"Configuration"},{"location":"usage/search-box/#search-box-settings","text":"Setting Description Default value Placeholder text The placeholder text to display in the search box. \"Enter your search terms...\" Query input transformation template Query that will be sent to the page as URL fragment ( # ) Search box keyword entered by the user. Send the query to a new page Sends the search query text to a new page. From here you can select the page URL, the open behavior and send method (URL fragment '#' or a query string parameter). The input value can be transformed before sending it to another page. {inputQueryText} is replaced with the value from the search box and other tokens are also supported. False. Reset query on clear Sends new search query request when clear search query from search box. False.","title":"Search box settings"},{"location":"usage/search-box/#query-suggestions","text":"The query suggestions allows users to easily find relevant query keywords based on their entry: Setting Description Default value Enable query suggestions Enable or disable query suggestions. False. Configure available providers Enable or disable the suggestions providers available for this Web Part. By default, only the \"SharePoint Static search suggestions\" is available (disabled by default). To add values for this provider, refer to the following documentation (caution: it can take up to 24h for changes to take effect). Multiple providers can be enabled at once. Number of suggestions to show per group The number of suggestions to show per group. 10.","title":"Query suggestions"},{"location":"usage/search-box/#connections","text":"Optionally, you can set a default query text coming from an other dynamic data source on the page. For instance, connect the search box to a page environment variable like a query string parameter. The value retrieved from a connected data source will be displayed automatically at page load in the text box if present and broadcasted to any other Web Parts connected to the search box Web Part (ex: a 'Search Results' Web Part) resulting to a cascading effect.","title":"Connections"},{"location":"usage/search-filters/","text":"Search Filters Web Part \u00b6 The 'Filters' Web Part allows to filter the current results displayed in a 'Search Results' Web Part. This component is higly configurable to meet you requirements and it works for all data sources. Configuration \u00b6 Connection \u00b6 To use the filters, we must first connect it to one or multiple 'Search Results' Web Parts. In the other hand, you must connect back those Web Parts to the 'Filters' one. It is a two-ways connection . If you connect more than one Web Part, the filter values and counts will be merged for similar filter names: Example Data sources #1 and #1 expose respectively a 'FileType' filter with values and counts value1:1 , value2:1 for #1 and value2:1 , value4:1 for #2 and both are connected to the filters Web Part. In this case, a single 'FileType' filter name will be displayed (because the filter name is the same) with values value1:1 , value2:2 , value3:1 , value4:1 . If you select a value that is not present in a data source (ex: value1 for data source #2), you will simply get zero result. Filter settings \u00b6 The filter settings are as follow: Setting Description Display Name A friendly name for the filter Filter field The internal data source field to use as filter. Here you can select a field from the current data source (if data have been already retrieved) of type your own custom value (press enter to validate). # of values The maximum number of values to be retrieved for a given filter. This value is useful if you use SharePoint refiners with a lot of refiner values. By default SharePoint will only retreve the first 100 values. To get all refiner values, you must specify an higher number manually (maximum value is 1000). Template The template to use to display filter values. The builtin templates are: Check box Date range Date interval Combo You can search a value directly in the list by typing keywords in the combo text field. People Template Expand by default If applicable for the selected template, display values as expanded. Show count If applicable for the selected template, display counts for values. Mutli values If applicable for the selected template, allow selection of multiple values. Operator between values If multi values is selected, the operator to use between values (OR/AND). Sort values by Sort values by name or by count. Sort direction Sort values in ascending/descending order. Operator between filters \u00b6 You can select the operator to use between filters (OR or AND). Filter types: 'Static' filter versus 'Refiner' filter \u00b6 The Web Part supports two types of filters ( 'Static' and 'Refiner' ). However, there are some differences that are important to understand between these two if you want to use them properly: Refiner : a 'Refiner' filter means the filter gets its values from the data source and sends back the selected ones the data source. If the data source has no result, there won't be any refiner values, simple as that. Static filter : a 'Static' filter means the filter doesn't care about filter values sent by the data source and provides its own arbitrary values regardless of input values. A date range picker (or any picker) are good examples of what an 'Static' filter is. Such a filter do not need necessarily need a Search Results connection. Use indexed property bag properties with taxonomy values \u00b6 This behavior only works with the SharePoint Search Data source and the Enabled localization flag activated. Using an indexed property bag value could be useful to store information about a SharePoint site or other element that can't be tagged with a taxonomy value directly. The PnP Modern Search solution supports property bag properties values that use the following taxonomy value format to be able to filter on them (ex: a taxonomy multi values separated by a semicolon (;)): L0|#a2cf1afb-44b6-4cf4-bf37-642bb2e9bff3|Category 1;L0|#02e3406c0-1048-4bce-90eb-e7a51dfa7f31|Category3;L0|#07e094327-23d7-48af-9699-781eb26dc40f|Category2 These taxonomy values can then be used in the Filters Web Part using a RefinableStringXX search managed property to filter specific sites or elements. As an example, you can refer to the \"Create an end-to-end Office 365 groups provisioning solution\" tutorial GitHub project to leverage this format. Filter deep linking \u00b6 The Search Filter Web Part supports deep linking, meaning you can preselect filters from the URL at page load. When filter values are selected, a query string parameter f is append to the current URL containing the current filter values data. If you have connected the search result web part to a search box, ensure the search term is set to be dynamic and part of the URL in the search box web part. If not, copying the URL will not contain the search terms.\" Important We recommend to use the URL generated from filter values selection instead of crafting the URL manually.","title":"Usage"},{"location":"usage/search-filters/#search-filters-web-part","text":"The 'Filters' Web Part allows to filter the current results displayed in a 'Search Results' Web Part. This component is higly configurable to meet you requirements and it works for all data sources.","title":"Search Filters Web Part"},{"location":"usage/search-filters/#configuration","text":"","title":"Configuration"},{"location":"usage/search-filters/#connection","text":"To use the filters, we must first connect it to one or multiple 'Search Results' Web Parts. In the other hand, you must connect back those Web Parts to the 'Filters' one. It is a two-ways connection . If you connect more than one Web Part, the filter values and counts will be merged for similar filter names: Example Data sources #1 and #1 expose respectively a 'FileType' filter with values and counts value1:1 , value2:1 for #1 and value2:1 , value4:1 for #2 and both are connected to the filters Web Part. In this case, a single 'FileType' filter name will be displayed (because the filter name is the same) with values value1:1 , value2:2 , value3:1 , value4:1 . If you select a value that is not present in a data source (ex: value1 for data source #2), you will simply get zero result.","title":"Connection"},{"location":"usage/search-filters/#filter-settings","text":"The filter settings are as follow: Setting Description Display Name A friendly name for the filter Filter field The internal data source field to use as filter. Here you can select a field from the current data source (if data have been already retrieved) of type your own custom value (press enter to validate). # of values The maximum number of values to be retrieved for a given filter. This value is useful if you use SharePoint refiners with a lot of refiner values. By default SharePoint will only retreve the first 100 values. To get all refiner values, you must specify an higher number manually (maximum value is 1000). Template The template to use to display filter values. The builtin templates are: Check box Date range Date interval Combo You can search a value directly in the list by typing keywords in the combo text field. People Template Expand by default If applicable for the selected template, display values as expanded. Show count If applicable for the selected template, display counts for values. Mutli values If applicable for the selected template, allow selection of multiple values. Operator between values If multi values is selected, the operator to use between values (OR/AND). Sort values by Sort values by name or by count. Sort direction Sort values in ascending/descending order.","title":"Filter settings"},{"location":"usage/search-filters/#operator-between-filters","text":"You can select the operator to use between filters (OR or AND).","title":"Operator between filters"},{"location":"usage/search-filters/#filter-types-static-filter-versus-refiner-filter","text":"The Web Part supports two types of filters ( 'Static' and 'Refiner' ). However, there are some differences that are important to understand between these two if you want to use them properly: Refiner : a 'Refiner' filter means the filter gets its values from the data source and sends back the selected ones the data source. If the data source has no result, there won't be any refiner values, simple as that. Static filter : a 'Static' filter means the filter doesn't care about filter values sent by the data source and provides its own arbitrary values regardless of input values. A date range picker (or any picker) are good examples of what an 'Static' filter is. Such a filter do not need necessarily need a Search Results connection.","title":"Filter types: 'Static' filter versus 'Refiner' filter"},{"location":"usage/search-filters/#use-indexed-property-bag-properties-with-taxonomy-values","text":"This behavior only works with the SharePoint Search Data source and the Enabled localization flag activated. Using an indexed property bag value could be useful to store information about a SharePoint site or other element that can't be tagged with a taxonomy value directly. The PnP Modern Search solution supports property bag properties values that use the following taxonomy value format to be able to filter on them (ex: a taxonomy multi values separated by a semicolon (;)): L0|#a2cf1afb-44b6-4cf4-bf37-642bb2e9bff3|Category 1;L0|#02e3406c0-1048-4bce-90eb-e7a51dfa7f31|Category3;L0|#07e094327-23d7-48af-9699-781eb26dc40f|Category2 These taxonomy values can then be used in the Filters Web Part using a RefinableStringXX search managed property to filter specific sites or elements. As an example, you can refer to the \"Create an end-to-end Office 365 groups provisioning solution\" tutorial GitHub project to leverage this format.","title":"Use indexed property bag properties with taxonomy values"},{"location":"usage/search-filters/#filter-deep-linking","text":"The Search Filter Web Part supports deep linking, meaning you can preselect filters from the URL at page load. When filter values are selected, a query string parameter f is append to the current URL containing the current filter values data. If you have connected the search result web part to a search box, ensure the search term is set to be dynamic and part of the URL in the search box web part. If not, copying the URL will not contain the search terms.\" Important We recommend to use the URL generated from filter values selection instead of crafting the URL manually.","title":"Filter deep linking"},{"location":"usage/search-filters/layouts/","text":"Builtin layouts \u00b6 By default, the following layouts are provided: Vertical \u00b6 Display filters as a vertical bar: Horizontal \u00b6 Display filters as an horizontal bar. For instance, it fits nicely with 'Combo' filter templates. Layout options \u00b6 Setting Description Default value Preferred number of cards per row Specify the preferred number of filters to display per row when the required width space is available . The Web Part will always adjust the number of possible filters to display depending the available width. It means that if you set this value to '3' but you display the Web Part in small column, only 1 filter will be displayed. 3. Panel \u00b6 Display filters as an side panel. Useful to gain space on the page. Layout options \u00b6 Setting Description Default value Button label to display The label to display to open the panel. \"Show filters\". Panel header text The label to display to in the panel header. \"Filters\". Modal If enabled, the panel will be modal (you can't select elemtns outside the panel). True. Light dismiss If enabled, dismiss the panel when click outside. True. Panel size The filter panel size to display. Small (right). Debug \u00b6 The 'debug' layout allows you to see all relevant data used by filter templates during render. The template context object exposes the following properties: { \"filters\" : \"<Current filters to display in the UI (selected/unseslected)>\" , \"selectedFilters\" : \"<The current submitted filters>\" , \"instanceId\" : \"<The Web Part instance ID>\" , \"theme\" : \"<Current theme variables>\" , \"strings\" : \"<Localized strings that can be used in the Web Part>\" , \"selectedOnce\" : \"<Flag indicating if a filter value has been selected at least once by the use>\" , \"properties\" : \"<The filter Web Part properties>\" } Custom \u00b6 The 'custom' layout is the minimal layout to start with if you want to create your own customized UI from scratch. You can also start from an existing layout. Updating a builtin layout (ex: 'Horizontal', 'Vertical', etc.) will automatically switch the selected layout to 'Custom' with your modifications as content. All previous custom layout content will be overwritten . You have also the ability to use an external .html file to centralize your customizations. This file must be stored in an accessible location for uses (ex: a SharePoint document library with 'Read' permissions for concerned users). Unless you specify an external file, the template content is stored in the Web Part property bag. Updating the layout HTML template is a good option for minor UI updates (Ex: add a link, update colors, etc.). For more control over the UI, you may want to use the extensibility library feature.","title":"Layouts"},{"location":"usage/search-filters/layouts/#builtin-layouts","text":"By default, the following layouts are provided:","title":"Builtin layouts"},{"location":"usage/search-filters/layouts/#vertical","text":"Display filters as a vertical bar:","title":"Vertical"},{"location":"usage/search-filters/layouts/#horizontal","text":"Display filters as an horizontal bar. For instance, it fits nicely with 'Combo' filter templates.","title":"Horizontal"},{"location":"usage/search-filters/layouts/#layout-options","text":"Setting Description Default value Preferred number of cards per row Specify the preferred number of filters to display per row when the required width space is available . The Web Part will always adjust the number of possible filters to display depending the available width. It means that if you set this value to '3' but you display the Web Part in small column, only 1 filter will be displayed. 3.","title":"Layout options"},{"location":"usage/search-filters/layouts/#panel","text":"Display filters as an side panel. Useful to gain space on the page.","title":"Panel"},{"location":"usage/search-filters/layouts/#layout-options_1","text":"Setting Description Default value Button label to display The label to display to open the panel. \"Show filters\". Panel header text The label to display to in the panel header. \"Filters\". Modal If enabled, the panel will be modal (you can't select elemtns outside the panel). True. Light dismiss If enabled, dismiss the panel when click outside. True. Panel size The filter panel size to display. Small (right).","title":"Layout options"},{"location":"usage/search-filters/layouts/#debug","text":"The 'debug' layout allows you to see all relevant data used by filter templates during render. The template context object exposes the following properties: { \"filters\" : \"<Current filters to display in the UI (selected/unseslected)>\" , \"selectedFilters\" : \"<The current submitted filters>\" , \"instanceId\" : \"<The Web Part instance ID>\" , \"theme\" : \"<Current theme variables>\" , \"strings\" : \"<Localized strings that can be used in the Web Part>\" , \"selectedOnce\" : \"<Flag indicating if a filter value has been selected at least once by the use>\" , \"properties\" : \"<The filter Web Part properties>\" }","title":"Debug"},{"location":"usage/search-filters/layouts/#custom","text":"The 'custom' layout is the minimal layout to start with if you want to create your own customized UI from scratch. You can also start from an existing layout. Updating a builtin layout (ex: 'Horizontal', 'Vertical', etc.) will automatically switch the selected layout to 'Custom' with your modifications as content. All previous custom layout content will be overwritten . You have also the ability to use an external .html file to centralize your customizations. This file must be stored in an accessible location for uses (ex: a SharePoint document library with 'Read' permissions for concerned users). Unless you specify an external file, the template content is stored in the Web Part property bag. Updating the layout HTML template is a good option for minor UI updates (Ex: add a link, update colors, etc.). For more control over the UI, you may want to use the extensibility library feature.","title":"Custom"},{"location":"usage/search-filters/layouts/custom/","text":"The 'custom' layout is the minimal layout to start with if you want to create your own customized UI from scratch. You can also start from an existing layout. Updating a builtin layout (ex: 'Horizontal', 'Vertical', etc.) will automatically switch the selected layout to 'Custom' with your modifications as content. All previous custom layout content will be overwritten . You have also the ability to use an external .html file to centralize your customizations. This file must be stored in an accessible location for uses (ex: a SharePoint document library with 'Read' permissions for concerned users). Unless you specify an external file, the template content is stored in the Web Part property bag. Updating the layout HTML template is a good option for minor UI updates (Ex: add a link, update colors, etc.). For more control over the UI, you may want to use the extensibility library feature.","title":"Custom"},{"location":"usage/search-filters/layouts/debug/","text":"The 'debug' layout allows you to see all relevant data used by filter templates during render. The template context object exposes the following properties: { \"filters\" : \"<Current filters to display in the UI (selected/unseslected)>\" , \"selectedFilters\" : \"<The current submitted filters>\" , \"instanceId\" : \"<The Web Part instance ID>\" , \"theme\" : \"<Current theme variables>\" , \"strings\" : \"<Localized strings that can be used in the Web Part>\" , \"selectedOnce\" : \"<Flag indicating if a filter value has been selected at least once by the use>\" , \"properties\" : \"<The filter Web Part properties>\" }","title":"Debug"},{"location":"usage/search-filters/layouts/horizontal/","text":"Display filters as an horizontal bar. For instance, it fits nicely with 'Combo' filter templates. Layout options \u00b6 Setting Description Default value Preferred number of cards per row Specify the preferred number of filters to display per row when the required width space is available . The Web Part will always adjust the number of possible filters to display depending the available width. It means that if you set this value to '3' but you display the Web Part in small column, only 1 filter will be displayed. 3.","title":"Horizontal"},{"location":"usage/search-filters/layouts/horizontal/#layout-options","text":"Setting Description Default value Preferred number of cards per row Specify the preferred number of filters to display per row when the required width space is available . The Web Part will always adjust the number of possible filters to display depending the available width. It means that if you set this value to '3' but you display the Web Part in small column, only 1 filter will be displayed. 3.","title":"Layout options"},{"location":"usage/search-filters/layouts/panel/","text":"Display filters as an side panel. Useful to gain space on the page. Layout options \u00b6 Setting Description Default value Button label to display The label to display to open the panel. \"Show filters\". Panel header text The label to display to in the panel header. \"Filters\". Modal If enabled, the panel will be modal (you can't select elemtns outside the panel). True. Light dismiss If enabled, dismiss the panel when click outside. True. Panel size The filter panel size to display. Small (right).","title":"Panel"},{"location":"usage/search-filters/layouts/panel/#layout-options","text":"Setting Description Default value Button label to display The label to display to open the panel. \"Show filters\". Panel header text The label to display to in the panel header. \"Filters\". Modal If enabled, the panel will be modal (you can't select elemtns outside the panel). True. Light dismiss If enabled, dismiss the panel when click outside. True. Panel size The filter panel size to display. Small (right).","title":"Layout options"},{"location":"usage/search-filters/layouts/vertical/","text":"Display filters as a vertical bar:","title":"Vertical"},{"location":"usage/search-results/","text":"Search Results Web Part \u00b6 The 'Search Results' Web Part is the fundamental building block of whole global solution. Its purpose is basically to get data from a specifc source and render them in a specific native or custom layout based on Handlebars and web components. This Web Part can be used alone or connected to other Web Parts to add dyanmic interactions (filters, search box or verticals). To use the Web Part on a SharePoint page: Edit your SharePoint modern page. Search for the 'PnP - Search Results' Web Part and add it to your page. You may use \"PnP - Search Rollup\" instead if you don't need to connect web parts. This version support being lazy loaded in the SharePoint framework to optimize page loading. Configuration \u00b6 The search results Web Part configuration is divided into four parts each corresponding to a property pane page: Data source : From where to retrieve the data. Includes the slots configuration and tokens usage . Layouts : How to render them. Connections : How the Web Part will be connected to others in the page. Extensibility : How the Web Part will be connected to others in the page.","title":"Usage"},{"location":"usage/search-results/#search-results-web-part","text":"The 'Search Results' Web Part is the fundamental building block of whole global solution. Its purpose is basically to get data from a specifc source and render them in a specific native or custom layout based on Handlebars and web components. This Web Part can be used alone or connected to other Web Parts to add dyanmic interactions (filters, search box or verticals). To use the Web Part on a SharePoint page: Edit your SharePoint modern page. Search for the 'PnP - Search Results' Web Part and add it to your page. You may use \"PnP - Search Rollup\" instead if you don't need to connect web parts. This version support being lazy loaded in the SharePoint framework to optimize page loading.","title":"Search Results Web Part"},{"location":"usage/search-results/#configuration","text":"The search results Web Part configuration is divided into four parts each corresponding to a property pane page: Data source : From where to retrieve the data. Includes the slots configuration and tokens usage . Layouts : How to render them. Connections : How the Web Part will be connected to others in the page. Extensibility : How the Web Part will be connected to others in the page.","title":"Configuration"},{"location":"usage/search-results/slots/","text":"The 'slots' are a very important part of this solution and their use becomes very handy when it comes to create your own layouts. The slots feature is available for all data sources, including builtin and custom ones. What is a 'slot'? \u00b6 A slot is a mapping between a data source specific field and a placeholder variable used in layout templates. To illustrate this concept, here are a single card from the 'Cards' layout. You can see how slots apply to the UI: Slot definitions will be replaced dynamically by the underlying field values you specified in the mappings list. In the end, from a template perspective, an URL is an URL regardless of the source. Slots are used individually depending of the requirements of the chosen layout. Why I would need them? \u00b6 They allow you to get your data source (custom or builtin) work with all templates without the need of refactoring them and to adapt your data source specific fields. Basically, it is a convenient, time saving feature making your templates reusable . Builtin slots \u00b6 Here are all the builtin slots the solution provides. Data sources may or may not define all these slots depending the nature of the source. Slot name Description Title Typically the title of an item in results. Path The absolute URL of an item. Summary A short description of the item. Date A date associated to the item. Can be for instance, the created date, modified date or publishing date. FileType The file type. This can be an extension (ex: docx ) or the complete path of the item including the file extension (ex: https://mycompany.sharepoint.com/sites/mysite/Shared Documents/MyFile.pdf ). This slot is mainly used to retrieve the correct file icon for the item. PreviewImageUrl The image thumbnail URL to display for an item. You can use the builtin AutoPreviewImageUrl field here to get a default image if applicable. PreviewUrl Same as preview image URL but for the interactive preview of the item (ex: a Word document). You can use the builtin AutoPreviewUrl field here to get a default image if applicable. In this case, the Web Part will use a generic Microsoft Graph URL to generate the preview. More information on supported file types . Author An author associated to the item. Tags Tags associated to the item. Can be for instance taxonomy terms. SiteId The SharePoint site ID associated to the item. With ListId and ItemId this value is used to generate the preview URL. ListId The SharePoint site ID associated to the item. With SiteId and ItemId this value is used to generate the preview URL. ItemId The SharePoint site ID associated to the item. With ListId and SiteId this value is used to generate the preview URL. IsFolder Indicate if the current item is a folder. The value here should be a true/false value or 0/1. PersonQuery Used for the people layout to get information about the current user dynamically. More info here . UserDisplayName Used by the people layout to display the user name. UserEmail Used by the people layout to display the user email. A slot can be empty. Define your custom slots \u00b6 In addition to builtin ones, you can add your own slots and use them in layouts. To do so, first add your slot in the list. The slot name is any name you want to use, and the slot field is a managed property name from the selected properties list configured in the web part. Meaning, if you want to use RefinableString100 as a slot, you need to add it to the selected properties list first. And then use it in your templates using the following Handlebars expression: {{slot item @root.slots.<SlotName>}} slot : The Handlebars helper name. item : The current item containing the field value. @root.slots.<SlotName> : The corresponding slot mapping name (ex. @root.slots.Path to the URL). The slot value will be processed a string in your template.","title":"Slots"},{"location":"usage/search-results/slots/#what-is-a-slot","text":"A slot is a mapping between a data source specific field and a placeholder variable used in layout templates. To illustrate this concept, here are a single card from the 'Cards' layout. You can see how slots apply to the UI: Slot definitions will be replaced dynamically by the underlying field values you specified in the mappings list. In the end, from a template perspective, an URL is an URL regardless of the source. Slots are used individually depending of the requirements of the chosen layout.","title":"What is a 'slot'?"},{"location":"usage/search-results/slots/#why-i-would-need-them","text":"They allow you to get your data source (custom or builtin) work with all templates without the need of refactoring them and to adapt your data source specific fields. Basically, it is a convenient, time saving feature making your templates reusable .","title":"Why I would need them?"},{"location":"usage/search-results/slots/#builtin-slots","text":"Here are all the builtin slots the solution provides. Data sources may or may not define all these slots depending the nature of the source. Slot name Description Title Typically the title of an item in results. Path The absolute URL of an item. Summary A short description of the item. Date A date associated to the item. Can be for instance, the created date, modified date or publishing date. FileType The file type. This can be an extension (ex: docx ) or the complete path of the item including the file extension (ex: https://mycompany.sharepoint.com/sites/mysite/Shared Documents/MyFile.pdf ). This slot is mainly used to retrieve the correct file icon for the item. PreviewImageUrl The image thumbnail URL to display for an item. You can use the builtin AutoPreviewImageUrl field here to get a default image if applicable. PreviewUrl Same as preview image URL but for the interactive preview of the item (ex: a Word document). You can use the builtin AutoPreviewUrl field here to get a default image if applicable. In this case, the Web Part will use a generic Microsoft Graph URL to generate the preview. More information on supported file types . Author An author associated to the item. Tags Tags associated to the item. Can be for instance taxonomy terms. SiteId The SharePoint site ID associated to the item. With ListId and ItemId this value is used to generate the preview URL. ListId The SharePoint site ID associated to the item. With SiteId and ItemId this value is used to generate the preview URL. ItemId The SharePoint site ID associated to the item. With ListId and SiteId this value is used to generate the preview URL. IsFolder Indicate if the current item is a folder. The value here should be a true/false value or 0/1. PersonQuery Used for the people layout to get information about the current user dynamically. More info here . UserDisplayName Used by the people layout to display the user name. UserEmail Used by the people layout to display the user email. A slot can be empty.","title":"Builtin slots"},{"location":"usage/search-results/slots/#define-your-custom-slots","text":"In addition to builtin ones, you can add your own slots and use them in layouts. To do so, first add your slot in the list. The slot name is any name you want to use, and the slot field is a managed property name from the selected properties list configured in the web part. Meaning, if you want to use RefinableString100 as a slot, you need to add it to the selected properties list first. And then use it in your templates using the following Handlebars expression: {{slot item @root.slots.<SlotName>}} slot : The Handlebars helper name. item : The current item containing the field value. @root.slots.<SlotName> : The corresponding slot mapping name (ex. @root.slots.Path to the URL). The slot value will be processed a string in your template.","title":"Define your custom slots"},{"location":"usage/search-results/tokens/","text":"Tokens give you the ability to write dynamic queries for your data sources by using the special syntax {<TokenName>} . Where can I use tokens? \u00b6 You can use tokens in the following locations: Search Results Web Part Builtin data sources SharePoint Search Query template field. Refinement filters field. Microsoft Search Query template field. Search Verticals Web Part In the link URL when the vertical item is a link. Search Box Web Part In the Query input transformation template when sending the query to a new page. In the Page URL field. Supported tokens (all data sources) \u00b6 Tokens are case insensitive Page tokens \u00b6 Token Definition {Page.<FieldName>} The value of a field on the page from where the query was issued. For example, if the page from where the query was issued contained a site column named \"ContentOwner,\" specifying {Page.ContentOwner} would allow you to query for the value of \"ContentOwner.\" FieldName is the internal name of the field. When used with taxonomy columns, use {Page.<FieldName>.Label} or {Page.<FieldName>.TermID} Connections tokens \u00b6 Tokens related to connected Web Parts in the Search Results. These tokens can be used in the 'Search Results' and 'Search Box' Web Parts. You can escape curly braces characters using '\\' to avoid: ex: DepartmentId:\\{edbfd618-ef1d-4cc5-a214-95bf44ddf4ee\\} Token Definition {inputQueryText} The query value entered into a search box on a page. The value depends on the configuration of input text connection of the Search Results Web Part. {filters.<FilterName>.<|valueAsText|fromDate|toDate\\>} The current selected filters. 'FilterName' corresponds to the filter name specified in the Search Filters Web Part (not the display name). The available values for a filter are as follow: valueAsText : the filter value as text. For multi values filter, values will be separated by a comma ',' . fromDate : if the filter is a date range template, the 'from' date selected by the user in UTC format. toDate : if the filter is a date range template, the 'to' date selected by the user in UTC format. If no filter are selected (i.e. no values), the {filters} expression will be resolved as an empty string '' . {verticals.<value|name>} If connected, get the current selected vertical tab name or associated value. Context tokens \u00b6 Token Definition {PageContext.<PropertyName>} Resolves current SPFx page context related tokens. You can use deep paths here to access properties. Ex: {PageContext.site.absoluteUrl} . Use the debug template in the web part to see all tokens available under the context node. {LegacyPageContext.<PropertyName>} Resolves current SPFx legacy page context related tokens. You can use deep paths here to access properties. Ex: {LegacyPageContext.aadTenantId} . {QueryString.<ParameterName>} A value from a query string in the URL of the current page. For example, if the URL of the current page contains a query string such as ItemNumber=567, you could obtain the value 567 by specifying {QueryString.ItemNumber} . Use {?QueryString.Parameter} if you want the part to be omitted in case the query string parameter is not present. {CurrentDisplayLanguage} The current display language based on MUI in ll-cc format . {CurrentDisplayLCID} Numeric value of the current display language based on MUI in ll-cc format . {TenantUrl} URL of the tenant (root site) Site, web, hub, etc. tokens \u00b6 Except for {Hub} , these a shortands to the {PageContext} tokens. They returns the same values. <PropertyName> is case sensitive . Token Definition {Site.<PropertyName>} Resolves current site related tokens. You can use the 'Debug' layout and the context property to see all available values for a site. Ex {Site.id._guid} or {Site.absoluteUrl} . {Hub.<PropertyName>} Resolves current hub site related tokens. Valid property names are {Hub.HubSiteId} , {Hub.Id} and {Hub.IsHubSite} You can target a hub with the template: DepartmentId:\\{{Hub.HubSiteId}\\} . {Group.<PropertyName>} Resolves current Office 365 group related tokens. You can use the 'Debug' layout and the context property to see all available values for a site. {List.<PropertyName>} Resolves current list related tokens. Ex {List.id._guid} or {List.absoluteUrl} . {Web.<PropertyName>} Resolves current web related tokens You can use the 'Debug' layout and the context property to see all available values for a site. Ex {Web.id._guid} or {Web.absoluteUrl} . User tokens \u00b6 Token Definition {User} or {User.Name} Display name of the user who issued the query. For example, this value can be used to query content of the managed property Author. {User.Email} Email address of the user who issued the query. For example, this value can be used to query content of the managed property WorkEmail. {User.PreferredContentLanguage} Language as specified as Preferred Content Language in the profile of the user who issued the query. {User.PreferredDisplayLanguage} Language as specified as Preferred Display Language in the profile of the user who issued the query. {User.\\<property>} Any property from the user profile of the user who issued the query \u2014 for example, SPS-Interests , userprofile_guid , accountname , etc. including custom properties. Date tokens \u00b6 Token Definition {CurrentYear} Local date four digits, 2023 {CurrentMonth} Local month, 1-12 {CurrentDate} Local date, 1-31 {CurrentHour} Local hour, 0-23 {CurrentMinute} Local minute, 0-59 {CurrentSecond} Local second, 0-59 {CurrentYearUTC} UTC date four digits, 2023 {CurrentMonthUTC} UTC month, 1-12 {CurrentDateUTC} UTC date, 1-31 {CurrentHourUTC} UTC, 0-23 {CurrentMinuteUTC} UTC minute, 0-59 {CurrentSecondUTC} UTC second, 0-59 | {Today+/- \\<integer value for number of days>} |A date calculated by adding/subtracting the specified number of days to/from the date when the query is issued. Date format is YYYY-MM-DD (Ex: {Today+5} ) SharePoint search query variables \u00b6 Supported variables \u00b6 The SharePoint Search engine already supports tokens by default (i.e query variables, ex: {Site.ID} ). You can use them in the Query template field only. To see the all the supported tokens natively, refer to the Microsoft documentation . Use the 'OR' operator \u00b6 To deal with mutli valued properties (like taxonomy multi or choices SharePoint fields), you can use the 'OR' operator syntax {|<property><operator><multi_values_property>} . The search query will be expanded to the following KQL query: ((<property><operator><value_1>) OR (<property><operator><value_2>) OR (<property><operator><value_3>) ...) Examples: Using an user profile multi values taxonomy property: {|owstaxidmetadataalltagsinfo:{User.SPS-Hashtags}} Using a page multi values taxonomy property: {|owstaxidmetadataalltagsinfo:{Page.myTaxonomyMultiColumn.TermID}} or {|owstaxidmetadataalltagsinfo:{Page.myTaxonomyMultiColumn.Label}} Using a page multi values choice property: {|RefinableStringXX:{Page.myChoiceMultiColumn}} At any time, you can see the resolved query using the 'Debug' layout an inspecting the data.queryModification property.","title":"Tokens"},{"location":"usage/search-results/tokens/#where-can-i-use-tokens","text":"You can use tokens in the following locations: Search Results Web Part Builtin data sources SharePoint Search Query template field. Refinement filters field. Microsoft Search Query template field. Search Verticals Web Part In the link URL when the vertical item is a link. Search Box Web Part In the Query input transformation template when sending the query to a new page. In the Page URL field.","title":"Where can I use tokens?"},{"location":"usage/search-results/tokens/#supported-tokens-all-data-sources","text":"Tokens are case insensitive","title":"Supported tokens (all data sources)"},{"location":"usage/search-results/tokens/#page-tokens","text":"Token Definition {Page.<FieldName>} The value of a field on the page from where the query was issued. For example, if the page from where the query was issued contained a site column named \"ContentOwner,\" specifying {Page.ContentOwner} would allow you to query for the value of \"ContentOwner.\" FieldName is the internal name of the field. When used with taxonomy columns, use {Page.<FieldName>.Label} or {Page.<FieldName>.TermID}","title":"Page tokens"},{"location":"usage/search-results/tokens/#connections-tokens","text":"Tokens related to connected Web Parts in the Search Results. These tokens can be used in the 'Search Results' and 'Search Box' Web Parts. You can escape curly braces characters using '\\' to avoid: ex: DepartmentId:\\{edbfd618-ef1d-4cc5-a214-95bf44ddf4ee\\} Token Definition {inputQueryText} The query value entered into a search box on a page. The value depends on the configuration of input text connection of the Search Results Web Part. {filters.<FilterName>.<|valueAsText|fromDate|toDate\\>} The current selected filters. 'FilterName' corresponds to the filter name specified in the Search Filters Web Part (not the display name). The available values for a filter are as follow: valueAsText : the filter value as text. For multi values filter, values will be separated by a comma ',' . fromDate : if the filter is a date range template, the 'from' date selected by the user in UTC format. toDate : if the filter is a date range template, the 'to' date selected by the user in UTC format. If no filter are selected (i.e. no values), the {filters} expression will be resolved as an empty string '' . {verticals.<value|name>} If connected, get the current selected vertical tab name or associated value.","title":"Connections tokens"},{"location":"usage/search-results/tokens/#context-tokens","text":"Token Definition {PageContext.<PropertyName>} Resolves current SPFx page context related tokens. You can use deep paths here to access properties. Ex: {PageContext.site.absoluteUrl} . Use the debug template in the web part to see all tokens available under the context node. {LegacyPageContext.<PropertyName>} Resolves current SPFx legacy page context related tokens. You can use deep paths here to access properties. Ex: {LegacyPageContext.aadTenantId} . {QueryString.<ParameterName>} A value from a query string in the URL of the current page. For example, if the URL of the current page contains a query string such as ItemNumber=567, you could obtain the value 567 by specifying {QueryString.ItemNumber} . Use {?QueryString.Parameter} if you want the part to be omitted in case the query string parameter is not present. {CurrentDisplayLanguage} The current display language based on MUI in ll-cc format . {CurrentDisplayLCID} Numeric value of the current display language based on MUI in ll-cc format . {TenantUrl} URL of the tenant (root site)","title":"Context tokens"},{"location":"usage/search-results/tokens/#site-web-hub-etc-tokens","text":"Except for {Hub} , these a shortands to the {PageContext} tokens. They returns the same values. <PropertyName> is case sensitive . Token Definition {Site.<PropertyName>} Resolves current site related tokens. You can use the 'Debug' layout and the context property to see all available values for a site. Ex {Site.id._guid} or {Site.absoluteUrl} . {Hub.<PropertyName>} Resolves current hub site related tokens. Valid property names are {Hub.HubSiteId} , {Hub.Id} and {Hub.IsHubSite} You can target a hub with the template: DepartmentId:\\{{Hub.HubSiteId}\\} . {Group.<PropertyName>} Resolves current Office 365 group related tokens. You can use the 'Debug' layout and the context property to see all available values for a site. {List.<PropertyName>} Resolves current list related tokens. Ex {List.id._guid} or {List.absoluteUrl} . {Web.<PropertyName>} Resolves current web related tokens You can use the 'Debug' layout and the context property to see all available values for a site. Ex {Web.id._guid} or {Web.absoluteUrl} .","title":"Site, web, hub, etc. tokens"},{"location":"usage/search-results/tokens/#user-tokens","text":"Token Definition {User} or {User.Name} Display name of the user who issued the query. For example, this value can be used to query content of the managed property Author. {User.Email} Email address of the user who issued the query. For example, this value can be used to query content of the managed property WorkEmail. {User.PreferredContentLanguage} Language as specified as Preferred Content Language in the profile of the user who issued the query. {User.PreferredDisplayLanguage} Language as specified as Preferred Display Language in the profile of the user who issued the query. {User.\\<property>} Any property from the user profile of the user who issued the query \u2014 for example, SPS-Interests , userprofile_guid , accountname , etc. including custom properties.","title":"User tokens"},{"location":"usage/search-results/tokens/#date-tokens","text":"Token Definition {CurrentYear} Local date four digits, 2023 {CurrentMonth} Local month, 1-12 {CurrentDate} Local date, 1-31 {CurrentHour} Local hour, 0-23 {CurrentMinute} Local minute, 0-59 {CurrentSecond} Local second, 0-59 {CurrentYearUTC} UTC date four digits, 2023 {CurrentMonthUTC} UTC month, 1-12 {CurrentDateUTC} UTC date, 1-31 {CurrentHourUTC} UTC, 0-23 {CurrentMinuteUTC} UTC minute, 0-59 {CurrentSecondUTC} UTC second, 0-59 | {Today+/- \\<integer value for number of days>} |A date calculated by adding/subtracting the specified number of days to/from the date when the query is issued. Date format is YYYY-MM-DD (Ex: {Today+5} )","title":"Date tokens"},{"location":"usage/search-results/tokens/#sharepoint-search-query-variables","text":"","title":"SharePoint search query variables"},{"location":"usage/search-results/tokens/#supported-variables","text":"The SharePoint Search engine already supports tokens by default (i.e query variables, ex: {Site.ID} ). You can use them in the Query template field only. To see the all the supported tokens natively, refer to the Microsoft documentation .","title":"Supported variables"},{"location":"usage/search-results/tokens/#use-the-or-operator","text":"To deal with mutli valued properties (like taxonomy multi or choices SharePoint fields), you can use the 'OR' operator syntax {|<property><operator><multi_values_property>} . The search query will be expanded to the following KQL query: ((<property><operator><value_1>) OR (<property><operator><value_2>) OR (<property><operator><value_3>) ...) Examples: Using an user profile multi values taxonomy property: {|owstaxidmetadataalltagsinfo:{User.SPS-Hashtags}} Using a page multi values taxonomy property: {|owstaxidmetadataalltagsinfo:{Page.myTaxonomyMultiColumn.TermID}} or {|owstaxidmetadataalltagsinfo:{Page.myTaxonomyMultiColumn.Label}} Using a page multi values choice property: {|RefinableStringXX:{Page.myChoiceMultiColumn}} At any time, you can see the resolved query using the 'Debug' layout an inspecting the data.queryModification property.","title":"Use the 'OR' operator"},{"location":"usage/search-results/common/paging/","text":"The paging options are available for all data sources. Setting Description Default value Show paging Hide or display the paging control. Number of items per page Specify the number of items to show per page. Number of pages to display in range Determines the number of pages to display in range. Hide navigation buttons (prev page, next page) Self explicit. Hide first/last navigation buttons Self explicit. Hide navigation buttons (prev, next, first, last) if they are disabled. Self explicit.","title":"Paging"},{"location":"usage/search-results/connections/","text":"Connections \u00b6 The 'Search Results' Web Part can be used alone but also connected to other Web Parts: Input query text \u00b6 The input query text can be either static or dynamic. In all cases, this value can be used using the {inputQueryText} token. See tokens for more information. Static value It corresponds to a free text keywords that you want to pass to your data source: This value will be applied every time to your data source. Dynamic value You can connect a dynamic value from the page environment (ex: a query string parameter, the top bar search box, etc.) or a search box already added to the page. Optionaly, you can set a default query text when there is no value for the connected source (ex: an empty search box at page load). Filters Web Part \u00b6 Verticals \u00b6 When you connect the Web Part to a Verticals one, you must specify on which vertical the Web Part content should be displayed. This mechanism allows to build a complete search center using verticals tabs. Search Results \u00b6 How to configure item selection? \u00b6 Source Web Part configuration \u00b6 In a Search Results Web Part where you want to select items from, go to the second property pane configuration page and enable the Allow item selection flag: Specify if you want to allow only single or multi selection. Make sure some results are displayed in the Web Part by setting a default query. Target Web Part(s) configuration \u00b6 In a Search Results Web Part where you want to filter values, go to the third configuration page and enable the Connect to a data results Web Part flag. From here, select the previous Web Part as source. Select the source field to use as filter value. Note If you don't see any fields in the dropdown list after selection a source Web Part, it could be because: The source Web Part doesn't have any results displayed yet so we can't guess what are the available exposed fields. In this case, you can either type the field name manually in the dropdown and press 'Enter' or display results in the source Web Part to list all its available fields. The source Web Part doesn't allow item selection. In this case, you can't add any field. Select the destination field to filter the current Web Part results. Note If you don't see any fields in the dropdown list for target fields, it is because the Web Part doesn't display any result yet. In this case, you can either type the field name manually in the dropdown and press 'Enter' or display results in the source Web Part to list all available fields. Select the selection mode. Note Process values as filters : the values will be sent as regular filters, just like they were selected in the Search Filters Web Part. In this mode, the selected source field must be a valid filter for the current data source . For instance if the data source is SharePoint Search or Microsoft Search, the field must be a valid refinable managed property . Process values as tokens : the values will be sent manually in the data source query using token {filter.source_field.valueAsText} to craft a valid query. This scenario can be useful for instance if: You use SharePoint Search or Microsoft Search data sources and you don't want to use a Refinable managed property as filters. Examples SharePoint Search KQL (Single Value) Title:{filters.Title.valueAsText} will be translated to Title:docx SharePoint Search KQL (Multi Values) OR condition : {|Title:{filters.Title.valueAsText}} will be translated to (Title:docx) OR (Title:pdf)... AND condition : {&Title:{filters.Title.valueAsText}} will be translated to (Title:docx) AND (Title:pdf)... Select the logical operator to use between selected filter values if applicable (default mode only). Filtering general behavior If the source selected item field is null ou empty : It will be replaced by the FQL expression string('') expression if the mode is Process values as filters It will be resolved as an empty string if the mode is Process values as tokens . Duplicate values are trimmed (ex: user select items with the same filter values). Filter values should be 'string' values. All other types will be ignored (ex: 'objects' from JSON response).","title":"Connections"},{"location":"usage/search-results/connections/#connections","text":"The 'Search Results' Web Part can be used alone but also connected to other Web Parts:","title":"Connections"},{"location":"usage/search-results/connections/#input-query-text","text":"The input query text can be either static or dynamic. In all cases, this value can be used using the {inputQueryText} token. See tokens for more information. Static value It corresponds to a free text keywords that you want to pass to your data source: This value will be applied every time to your data source. Dynamic value You can connect a dynamic value from the page environment (ex: a query string parameter, the top bar search box, etc.) or a search box already added to the page. Optionaly, you can set a default query text when there is no value for the connected source (ex: an empty search box at page load).","title":"Input query text"},{"location":"usage/search-results/connections/#filters-web-part","text":"","title":"Filters Web Part"},{"location":"usage/search-results/connections/#verticals","text":"When you connect the Web Part to a Verticals one, you must specify on which vertical the Web Part content should be displayed. This mechanism allows to build a complete search center using verticals tabs.","title":"Verticals"},{"location":"usage/search-results/connections/#search-results","text":"","title":"Search Results"},{"location":"usage/search-results/connections/#how-to-configure-item-selection","text":"","title":"How to configure item selection?"},{"location":"usage/search-results/connections/#source-web-part-configuration","text":"In a Search Results Web Part where you want to select items from, go to the second property pane configuration page and enable the Allow item selection flag: Specify if you want to allow only single or multi selection. Make sure some results are displayed in the Web Part by setting a default query.","title":"Source Web Part configuration"},{"location":"usage/search-results/connections/#target-web-parts-configuration","text":"In a Search Results Web Part where you want to filter values, go to the third configuration page and enable the Connect to a data results Web Part flag. From here, select the previous Web Part as source. Select the source field to use as filter value. Note If you don't see any fields in the dropdown list after selection a source Web Part, it could be because: The source Web Part doesn't have any results displayed yet so we can't guess what are the available exposed fields. In this case, you can either type the field name manually in the dropdown and press 'Enter' or display results in the source Web Part to list all its available fields. The source Web Part doesn't allow item selection. In this case, you can't add any field. Select the destination field to filter the current Web Part results. Note If you don't see any fields in the dropdown list for target fields, it is because the Web Part doesn't display any result yet. In this case, you can either type the field name manually in the dropdown and press 'Enter' or display results in the source Web Part to list all available fields. Select the selection mode. Note Process values as filters : the values will be sent as regular filters, just like they were selected in the Search Filters Web Part. In this mode, the selected source field must be a valid filter for the current data source . For instance if the data source is SharePoint Search or Microsoft Search, the field must be a valid refinable managed property . Process values as tokens : the values will be sent manually in the data source query using token {filter.source_field.valueAsText} to craft a valid query. This scenario can be useful for instance if: You use SharePoint Search or Microsoft Search data sources and you don't want to use a Refinable managed property as filters. Examples SharePoint Search KQL (Single Value) Title:{filters.Title.valueAsText} will be translated to Title:docx SharePoint Search KQL (Multi Values) OR condition : {|Title:{filters.Title.valueAsText}} will be translated to (Title:docx) OR (Title:pdf)... AND condition : {&Title:{filters.Title.valueAsText}} will be translated to (Title:docx) AND (Title:pdf)... Select the logical operator to use between selected filter values if applicable (default mode only). Filtering general behavior If the source selected item field is null ou empty : It will be replaced by the FQL expression string('') expression if the mode is Process values as filters It will be resolved as an empty string if the mode is Process values as tokens . Duplicate values are trimmed (ex: user select items with the same filter values). Filter values should be 'string' values. All other types will be ignored (ex: 'objects' from JSON response).","title":"Target Web Part(s) configuration"},{"location":"usage/search-results/connections/item-selection/","text":"How to configure item selection? \u00b6 Source Web Part configuration \u00b6 In a Search Results Web Part where you want to select items from, go to the second property pane configuration page and enable the Allow item selection flag: Specify if you want to allow only single or multi selection. Make sure some results are displayed in the Web Part by setting a default query. Target Web Part(s) configuration \u00b6 In a Search Results Web Part where you want to filter values, go to the third configuration page and enable the Connect to a data results Web Part flag. From here, select the previous Web Part as source. Select the source field to use as filter value. Note If you don't see any fields in the dropdown list after selection a source Web Part, it could be because: The source Web Part doesn't have any results displayed yet so we can't guess what are the available exposed fields. In this case, you can either type the field name manually in the dropdown and press 'Enter' or display results in the source Web Part to list all its available fields. The source Web Part doesn't allow item selection. In this case, you can't add any field. Select the destination field to filter the current Web Part results. Note If you don't see any fields in the dropdown list for target fields, it is because the Web Part doesn't display any result yet. In this case, you can either type the field name manually in the dropdown and press 'Enter' or display results in the source Web Part to list all available fields. Select the selection mode. Note Process values as filters : the values will be sent as regular filters, just like they were selected in the Search Filters Web Part. In this mode, the selected source field must be a valid filter for the current data source . For instance if the data source is SharePoint Search or Microsoft Search, the field must be a valid refinable managed property . Process values as tokens : the values will be sent manually in the data source query using token {filter.source_field.valueAsText} to craft a valid query. This scenario can be useful for instance if: You use SharePoint Search or Microsoft Search data sources and you don't want to use a Refinable managed property as filters. Examples SharePoint Search KQL (Single Value) Title:{filters.Title.valueAsText} will be translated to Title:docx SharePoint Search KQL (Multi Values) OR condition : {|Title:{filters.Title.valueAsText}} will be translated to (Title:docx) OR (Title:pdf)... AND condition : {&Title:{filters.Title.valueAsText}} will be translated to (Title:docx) AND (Title:pdf)... Select the logical operator to use between selected filter values if applicable (default mode only). Filtering general behavior If the source selected item field is null ou empty : It will be replaced by the FQL expression string('') expression if the mode is Process values as filters It will be resolved as an empty string if the mode is Process values as tokens . Duplicate values are trimmed (ex: user select items with the same filter values). Filter values should be 'string' values. All other types will be ignored (ex: 'objects' from JSON response).","title":"Item selection"},{"location":"usage/search-results/connections/item-selection/#how-to-configure-item-selection","text":"","title":"How to configure item selection?"},{"location":"usage/search-results/connections/item-selection/#source-web-part-configuration","text":"In a Search Results Web Part where you want to select items from, go to the second property pane configuration page and enable the Allow item selection flag: Specify if you want to allow only single or multi selection. Make sure some results are displayed in the Web Part by setting a default query.","title":"Source Web Part configuration"},{"location":"usage/search-results/connections/item-selection/#target-web-parts-configuration","text":"In a Search Results Web Part where you want to filter values, go to the third configuration page and enable the Connect to a data results Web Part flag. From here, select the previous Web Part as source. Select the source field to use as filter value. Note If you don't see any fields in the dropdown list after selection a source Web Part, it could be because: The source Web Part doesn't have any results displayed yet so we can't guess what are the available exposed fields. In this case, you can either type the field name manually in the dropdown and press 'Enter' or display results in the source Web Part to list all its available fields. The source Web Part doesn't allow item selection. In this case, you can't add any field. Select the destination field to filter the current Web Part results. Note If you don't see any fields in the dropdown list for target fields, it is because the Web Part doesn't display any result yet. In this case, you can either type the field name manually in the dropdown and press 'Enter' or display results in the source Web Part to list all available fields. Select the selection mode. Note Process values as filters : the values will be sent as regular filters, just like they were selected in the Search Filters Web Part. In this mode, the selected source field must be a valid filter for the current data source . For instance if the data source is SharePoint Search or Microsoft Search, the field must be a valid refinable managed property . Process values as tokens : the values will be sent manually in the data source query using token {filter.source_field.valueAsText} to craft a valid query. This scenario can be useful for instance if: You use SharePoint Search or Microsoft Search data sources and you don't want to use a Refinable managed property as filters. Examples SharePoint Search KQL (Single Value) Title:{filters.Title.valueAsText} will be translated to Title:docx SharePoint Search KQL (Multi Values) OR condition : {|Title:{filters.Title.valueAsText}} will be translated to (Title:docx) OR (Title:pdf)... AND condition : {&Title:{filters.Title.valueAsText}} will be translated to (Title:docx) AND (Title:pdf)... Select the logical operator to use between selected filter values if applicable (default mode only). Filtering general behavior If the source selected item field is null ou empty : It will be replaced by the FQL expression string('') expression if the mode is Process values as filters It will be resolved as an empty string if the mode is Process values as tokens . Duplicate values are trimmed (ex: user select items with the same filter values). Filter values should be 'string' values. All other types will be ignored (ex: 'objects' from JSON response).","title":"Target Web Part(s) configuration"},{"location":"usage/search-results/data-sources/","text":"Data sources \u00b6 Built-in data sources \u00b6 By default, the following data sources are available: Be careful, when you switch the data source in the property pane, all the previous data source properties are lost. We do this to avoid polluting the web part property bag with multiple useless configurations. SharePoint Search \u00b6 The 'SharePoint Search' data source retrieve items from the SharePoint search engine. The SharePoint search is different from the Microsoft Graph search. Source configuration \u00b6 Setting Description Default value Query text The input query text to pass to the search engine. This setting is not configurable directly in the data source options. To enable it, go to the third configuration page of the Web Part and select either a static or dynamic value (Ex: from a connected search box Web Part). See the connection documentation for more information on how to configure this option. This value can be then used in the Query template using the {searchTerms} token. Also this value can be a Keyword Query Language expression (KQL) . None. Query template The search query template to use. It allows you to use dynamic tokens according to the context or specify conditions that should always apply to the query. {searchTerms} Result source ID Can be either a built-in result source ID listed in the dropdown, or a custom result source that you specify. Type the GUID of the result source, or the SCOPE and NAME , separated by \\| (pipe character). For this to take effect, you must press 'Enter' to save the value. Valid scopes are SPSiteSubscription , SPSite , SPWeb . Examples: SPWeb \\| Local News SPSite \\| Contracts SPSiteSubscription \\| Intranet LocalSharePointResults Selected properties The SharePoint managed properties to retrieve from the results. They can be used with the same name in layouts and slots afterwards. Please be aware that the way we get the list of managed properties is not reliable and you might have to enter the property name manually. To add other managed properties to the list, clear out the dropdown list field and manually type or paste the name of your managed property and press ENTER . This will add it to the list of selected properties in the query. Pasting a comma separated list of property names also work. You can validate the property is working by using the Debug layout. If a list of properties is not shown, enter manually. Title Path DefaultEncodingURL FileType HitHighlightedProperties HitHighlightedSummary AuthorOWSUSER owstaxidmetadataalltagsinfo Created UniqueID NormSiteID NormListID NormUniqueID ContentTypeId UserName JobTitle WorkPhone SPSiteURL SiteTitle CreatedBy HtmlFileType SiteLogo Sort settings Configure the sort settings of the data source. Properties listed in the dropdown are all static properties marked as 'Sortable' in the SharePoint search schema . However, it does not list all possible RefinableXXX or aliases fields. To use them, you must enter the value manually and press 'Enter' to validate. For a particular field, you can define if it should be used for initial sort (i.e. when the results are loaded for the first time) or be only available for users in the sort control (i.e. after the results are loaded). The sort control does not consider default sort fields (i.e. select them by default) and you can only sort on a single field at a time according the fields you defined . If no user sort fields are defined in the configuration, the sort control won't be displayed. None. Refinement filters The initial refinement filters to apply to the query. Filters has to be written using FQL ( Fast Query Language ) (e.g. FileType:equals(\"docx\") ). They will be applied every time to the current search query regardless selected filters from connected Web Parts. Note: for string expressions, use \" instead of ' . None. Language of the search request The language to use for the search request. By default the search request will be made using the current user interface language. This parameter is mainly used to process diacritics, plurals, etc. correctly according to the language. Current UI language. Enable query rules Whether or not apply SharePoint query rules. False. Trim duplicates A Boolean value that specifies whether duplicate items are removed from the results. False. Enable audience targeting Whether or not results should be targeted according to the audiences that the current user belongs to. More information about modern audiences and how to configure them . False. Enable localization If enabled, the Web Part will try to translate the taxonomy term IDs found in result item properties and refinement values to their corresponding label according to the curent UI language. To get it work, you must map a new refinable managed property associated with ows_taxId_ crawled property and turn this toggle 'on': If enabled and depending on how many items are currently being displayed, this could slightly decrease the loading performance. To use translated values in your template, you must use the ' Auto + <property_name> ' property format instead of the original property name . For instance, to use translated values of the ' owstaxidmetadataalltagsinfo ' property, you must use the ' Auto owstaxidmetadataalltagsinfo' auto created property. False. Hit-highlighted properties The list of SharePoint managed properties (separated by a comma) to return hit highlighted information (whether the search query match each specified managed property or not). Note: HitHighlightedProperties will be null if there is a field in Hit-highlighted properties doesn't exist in Selected properties None. Collapse specification The CollapseSpecification property takes a Spec parameter that can contain multiple fields separated either by a comma or a space, which evaluated together specify a set of criteria used for collapsing. More information about the CollapseSpecification . None. Microsoft Search \u00b6 The 'Microsoft Search' data source retrieve items from the Microsoft search engine. This data source can use the Microsoft Search beta API that is not suitable for a production use. Use the normal version for production use. Source configuration \u00b6 Setting Description Default value Entity types to search The entity types to search. See the Microsoft Search API documentation to see valid combinations. Drive items (SharePoint & OneDrive) Query template A query template allowing to use tokens to set a base query the same way as SharePoint search. {searchTerms} Use beta endpoint Flag to switch between v1.0 and beta Microsoft Graph endpoint. false Collapse settings (beta only) Specifies the criteria used for collapsing search results. Applies only to sortable/refinable properties. More information about the CollapseProperties None. Enable spelling suggestions Flag to enable spelling suggestions. If enabled, the user will get the search results for the original search query and suggestions for spelling correction in the queryAlterationResponse property of the response for the typos in the query. false Enable spelling modifications Flag to enable spelling modifications. If enabled, the user will get the search results for the corrected query in case of no results for the original query with typos. The response will also include the spelling modification information in the queryAlterationResponse property. false Sort settings Configure the sort settings of the data source. Properties listed in the dropdown are all static properties marked as 'Sortable' in the SharePoint search schema . However, it does not list all possible RefinableXXX or aliases fields. To use them, you must enter the value manually and press 'Enter' to validate. For a particular field, you can define if it should be used for initial sort (i.e. when the results are loaded for the first time) or be only available for users in the sort control (i.e. after the results are loaded). The sort control does not consider default sort fields (i.e. select them by default) and you can only sort on a single field at a time according the fields you defined . If no user sort fields are defined in the configuration, the sort control won't be displayed. None. Enable result Types Display results according to the result types defined in the Microsoft Search admin center. This option can only be used if External Items entity type is selected and the layout type is \"Adaptive Cards None. Show SharePoint Embedded (hidden) in search results By default content in SharePoint Embedded Containers is not visible in Microsoft Search. Add the relevant ContainerTypeids to the query template, like ContainerTypeId:\"1adc34ca-aef3-4e13-aacf-39b43affd198\" and the contain is now returned. None. Show MS Archived content in search results By default contain archived with Microsoft Archive is hidden from Microsoft Search, but this option sets the required \"includeHiddenContent\" and \"isArchived\" properties, which ensures that the contant is now returned by the API. None. Paging \u00b6 The paging options are available for all data sources. Setting Description Default value Show paging Hide or display the paging control. Number of items per page Specify the number of items to show per page. Number of pages to display in range Determines the number of pages to display in range. Hide navigation buttons (prev page, next page) Self explicit. Hide first/last navigation buttons Self explicit. Hide navigation buttons (prev, next, first, last) if they are disabled. Self explicit.","title":"Data sources"},{"location":"usage/search-results/data-sources/#data-sources","text":"","title":"Data sources"},{"location":"usage/search-results/data-sources/#built-in-data-sources","text":"By default, the following data sources are available: Be careful, when you switch the data source in the property pane, all the previous data source properties are lost. We do this to avoid polluting the web part property bag with multiple useless configurations.","title":"Built-in data sources"},{"location":"usage/search-results/data-sources/#sharepoint-search","text":"The 'SharePoint Search' data source retrieve items from the SharePoint search engine. The SharePoint search is different from the Microsoft Graph search.","title":"SharePoint Search"},{"location":"usage/search-results/data-sources/#source-configuration","text":"Setting Description Default value Query text The input query text to pass to the search engine. This setting is not configurable directly in the data source options. To enable it, go to the third configuration page of the Web Part and select either a static or dynamic value (Ex: from a connected search box Web Part). See the connection documentation for more information on how to configure this option. This value can be then used in the Query template using the {searchTerms} token. Also this value can be a Keyword Query Language expression (KQL) . None. Query template The search query template to use. It allows you to use dynamic tokens according to the context or specify conditions that should always apply to the query. {searchTerms} Result source ID Can be either a built-in result source ID listed in the dropdown, or a custom result source that you specify. Type the GUID of the result source, or the SCOPE and NAME , separated by \\| (pipe character). For this to take effect, you must press 'Enter' to save the value. Valid scopes are SPSiteSubscription , SPSite , SPWeb . Examples: SPWeb \\| Local News SPSite \\| Contracts SPSiteSubscription \\| Intranet LocalSharePointResults Selected properties The SharePoint managed properties to retrieve from the results. They can be used with the same name in layouts and slots afterwards. Please be aware that the way we get the list of managed properties is not reliable and you might have to enter the property name manually. To add other managed properties to the list, clear out the dropdown list field and manually type or paste the name of your managed property and press ENTER . This will add it to the list of selected properties in the query. Pasting a comma separated list of property names also work. You can validate the property is working by using the Debug layout. If a list of properties is not shown, enter manually. Title Path DefaultEncodingURL FileType HitHighlightedProperties HitHighlightedSummary AuthorOWSUSER owstaxidmetadataalltagsinfo Created UniqueID NormSiteID NormListID NormUniqueID ContentTypeId UserName JobTitle WorkPhone SPSiteURL SiteTitle CreatedBy HtmlFileType SiteLogo Sort settings Configure the sort settings of the data source. Properties listed in the dropdown are all static properties marked as 'Sortable' in the SharePoint search schema . However, it does not list all possible RefinableXXX or aliases fields. To use them, you must enter the value manually and press 'Enter' to validate. For a particular field, you can define if it should be used for initial sort (i.e. when the results are loaded for the first time) or be only available for users in the sort control (i.e. after the results are loaded). The sort control does not consider default sort fields (i.e. select them by default) and you can only sort on a single field at a time according the fields you defined . If no user sort fields are defined in the configuration, the sort control won't be displayed. None. Refinement filters The initial refinement filters to apply to the query. Filters has to be written using FQL ( Fast Query Language ) (e.g. FileType:equals(\"docx\") ). They will be applied every time to the current search query regardless selected filters from connected Web Parts. Note: for string expressions, use \" instead of ' . None. Language of the search request The language to use for the search request. By default the search request will be made using the current user interface language. This parameter is mainly used to process diacritics, plurals, etc. correctly according to the language. Current UI language. Enable query rules Whether or not apply SharePoint query rules. False. Trim duplicates A Boolean value that specifies whether duplicate items are removed from the results. False. Enable audience targeting Whether or not results should be targeted according to the audiences that the current user belongs to. More information about modern audiences and how to configure them . False. Enable localization If enabled, the Web Part will try to translate the taxonomy term IDs found in result item properties and refinement values to their corresponding label according to the curent UI language. To get it work, you must map a new refinable managed property associated with ows_taxId_ crawled property and turn this toggle 'on': If enabled and depending on how many items are currently being displayed, this could slightly decrease the loading performance. To use translated values in your template, you must use the ' Auto + <property_name> ' property format instead of the original property name . For instance, to use translated values of the ' owstaxidmetadataalltagsinfo ' property, you must use the ' Auto owstaxidmetadataalltagsinfo' auto created property. False. Hit-highlighted properties The list of SharePoint managed properties (separated by a comma) to return hit highlighted information (whether the search query match each specified managed property or not). Note: HitHighlightedProperties will be null if there is a field in Hit-highlighted properties doesn't exist in Selected properties None. Collapse specification The CollapseSpecification property takes a Spec parameter that can contain multiple fields separated either by a comma or a space, which evaluated together specify a set of criteria used for collapsing. More information about the CollapseSpecification . None.","title":"Source configuration"},{"location":"usage/search-results/data-sources/#microsoft-search","text":"The 'Microsoft Search' data source retrieve items from the Microsoft search engine. This data source can use the Microsoft Search beta API that is not suitable for a production use. Use the normal version for production use.","title":"Microsoft Search"},{"location":"usage/search-results/data-sources/#source-configuration_1","text":"Setting Description Default value Entity types to search The entity types to search. See the Microsoft Search API documentation to see valid combinations. Drive items (SharePoint & OneDrive) Query template A query template allowing to use tokens to set a base query the same way as SharePoint search. {searchTerms} Use beta endpoint Flag to switch between v1.0 and beta Microsoft Graph endpoint. false Collapse settings (beta only) Specifies the criteria used for collapsing search results. Applies only to sortable/refinable properties. More information about the CollapseProperties None. Enable spelling suggestions Flag to enable spelling suggestions. If enabled, the user will get the search results for the original search query and suggestions for spelling correction in the queryAlterationResponse property of the response for the typos in the query. false Enable spelling modifications Flag to enable spelling modifications. If enabled, the user will get the search results for the corrected query in case of no results for the original query with typos. The response will also include the spelling modification information in the queryAlterationResponse property. false Sort settings Configure the sort settings of the data source. Properties listed in the dropdown are all static properties marked as 'Sortable' in the SharePoint search schema . However, it does not list all possible RefinableXXX or aliases fields. To use them, you must enter the value manually and press 'Enter' to validate. For a particular field, you can define if it should be used for initial sort (i.e. when the results are loaded for the first time) or be only available for users in the sort control (i.e. after the results are loaded). The sort control does not consider default sort fields (i.e. select them by default) and you can only sort on a single field at a time according the fields you defined . If no user sort fields are defined in the configuration, the sort control won't be displayed. None. Enable result Types Display results according to the result types defined in the Microsoft Search admin center. This option can only be used if External Items entity type is selected and the layout type is \"Adaptive Cards None. Show SharePoint Embedded (hidden) in search results By default content in SharePoint Embedded Containers is not visible in Microsoft Search. Add the relevant ContainerTypeids to the query template, like ContainerTypeId:\"1adc34ca-aef3-4e13-aacf-39b43affd198\" and the contain is now returned. None. Show MS Archived content in search results By default contain archived with Microsoft Archive is hidden from Microsoft Search, but this option sets the required \"includeHiddenContent\" and \"isArchived\" properties, which ensures that the contant is now returned by the API. None.","title":"Source configuration"},{"location":"usage/search-results/data-sources/#paging","text":"The paging options are available for all data sources. Setting Description Default value Show paging Hide or display the paging control. Number of items per page Specify the number of items to show per page. Number of pages to display in range Determines the number of pages to display in range. Hide navigation buttons (prev page, next page) Self explicit. Hide first/last navigation buttons Self explicit. Hide navigation buttons (prev, next, first, last) if they are disabled. Self explicit.","title":"Paging"},{"location":"usage/search-results/data-sources/microsoft-search/","text":"The 'Microsoft Search' data source retrieve items from the Microsoft search engine. This data source can use the Microsoft Search beta API that is not suitable for a production use. Use the normal version for production use. Source configuration \u00b6 Setting Description Default value Entity types to search The entity types to search. See the Microsoft Search API documentation to see valid combinations. Drive items (SharePoint & OneDrive) Query template A query template allowing to use tokens to set a base query the same way as SharePoint search. {searchTerms} Use beta endpoint Flag to switch between v1.0 and beta Microsoft Graph endpoint. false Collapse settings (beta only) Specifies the criteria used for collapsing search results. Applies only to sortable/refinable properties. More information about the CollapseProperties None. Enable spelling suggestions Flag to enable spelling suggestions. If enabled, the user will get the search results for the original search query and suggestions for spelling correction in the queryAlterationResponse property of the response for the typos in the query. false Enable spelling modifications Flag to enable spelling modifications. If enabled, the user will get the search results for the corrected query in case of no results for the original query with typos. The response will also include the spelling modification information in the queryAlterationResponse property. false Sort settings Configure the sort settings of the data source. Properties listed in the dropdown are all static properties marked as 'Sortable' in the SharePoint search schema . However, it does not list all possible RefinableXXX or aliases fields. To use them, you must enter the value manually and press 'Enter' to validate. For a particular field, you can define if it should be used for initial sort (i.e. when the results are loaded for the first time) or be only available for users in the sort control (i.e. after the results are loaded). The sort control does not consider default sort fields (i.e. select them by default) and you can only sort on a single field at a time according the fields you defined . If no user sort fields are defined in the configuration, the sort control won't be displayed. None. Enable result Types Display results according to the result types defined in the Microsoft Search admin center. This option can only be used if External Items entity type is selected and the layout type is \"Adaptive Cards None. Show SharePoint Embedded (hidden) in search results By default content in SharePoint Embedded Containers is not visible in Microsoft Search. Add the relevant ContainerTypeids to the query template, like ContainerTypeId:\"1adc34ca-aef3-4e13-aacf-39b43affd198\" and the contain is now returned. None. Show MS Archived content in search results By default contain archived with Microsoft Archive is hidden from Microsoft Search, but this option sets the required \"includeHiddenContent\" and \"isArchived\" properties, which ensures that the contant is now returned by the API. None.","title":"Microsoft search"},{"location":"usage/search-results/data-sources/microsoft-search/#source-configuration","text":"Setting Description Default value Entity types to search The entity types to search. See the Microsoft Search API documentation to see valid combinations. Drive items (SharePoint & OneDrive) Query template A query template allowing to use tokens to set a base query the same way as SharePoint search. {searchTerms} Use beta endpoint Flag to switch between v1.0 and beta Microsoft Graph endpoint. false Collapse settings (beta only) Specifies the criteria used for collapsing search results. Applies only to sortable/refinable properties. More information about the CollapseProperties None. Enable spelling suggestions Flag to enable spelling suggestions. If enabled, the user will get the search results for the original search query and suggestions for spelling correction in the queryAlterationResponse property of the response for the typos in the query. false Enable spelling modifications Flag to enable spelling modifications. If enabled, the user will get the search results for the corrected query in case of no results for the original query with typos. The response will also include the spelling modification information in the queryAlterationResponse property. false Sort settings Configure the sort settings of the data source. Properties listed in the dropdown are all static properties marked as 'Sortable' in the SharePoint search schema . However, it does not list all possible RefinableXXX or aliases fields. To use them, you must enter the value manually and press 'Enter' to validate. For a particular field, you can define if it should be used for initial sort (i.e. when the results are loaded for the first time) or be only available for users in the sort control (i.e. after the results are loaded). The sort control does not consider default sort fields (i.e. select them by default) and you can only sort on a single field at a time according the fields you defined . If no user sort fields are defined in the configuration, the sort control won't be displayed. None. Enable result Types Display results according to the result types defined in the Microsoft Search admin center. This option can only be used if External Items entity type is selected and the layout type is \"Adaptive Cards None. Show SharePoint Embedded (hidden) in search results By default content in SharePoint Embedded Containers is not visible in Microsoft Search. Add the relevant ContainerTypeids to the query template, like ContainerTypeId:\"1adc34ca-aef3-4e13-aacf-39b43affd198\" and the contain is now returned. None. Show MS Archived content in search results By default contain archived with Microsoft Archive is hidden from Microsoft Search, but this option sets the required \"includeHiddenContent\" and \"isArchived\" properties, which ensures that the contant is now returned by the API. None.","title":"Source configuration"},{"location":"usage/search-results/data-sources/sharepoint-search/","text":"The 'SharePoint Search' data source retrieve items from the SharePoint search engine. The SharePoint search is different from the Microsoft Graph search. Source configuration \u00b6 Setting Description Default value Query text The input query text to pass to the search engine. This setting is not configurable directly in the data source options. To enable it, go to the third configuration page of the Web Part and select either a static or dynamic value (Ex: from a connected search box Web Part). See the connection documentation for more information on how to configure this option. This value can be then used in the Query template using the {searchTerms} token. Also this value can be a Keyword Query Language expression (KQL) . None. Query template The search query template to use. It allows you to use dynamic tokens according to the context or specify conditions that should always apply to the query. {searchTerms} Result source ID Can be either a built-in result source ID listed in the dropdown, or a custom result source that you specify. Type the GUID of the result source, or the SCOPE and NAME , separated by \\| (pipe character). For this to take effect, you must press 'Enter' to save the value. Valid scopes are SPSiteSubscription , SPSite , SPWeb . Examples: SPWeb \\| Local News SPSite \\| Contracts SPSiteSubscription \\| Intranet LocalSharePointResults Selected properties The SharePoint managed properties to retrieve from the results. They can be used with the same name in layouts and slots afterwards. Please be aware that the way we get the list of managed properties is not reliable and you might have to enter the property name manually. To add other managed properties to the list, clear out the dropdown list field and manually type or paste the name of your managed property and press ENTER . This will add it to the list of selected properties in the query. Pasting a comma separated list of property names also work. You can validate the property is working by using the Debug layout. If a list of properties is not shown, enter manually. Title Path DefaultEncodingURL FileType HitHighlightedProperties HitHighlightedSummary AuthorOWSUSER owstaxidmetadataalltagsinfo Created UniqueID NormSiteID NormListID NormUniqueID ContentTypeId UserName JobTitle WorkPhone SPSiteURL SiteTitle CreatedBy HtmlFileType SiteLogo Sort settings Configure the sort settings of the data source. Properties listed in the dropdown are all static properties marked as 'Sortable' in the SharePoint search schema . However, it does not list all possible RefinableXXX or aliases fields. To use them, you must enter the value manually and press 'Enter' to validate. For a particular field, you can define if it should be used for initial sort (i.e. when the results are loaded for the first time) or be only available for users in the sort control (i.e. after the results are loaded). The sort control does not consider default sort fields (i.e. select them by default) and you can only sort on a single field at a time according the fields you defined . If no user sort fields are defined in the configuration, the sort control won't be displayed. None. Refinement filters The initial refinement filters to apply to the query. Filters has to be written using FQL ( Fast Query Language ) (e.g. FileType:equals(\"docx\") ). They will be applied every time to the current search query regardless selected filters from connected Web Parts. Note: for string expressions, use \" instead of ' . None. Language of the search request The language to use for the search request. By default the search request will be made using the current user interface language. This parameter is mainly used to process diacritics, plurals, etc. correctly according to the language. Current UI language. Enable query rules Whether or not apply SharePoint query rules. False. Trim duplicates A Boolean value that specifies whether duplicate items are removed from the results. False. Enable audience targeting Whether or not results should be targeted according to the audiences that the current user belongs to. More information about modern audiences and how to configure them . False. Enable localization If enabled, the Web Part will try to translate the taxonomy term IDs found in result item properties and refinement values to their corresponding label according to the curent UI language. To get it work, you must map a new refinable managed property associated with ows_taxId_ crawled property and turn this toggle 'on': If enabled and depending on how many items are currently being displayed, this could slightly decrease the loading performance. To use translated values in your template, you must use the ' Auto + <property_name> ' property format instead of the original property name . For instance, to use translated values of the ' owstaxidmetadataalltagsinfo ' property, you must use the ' Auto owstaxidmetadataalltagsinfo' auto created property. False. Hit-highlighted properties The list of SharePoint managed properties (separated by a comma) to return hit highlighted information (whether the search query match each specified managed property or not). Note: HitHighlightedProperties will be null if there is a field in Hit-highlighted properties doesn't exist in Selected properties None. Collapse specification The CollapseSpecification property takes a Spec parameter that can contain multiple fields separated either by a comma or a space, which evaluated together specify a set of criteria used for collapsing. More information about the CollapseSpecification . None.","title":"Sharepoint search"},{"location":"usage/search-results/data-sources/sharepoint-search/#source-configuration","text":"Setting Description Default value Query text The input query text to pass to the search engine. This setting is not configurable directly in the data source options. To enable it, go to the third configuration page of the Web Part and select either a static or dynamic value (Ex: from a connected search box Web Part). See the connection documentation for more information on how to configure this option. This value can be then used in the Query template using the {searchTerms} token. Also this value can be a Keyword Query Language expression (KQL) . None. Query template The search query template to use. It allows you to use dynamic tokens according to the context or specify conditions that should always apply to the query. {searchTerms} Result source ID Can be either a built-in result source ID listed in the dropdown, or a custom result source that you specify. Type the GUID of the result source, or the SCOPE and NAME , separated by \\| (pipe character). For this to take effect, you must press 'Enter' to save the value. Valid scopes are SPSiteSubscription , SPSite , SPWeb . Examples: SPWeb \\| Local News SPSite \\| Contracts SPSiteSubscription \\| Intranet LocalSharePointResults Selected properties The SharePoint managed properties to retrieve from the results. They can be used with the same name in layouts and slots afterwards. Please be aware that the way we get the list of managed properties is not reliable and you might have to enter the property name manually. To add other managed properties to the list, clear out the dropdown list field and manually type or paste the name of your managed property and press ENTER . This will add it to the list of selected properties in the query. Pasting a comma separated list of property names also work. You can validate the property is working by using the Debug layout. If a list of properties is not shown, enter manually. Title Path DefaultEncodingURL FileType HitHighlightedProperties HitHighlightedSummary AuthorOWSUSER owstaxidmetadataalltagsinfo Created UniqueID NormSiteID NormListID NormUniqueID ContentTypeId UserName JobTitle WorkPhone SPSiteURL SiteTitle CreatedBy HtmlFileType SiteLogo Sort settings Configure the sort settings of the data source. Properties listed in the dropdown are all static properties marked as 'Sortable' in the SharePoint search schema . However, it does not list all possible RefinableXXX or aliases fields. To use them, you must enter the value manually and press 'Enter' to validate. For a particular field, you can define if it should be used for initial sort (i.e. when the results are loaded for the first time) or be only available for users in the sort control (i.e. after the results are loaded). The sort control does not consider default sort fields (i.e. select them by default) and you can only sort on a single field at a time according the fields you defined . If no user sort fields are defined in the configuration, the sort control won't be displayed. None. Refinement filters The initial refinement filters to apply to the query. Filters has to be written using FQL ( Fast Query Language ) (e.g. FileType:equals(\"docx\") ). They will be applied every time to the current search query regardless selected filters from connected Web Parts. Note: for string expressions, use \" instead of ' . None. Language of the search request The language to use for the search request. By default the search request will be made using the current user interface language. This parameter is mainly used to process diacritics, plurals, etc. correctly according to the language. Current UI language. Enable query rules Whether or not apply SharePoint query rules. False. Trim duplicates A Boolean value that specifies whether duplicate items are removed from the results. False. Enable audience targeting Whether or not results should be targeted according to the audiences that the current user belongs to. More information about modern audiences and how to configure them . False. Enable localization If enabled, the Web Part will try to translate the taxonomy term IDs found in result item properties and refinement values to their corresponding label according to the curent UI language. To get it work, you must map a new refinable managed property associated with ows_taxId_ crawled property and turn this toggle 'on': If enabled and depending on how many items are currently being displayed, this could slightly decrease the loading performance. To use translated values in your template, you must use the ' Auto + <property_name> ' property format instead of the original property name . For instance, to use translated values of the ' owstaxidmetadataalltagsinfo ' property, you must use the ' Auto owstaxidmetadataalltagsinfo' auto created property. False. Hit-highlighted properties The list of SharePoint managed properties (separated by a comma) to return hit highlighted information (whether the search query match each specified managed property or not). Note: HitHighlightedProperties will be null if there is a field in Hit-highlighted properties doesn't exist in Selected properties None. Collapse specification The CollapseSpecification property takes a Spec parameter that can contain multiple fields separated either by a comma or a space, which evaluated together specify a set of criteria used for collapsing. More information about the CollapseSpecification . None.","title":"Source configuration"},{"location":"usage/search-results/layouts/","text":"Builtin layouts \u00b6 By default, the following layouts are provided: Be careful, when you switch the layout in the property pane, all the previous layout properties are lost. We do this to avoid polluting the Web Part property bag with multiple useless configurations. Cards \u00b6 The 'cards' layout allows you to display items as tiles, just like the native 'Highlighted Content' SharePoint Web Part. Setting Description Default value Manage card fields Allows you to define you own values for card placeholder fields. By default, the document card fields come with predefined mappings but you can set your own. As a field value, you can choose either a field property value (from the list or as free text) and without any transformation or use an Handlebars expression by clicking on the checkbox next to it. In this case, all helpers from the main template are available. Also, if the field doesn't have the 'Allow HTML' indication flag enabled, it means the value will be always interpreted as text, regardless if you set an HTML value. Otherwise, your value will be interpreted as HTML for those fields (ex: ' Location ' and ' Tags ' placeholder fields). For HTML fields you can use the special variable @root.theme to use theme colors (ex: @root.theme.palette.themePrimary ) or @root.slots.<SlotName> to access slot value. If you don't set a value for those fields (i.e an empty value), they won't appear in the UI: . Enable result preview If enabled, display a callout with an interactive preview of the document based on the value specified value for the PreviewUrl current data source slot . False. Show file icon Hide or display the file icon for the result card. The file icon is determined using the FileType slot . True. Compact mode Display cards as compact. False. Preferred number of cards per row Specify the preferred number of cards to display per row when the required width space is available . The Web Part will always adjust the number of possible tiles to display depending the available width. It means that if you set this value to '3' but you display the Web Part in small column, only 1 tile will be displayed. 3. Enable download Enable download of selected files. Requires Allow items selection to be enabled and supports both single and multiple selection. If single selection is enabled the selected file will be downloaded as is. If multiple selection is enabled the selected files and folders will be downloaded in a single zip file like in SharePoint document libraries. Requires SPWebUrl , ContentTypeId , NormListID and NormUniqueID to be selected in Selected properties . false Details List \u00b6 The 'details list' layout allows you to display items as a structured list, the same way as a SharePoint document library or list. Setting Description Default value Manage columns Allows you to build you own table view by adding or removing columns dynamically. For each column, you get the following options: Sort order : the order of the column in the table. Column name : the column friendly name to display. Column value : you can choose here either a field from the data source current results set (from the list or as free text) without any transformation or use an Handlebars expression by clicking on the checkbox next to it. In this case, all Handlebars helpers from the main template are available and you can also add you own HTML markup in the column value. For HTML fields you can use the special variable @root.theme to use theme colors (ex: @root.theme.palette.themePrimary ). You can specify a different field for sorting when using an Handlebars expression by specifying the field from the separate dropdown. Minimum width in px : the minimum width of the column in pixels. Maximum width in px : the maximum width of the column in pixels. Sortable : allows you to sort column values according to the data source sort settings . It means you must first configure the sort setting at data source level with option 'User sort' to true to see them in the details list columns configuration. Sort is perfromed one column at a time. Resizable : allows you to resize the column dynamically in display mode. Multiline : if the column column should be multiline. By default only ellipsis (...) will be display for larger text. Show file icon Hide or display the file icon in the first column. True. Compact mode Display the details list in compact mode. False. Enable grouping Display a grouped list, grouped by the specified column. You may also specify a list of additional columns to group by in a hierarchy of groups. False. Enable sticky header Display the details list with a sticky header that will stay in place when scrolling. Specify the desired height for the view (in pixels) and then specify the desired items per page in Number of items per page under Paging options and all items on the page will be scrollable within the view. False. Enable download Enable download of selected files. Requires Allow items selection to be enabled and supports both single and multiple selection. If single selection is enabled the selected file will be downloaded as is. If multiple selection is enabled the selected files and folders will be downloaded in a single zip file like in SharePoint document libraries. Requires SPWebUrl , ContentTypeId , NormListID and NormUniqueID to be selected in Selected properties . False. Slider \u00b6 The 'slider' layout allows you to display data as as dynamic slider (i.e caroussel). Setting Description Default value Auto play If enabled, slides move automatically every X seconds. True. Auto play duration Move elements every X seconds. 3 seconds. Pause on hover If enabled, pause the slider on mouse hover. True. Number of elements to group together in slides Groups cells together in slides. 3. Show page dots Enable or disable slider navigation. You can adjust the dots position by updating the .flickity-page-dots CSS class. True. Infinite scrolling Enable or disable infinite scrolling on the carousel. False. Slide height (in px) Dynamically set the slides height to adjust your results. 360px. Slide width (in px) Dynamically set the slides width to adjust your results. 318px. Enable download Enable download of selected files. Requires Allow items selection to be enabled and supports both single and multiple selection. If single selection is enabled the selected file will be downloaded as is. If multiple selection is enabled the selected files and folders will be downloaded in a single zip file like in SharePoint document libraries. Requires SPWebUrl , ContentTypeId , NormListID and NormUniqueID to be selected in Selected properties . False. Simple list \u00b6 The 'simple list' layout display items as a simple list with larger rows, like a search engine results display. Setting Description Default value Show file icon Hide or display the file icon for the result card. The file icon is determined using the FileType slot . True. Show thumbnail If enabled, display a thumbnail for the itme + a callout with an interactive preview of the document on click based on the value specified value for the PreviewUrl current data source slot . False. Enable download Enable download of selected files. Requires Allow items selection to be enabled and supports both single and multiple selection. If single selection is enabled the selected file will be downloaded as is. If multiple selection is enabled the selected files and folders will be downloaded in a single zip file like in SharePoint document libraries. Requires SPWebUrl , ContentTypeId , NormListID and NormUniqueID to be selected in Selected properties . False. People \u00b6 The 'people' layout displays a list of persons with additional information. Typically, this layout is well suited for a people directory. By default, the user profile pictures are fetched from the SharePoint User Profile Service. If your user pictures are stored in Active Directoy, make sure you synchronized them with SharePoint User Profile Service. Otherwise, a placeholder image will be displayed. Setting Description Default value Manage people fields Allows you to define you own values for people placeholder fields. As a field value, you can choose either a field property value (from the list or as free text) and without any transformation or use an Handlebars expression by clicking on the checkbox next to it. In this case, all helpers from the main template are available. Also, if the field doesn't have the 'Allow HTML' indication flag enabled, it means the value will be always interpreted as text, regardless if you set an HTML value. Otherwise, your value will be interpreted as HTML for those fields (ex: ' Primary text ' placeholder field). For HTML fields you can use the special variable @root.theme to use theme colors (ex: @root.theme.palette.themePrimary ) or @root.slots.<SlotName> to access slot value. If you don't set a value for those fields (i.e an empty value), they won't appear in the UI. The UPN -field is necessary for displaying the native SharePoint persona card (LPC) on hover. If it contains an empty value, the persona card will not appear. If it contains an invalid value (e.g. a non-existing UPN), an empty persona card will be shown. Show persona card on hover (LPC) If enabled, show a person card on hover for the curren item using the native SharePoint implementation. Show persona card on hover If enabled, show a person card on hover for the current item. This feature uses Microsoft Graph and Microsoft Graph Toolkit to display information about the user and needs the following API permissions in your tenant to work: User.Read People.Read Contacts.Read User.Read.All If these permissions are not set, the card won't appear . You can use PnP Office 365 CLI to add correct permissions for this feature: $m365 spo serviceprincipal grant add --resource '<aad_app_display_name>' --scope 'user_impersonation' . Refer to the section below about persona hover card customization . Show presence If enabled, the person's presence-information will be displayed in the bottom right corner of the user's profile picture. This feature uses Microsoft Graph and needs the API permission 'Presence.Read.All' in your tenant to work. Component size The size of the person item (not only the picture). The more the size is and the more information will be displayed for each item and vice versa. Persona hover card \u00b6 Activating this option may slightly reduce loading performances because the user information are fecthed individually for each user (i.e result). This option shouldn't be used with large page count. Microsoft Graph Toolkit \u00b6 The hover card uses Microsoft Graph Toolkit. This means you can add additional information providing your own template like this: < mgt-person-card inherit-details > < template data-type = \"additional-details\" > < h3 > Stuffed Animal Friends: </ h3 > < ul > < li > Giraffe </ li > < li > lion </ li > < li > Rabbit </ li > </ ul > </ template > </ mgt-person-card > More information here . Debug \u00b6 The 'debug' layout allows you to see all relevant data used by layout templates or data sources during render. The template context object exposes the following properties: \"paging\" : { \"currentPageNumber\" : \"<The current selected page number>\" }, \"filters\" : { \"selectedFilters\" : \"<List of currently selected filters>\" , \"filterOperator\" : \"<Operator to use between filters>\" , \"instanceId\" : \"<The connected Filters Web Part instance ID>\" , \"filtersConfiguration\" : \"<The filters configuration>\" }, \"inputQueryText\" : \"<The current input query text (Ex: search box text)>\" , \"slots\" : \"<Hashtable of configured slots for the current data source. Usage: {{slot item @root.slots}} >\" , \"theme\" : \"<Current theme variables>\" , \"properties\" : \"<Web Part properties from property bag>\" , \"context\" : { \"site\" : \"<Contextual information for the SharePoint site collection that is hosting the page>\" , \"web\" : \"<Contextual information for the SharePoint web that is hosting the page>\" , \"list\" : \"<Contextual information for the SharePoint list that is hosting the page>\" , \"listItem\" : \"<Contextual information for the SharePoint list item that is hosting the page>\" , \"cultureInfo\" : \"<It provides culture info for the current user of the application>\" , \"user\" : \"<It provides contextual information for the SharePoint user that is accessing the page>\" }, \"data\" : \"<The data source data>\" , \"instanceId\" : \"<The Web Part instance ID>\" , \"utils\" : { \"defaultImage\" : \"<The default image content to display when no thummbnail is available (Base64)>\" } Custom \u00b6 The 'Custom' layout is a minimal layout to start with if you want to create your own customized UI from scratch. You can also start from an existing layout by first selecting it, and then click {} next to the Edit results template field. This will copy the selected template and allow you to make modifications as needed. Updating a builtin layout (ex: 'Cards', 'Detail List', etc.) will automatically switch the selected layout to 'Custom' with your modifications as content. All previous custom layout content will be overwritten . You have also the ability to use an external .html file to centralize your customizations. This file must be stored in an accessible location for uses (ex: a SharePoint document library with 'Read' permissions for concerned users). Unless you specify an external file, the template content is stored in the Web Part property bag. Updating the layout HTML template is a good option for minor UI updates (Ex: add a link, update colors, etc.). For more control over the UI, you may want to use the extensibility library feature. Common settings \u00b6 For all layouts, some common settings are available: Setting Description Default value Allow items selection If enabled, allow items to be selected in default layouts. See documentation for usage. Disabled. Allow multiple selection If the item selection is allowed, specify if users can select multiple items Disabled. Preserve selection on empty click If the item selection is allowed, specify if a click outside of the selection zone should clear the selection Disabled. Hide this web part if there's nothing to show If there is no results, the Web Part will remain blank in display mode (title and 'See all' link included). In edit mode, you will see a message indicating there is no results. Disabled. Show results count Hide or display the results count for the current query. Enabled. Use Microsoft Graph Toolkit Enable or disable the Microsoft Graph Toolkit to be used in Handlebars template. Refer to the MGT documentation to see available components. Result types \u00b6 The result types feature gives you the ability to apply a conditional rendering at item level according to data source field values. Not all layouts support the result types feature (ex: Details lsit and slider layouts). Example Given the following conditions, we apply a border with a specific color for each: The result would be like this: The following operators are supported: Equals Not equals Contains StartsWith Greater Or Equal Less Or Equal Less than Greater than Is not null In case you use a custom template, you can still benefit from this feature following this markup: {{#> resultTypes}} {{!-- The block below will be used as default item template if no result types matched --}} < div class = \"template_result\" > <!-- Your default template markup --> </ div > {{/resultTypes}} Handlebars partials are used behind the scenes and conditions are built dynamically using a recursive if/else structure.","title":"Layouts"},{"location":"usage/search-results/layouts/#builtin-layouts","text":"By default, the following layouts are provided: Be careful, when you switch the layout in the property pane, all the previous layout properties are lost. We do this to avoid polluting the Web Part property bag with multiple useless configurations.","title":"Builtin layouts"},{"location":"usage/search-results/layouts/#cards","text":"The 'cards' layout allows you to display items as tiles, just like the native 'Highlighted Content' SharePoint Web Part. Setting Description Default value Manage card fields Allows you to define you own values for card placeholder fields. By default, the document card fields come with predefined mappings but you can set your own. As a field value, you can choose either a field property value (from the list or as free text) and without any transformation or use an Handlebars expression by clicking on the checkbox next to it. In this case, all helpers from the main template are available. Also, if the field doesn't have the 'Allow HTML' indication flag enabled, it means the value will be always interpreted as text, regardless if you set an HTML value. Otherwise, your value will be interpreted as HTML for those fields (ex: ' Location ' and ' Tags ' placeholder fields). For HTML fields you can use the special variable @root.theme to use theme colors (ex: @root.theme.palette.themePrimary ) or @root.slots.<SlotName> to access slot value. If you don't set a value for those fields (i.e an empty value), they won't appear in the UI: . Enable result preview If enabled, display a callout with an interactive preview of the document based on the value specified value for the PreviewUrl current data source slot . False. Show file icon Hide or display the file icon for the result card. The file icon is determined using the FileType slot . True. Compact mode Display cards as compact. False. Preferred number of cards per row Specify the preferred number of cards to display per row when the required width space is available . The Web Part will always adjust the number of possible tiles to display depending the available width. It means that if you set this value to '3' but you display the Web Part in small column, only 1 tile will be displayed. 3. Enable download Enable download of selected files. Requires Allow items selection to be enabled and supports both single and multiple selection. If single selection is enabled the selected file will be downloaded as is. If multiple selection is enabled the selected files and folders will be downloaded in a single zip file like in SharePoint document libraries. Requires SPWebUrl , ContentTypeId , NormListID and NormUniqueID to be selected in Selected properties . false","title":"Cards"},{"location":"usage/search-results/layouts/#details-list","text":"The 'details list' layout allows you to display items as a structured list, the same way as a SharePoint document library or list. Setting Description Default value Manage columns Allows you to build you own table view by adding or removing columns dynamically. For each column, you get the following options: Sort order : the order of the column in the table. Column name : the column friendly name to display. Column value : you can choose here either a field from the data source current results set (from the list or as free text) without any transformation or use an Handlebars expression by clicking on the checkbox next to it. In this case, all Handlebars helpers from the main template are available and you can also add you own HTML markup in the column value. For HTML fields you can use the special variable @root.theme to use theme colors (ex: @root.theme.palette.themePrimary ). You can specify a different field for sorting when using an Handlebars expression by specifying the field from the separate dropdown. Minimum width in px : the minimum width of the column in pixels. Maximum width in px : the maximum width of the column in pixels. Sortable : allows you to sort column values according to the data source sort settings . It means you must first configure the sort setting at data source level with option 'User sort' to true to see them in the details list columns configuration. Sort is perfromed one column at a time. Resizable : allows you to resize the column dynamically in display mode. Multiline : if the column column should be multiline. By default only ellipsis (...) will be display for larger text. Show file icon Hide or display the file icon in the first column. True. Compact mode Display the details list in compact mode. False. Enable grouping Display a grouped list, grouped by the specified column. You may also specify a list of additional columns to group by in a hierarchy of groups. False. Enable sticky header Display the details list with a sticky header that will stay in place when scrolling. Specify the desired height for the view (in pixels) and then specify the desired items per page in Number of items per page under Paging options and all items on the page will be scrollable within the view. False. Enable download Enable download of selected files. Requires Allow items selection to be enabled and supports both single and multiple selection. If single selection is enabled the selected file will be downloaded as is. If multiple selection is enabled the selected files and folders will be downloaded in a single zip file like in SharePoint document libraries. Requires SPWebUrl , ContentTypeId , NormListID and NormUniqueID to be selected in Selected properties . False.","title":"Details List"},{"location":"usage/search-results/layouts/#slider","text":"The 'slider' layout allows you to display data as as dynamic slider (i.e caroussel). Setting Description Default value Auto play If enabled, slides move automatically every X seconds. True. Auto play duration Move elements every X seconds. 3 seconds. Pause on hover If enabled, pause the slider on mouse hover. True. Number of elements to group together in slides Groups cells together in slides. 3. Show page dots Enable or disable slider navigation. You can adjust the dots position by updating the .flickity-page-dots CSS class. True. Infinite scrolling Enable or disable infinite scrolling on the carousel. False. Slide height (in px) Dynamically set the slides height to adjust your results. 360px. Slide width (in px) Dynamically set the slides width to adjust your results. 318px. Enable download Enable download of selected files. Requires Allow items selection to be enabled and supports both single and multiple selection. If single selection is enabled the selected file will be downloaded as is. If multiple selection is enabled the selected files and folders will be downloaded in a single zip file like in SharePoint document libraries. Requires SPWebUrl , ContentTypeId , NormListID and NormUniqueID to be selected in Selected properties . False.","title":"Slider"},{"location":"usage/search-results/layouts/#simple-list","text":"The 'simple list' layout display items as a simple list with larger rows, like a search engine results display. Setting Description Default value Show file icon Hide or display the file icon for the result card. The file icon is determined using the FileType slot . True. Show thumbnail If enabled, display a thumbnail for the itme + a callout with an interactive preview of the document on click based on the value specified value for the PreviewUrl current data source slot . False. Enable download Enable download of selected files. Requires Allow items selection to be enabled and supports both single and multiple selection. If single selection is enabled the selected file will be downloaded as is. If multiple selection is enabled the selected files and folders will be downloaded in a single zip file like in SharePoint document libraries. Requires SPWebUrl , ContentTypeId , NormListID and NormUniqueID to be selected in Selected properties . False.","title":"Simple list"},{"location":"usage/search-results/layouts/#people","text":"The 'people' layout displays a list of persons with additional information. Typically, this layout is well suited for a people directory. By default, the user profile pictures are fetched from the SharePoint User Profile Service. If your user pictures are stored in Active Directoy, make sure you synchronized them with SharePoint User Profile Service. Otherwise, a placeholder image will be displayed. Setting Description Default value Manage people fields Allows you to define you own values for people placeholder fields. As a field value, you can choose either a field property value (from the list or as free text) and without any transformation or use an Handlebars expression by clicking on the checkbox next to it. In this case, all helpers from the main template are available. Also, if the field doesn't have the 'Allow HTML' indication flag enabled, it means the value will be always interpreted as text, regardless if you set an HTML value. Otherwise, your value will be interpreted as HTML for those fields (ex: ' Primary text ' placeholder field). For HTML fields you can use the special variable @root.theme to use theme colors (ex: @root.theme.palette.themePrimary ) or @root.slots.<SlotName> to access slot value. If you don't set a value for those fields (i.e an empty value), they won't appear in the UI. The UPN -field is necessary for displaying the native SharePoint persona card (LPC) on hover. If it contains an empty value, the persona card will not appear. If it contains an invalid value (e.g. a non-existing UPN), an empty persona card will be shown. Show persona card on hover (LPC) If enabled, show a person card on hover for the curren item using the native SharePoint implementation. Show persona card on hover If enabled, show a person card on hover for the current item. This feature uses Microsoft Graph and Microsoft Graph Toolkit to display information about the user and needs the following API permissions in your tenant to work: User.Read People.Read Contacts.Read User.Read.All If these permissions are not set, the card won't appear . You can use PnP Office 365 CLI to add correct permissions for this feature: $m365 spo serviceprincipal grant add --resource '<aad_app_display_name>' --scope 'user_impersonation' . Refer to the section below about persona hover card customization . Show presence If enabled, the person's presence-information will be displayed in the bottom right corner of the user's profile picture. This feature uses Microsoft Graph and needs the API permission 'Presence.Read.All' in your tenant to work. Component size The size of the person item (not only the picture). The more the size is and the more information will be displayed for each item and vice versa.","title":"People"},{"location":"usage/search-results/layouts/#persona-hover-card","text":"Activating this option may slightly reduce loading performances because the user information are fecthed individually for each user (i.e result). This option shouldn't be used with large page count.","title":"Persona hover card"},{"location":"usage/search-results/layouts/#microsoft-graph-toolkit","text":"The hover card uses Microsoft Graph Toolkit. This means you can add additional information providing your own template like this: < mgt-person-card inherit-details > < template data-type = \"additional-details\" > < h3 > Stuffed Animal Friends: </ h3 > < ul > < li > Giraffe </ li > < li > lion </ li > < li > Rabbit </ li > </ ul > </ template > </ mgt-person-card > More information here .","title":"Microsoft Graph Toolkit"},{"location":"usage/search-results/layouts/#debug","text":"The 'debug' layout allows you to see all relevant data used by layout templates or data sources during render. The template context object exposes the following properties: \"paging\" : { \"currentPageNumber\" : \"<The current selected page number>\" }, \"filters\" : { \"selectedFilters\" : \"<List of currently selected filters>\" , \"filterOperator\" : \"<Operator to use between filters>\" , \"instanceId\" : \"<The connected Filters Web Part instance ID>\" , \"filtersConfiguration\" : \"<The filters configuration>\" }, \"inputQueryText\" : \"<The current input query text (Ex: search box text)>\" , \"slots\" : \"<Hashtable of configured slots for the current data source. Usage: {{slot item @root.slots}} >\" , \"theme\" : \"<Current theme variables>\" , \"properties\" : \"<Web Part properties from property bag>\" , \"context\" : { \"site\" : \"<Contextual information for the SharePoint site collection that is hosting the page>\" , \"web\" : \"<Contextual information for the SharePoint web that is hosting the page>\" , \"list\" : \"<Contextual information for the SharePoint list that is hosting the page>\" , \"listItem\" : \"<Contextual information for the SharePoint list item that is hosting the page>\" , \"cultureInfo\" : \"<It provides culture info for the current user of the application>\" , \"user\" : \"<It provides contextual information for the SharePoint user that is accessing the page>\" }, \"data\" : \"<The data source data>\" , \"instanceId\" : \"<The Web Part instance ID>\" , \"utils\" : { \"defaultImage\" : \"<The default image content to display when no thummbnail is available (Base64)>\" }","title":"Debug"},{"location":"usage/search-results/layouts/#custom","text":"The 'Custom' layout is a minimal layout to start with if you want to create your own customized UI from scratch. You can also start from an existing layout by first selecting it, and then click {} next to the Edit results template field. This will copy the selected template and allow you to make modifications as needed. Updating a builtin layout (ex: 'Cards', 'Detail List', etc.) will automatically switch the selected layout to 'Custom' with your modifications as content. All previous custom layout content will be overwritten . You have also the ability to use an external .html file to centralize your customizations. This file must be stored in an accessible location for uses (ex: a SharePoint document library with 'Read' permissions for concerned users). Unless you specify an external file, the template content is stored in the Web Part property bag. Updating the layout HTML template is a good option for minor UI updates (Ex: add a link, update colors, etc.). For more control over the UI, you may want to use the extensibility library feature.","title":"Custom"},{"location":"usage/search-results/layouts/#common-settings","text":"For all layouts, some common settings are available: Setting Description Default value Allow items selection If enabled, allow items to be selected in default layouts. See documentation for usage. Disabled. Allow multiple selection If the item selection is allowed, specify if users can select multiple items Disabled. Preserve selection on empty click If the item selection is allowed, specify if a click outside of the selection zone should clear the selection Disabled. Hide this web part if there's nothing to show If there is no results, the Web Part will remain blank in display mode (title and 'See all' link included). In edit mode, you will see a message indicating there is no results. Disabled. Show results count Hide or display the results count for the current query. Enabled. Use Microsoft Graph Toolkit Enable or disable the Microsoft Graph Toolkit to be used in Handlebars template. Refer to the MGT documentation to see available components.","title":"Common settings"},{"location":"usage/search-results/layouts/#result-types","text":"The result types feature gives you the ability to apply a conditional rendering at item level according to data source field values. Not all layouts support the result types feature (ex: Details lsit and slider layouts). Example Given the following conditions, we apply a border with a specific color for each: The result would be like this: The following operators are supported: Equals Not equals Contains StartsWith Greater Or Equal Less Or Equal Less than Greater than Is not null In case you use a custom template, you can still benefit from this feature following this markup: {{#> resultTypes}} {{!-- The block below will be used as default item template if no result types matched --}} < div class = \"template_result\" > <!-- Your default template markup --> </ div > {{/resultTypes}} Handlebars partials are used behind the scenes and conditions are built dynamically using a recursive if/else structure.","title":"Result types"},{"location":"usage/search-results/layouts/cards/","text":"The 'cards' layout allows you to display items as tiles, just like the native 'Highlighted Content' SharePoint Web Part. Setting Description Default value Manage card fields Allows you to define you own values for card placeholder fields. By default, the document card fields come with predefined mappings but you can set your own. As a field value, you can choose either a field property value (from the list or as free text) and without any transformation or use an Handlebars expression by clicking on the checkbox next to it. In this case, all helpers from the main template are available. Also, if the field doesn't have the 'Allow HTML' indication flag enabled, it means the value will be always interpreted as text, regardless if you set an HTML value. Otherwise, your value will be interpreted as HTML for those fields (ex: ' Location ' and ' Tags ' placeholder fields). For HTML fields you can use the special variable @root.theme to use theme colors (ex: @root.theme.palette.themePrimary ) or @root.slots.<SlotName> to access slot value. If you don't set a value for those fields (i.e an empty value), they won't appear in the UI: . Enable result preview If enabled, display a callout with an interactive preview of the document based on the value specified value for the PreviewUrl current data source slot . False. Show file icon Hide or display the file icon for the result card. The file icon is determined using the FileType slot . True. Compact mode Display cards as compact. False. Preferred number of cards per row Specify the preferred number of cards to display per row when the required width space is available . The Web Part will always adjust the number of possible tiles to display depending the available width. It means that if you set this value to '3' but you display the Web Part in small column, only 1 tile will be displayed. 3. Enable download Enable download of selected files. Requires Allow items selection to be enabled and supports both single and multiple selection. If single selection is enabled the selected file will be downloaded as is. If multiple selection is enabled the selected files and folders will be downloaded in a single zip file like in SharePoint document libraries. Requires SPWebUrl , ContentTypeId , NormListID and NormUniqueID to be selected in Selected properties . false","title":"Cards"},{"location":"usage/search-results/layouts/custom/","text":"The 'Custom' layout is a minimal layout to start with if you want to create your own customized UI from scratch. You can also start from an existing layout by first selecting it, and then click {} next to the Edit results template field. This will copy the selected template and allow you to make modifications as needed. Updating a builtin layout (ex: 'Cards', 'Detail List', etc.) will automatically switch the selected layout to 'Custom' with your modifications as content. All previous custom layout content will be overwritten . You have also the ability to use an external .html file to centralize your customizations. This file must be stored in an accessible location for uses (ex: a SharePoint document library with 'Read' permissions for concerned users). Unless you specify an external file, the template content is stored in the Web Part property bag. Updating the layout HTML template is a good option for minor UI updates (Ex: add a link, update colors, etc.). For more control over the UI, you may want to use the extensibility library feature.","title":"Custom"},{"location":"usage/search-results/layouts/debug/","text":"The 'debug' layout allows you to see all relevant data used by layout templates or data sources during render. The template context object exposes the following properties: \"paging\" : { \"currentPageNumber\" : \"<The current selected page number>\" }, \"filters\" : { \"selectedFilters\" : \"<List of currently selected filters>\" , \"filterOperator\" : \"<Operator to use between filters>\" , \"instanceId\" : \"<The connected Filters Web Part instance ID>\" , \"filtersConfiguration\" : \"<The filters configuration>\" }, \"inputQueryText\" : \"<The current input query text (Ex: search box text)>\" , \"slots\" : \"<Hashtable of configured slots for the current data source. Usage: {{slot item @root.slots}} >\" , \"theme\" : \"<Current theme variables>\" , \"properties\" : \"<Web Part properties from property bag>\" , \"context\" : { \"site\" : \"<Contextual information for the SharePoint site collection that is hosting the page>\" , \"web\" : \"<Contextual information for the SharePoint web that is hosting the page>\" , \"list\" : \"<Contextual information for the SharePoint list that is hosting the page>\" , \"listItem\" : \"<Contextual information for the SharePoint list item that is hosting the page>\" , \"cultureInfo\" : \"<It provides culture info for the current user of the application>\" , \"user\" : \"<It provides contextual information for the SharePoint user that is accessing the page>\" }, \"data\" : \"<The data source data>\" , \"instanceId\" : \"<The Web Part instance ID>\" , \"utils\" : { \"defaultImage\" : \"<The default image content to display when no thummbnail is available (Base64)>\" }","title":"Debug"},{"location":"usage/search-results/layouts/details-list/","text":"The 'details list' layout allows you to display items as a structured list, the same way as a SharePoint document library or list. Setting Description Default value Manage columns Allows you to build you own table view by adding or removing columns dynamically. For each column, you get the following options: Sort order : the order of the column in the table. Column name : the column friendly name to display. Column value : you can choose here either a field from the data source current results set (from the list or as free text) without any transformation or use an Handlebars expression by clicking on the checkbox next to it. In this case, all Handlebars helpers from the main template are available and you can also add you own HTML markup in the column value. For HTML fields you can use the special variable @root.theme to use theme colors (ex: @root.theme.palette.themePrimary ). You can specify a different field for sorting when using an Handlebars expression by specifying the field from the separate dropdown. Minimum width in px : the minimum width of the column in pixels. Maximum width in px : the maximum width of the column in pixels. Sortable : allows you to sort column values according to the data source sort settings . It means you must first configure the sort setting at data source level with option 'User sort' to true to see them in the details list columns configuration. Sort is perfromed one column at a time. Resizable : allows you to resize the column dynamically in display mode. Multiline : if the column column should be multiline. By default only ellipsis (...) will be display for larger text. Show file icon Hide or display the file icon in the first column. True. Compact mode Display the details list in compact mode. False. Enable grouping Display a grouped list, grouped by the specified column. You may also specify a list of additional columns to group by in a hierarchy of groups. False. Enable sticky header Display the details list with a sticky header that will stay in place when scrolling. Specify the desired height for the view (in pixels) and then specify the desired items per page in Number of items per page under Paging options and all items on the page will be scrollable within the view. False. Enable download Enable download of selected files. Requires Allow items selection to be enabled and supports both single and multiple selection. If single selection is enabled the selected file will be downloaded as is. If multiple selection is enabled the selected files and folders will be downloaded in a single zip file like in SharePoint document libraries. Requires SPWebUrl , ContentTypeId , NormListID and NormUniqueID to be selected in Selected properties . False.","title":"Details list"},{"location":"usage/search-results/layouts/people/","text":"The 'people' layout displays a list of persons with additional information. Typically, this layout is well suited for a people directory. By default, the user profile pictures are fetched from the SharePoint User Profile Service. If your user pictures are stored in Active Directoy, make sure you synchronized them with SharePoint User Profile Service. Otherwise, a placeholder image will be displayed. Setting Description Default value Manage people fields Allows you to define you own values for people placeholder fields. As a field value, you can choose either a field property value (from the list or as free text) and without any transformation or use an Handlebars expression by clicking on the checkbox next to it. In this case, all helpers from the main template are available. Also, if the field doesn't have the 'Allow HTML' indication flag enabled, it means the value will be always interpreted as text, regardless if you set an HTML value. Otherwise, your value will be interpreted as HTML for those fields (ex: ' Primary text ' placeholder field). For HTML fields you can use the special variable @root.theme to use theme colors (ex: @root.theme.palette.themePrimary ) or @root.slots.<SlotName> to access slot value. If you don't set a value for those fields (i.e an empty value), they won't appear in the UI. The UPN -field is necessary for displaying the native SharePoint persona card (LPC) on hover. If it contains an empty value, the persona card will not appear. If it contains an invalid value (e.g. a non-existing UPN), an empty persona card will be shown. Show persona card on hover (LPC) If enabled, show a person card on hover for the curren item using the native SharePoint implementation. Show persona card on hover If enabled, show a person card on hover for the current item. This feature uses Microsoft Graph and Microsoft Graph Toolkit to display information about the user and needs the following API permissions in your tenant to work: User.Read People.Read Contacts.Read User.Read.All If these permissions are not set, the card won't appear . You can use PnP Office 365 CLI to add correct permissions for this feature: $m365 spo serviceprincipal grant add --resource '<aad_app_display_name>' --scope 'user_impersonation' . Refer to the section below about persona hover card customization . Show presence If enabled, the person's presence-information will be displayed in the bottom right corner of the user's profile picture. This feature uses Microsoft Graph and needs the API permission 'Presence.Read.All' in your tenant to work. Component size The size of the person item (not only the picture). The more the size is and the more information will be displayed for each item and vice versa. Persona hover card \u00b6 Activating this option may slightly reduce loading performances because the user information are fecthed individually for each user (i.e result). This option shouldn't be used with large page count. Microsoft Graph Toolkit \u00b6 The hover card uses Microsoft Graph Toolkit. This means you can add additional information providing your own template like this: < mgt-person-card inherit-details > < template data-type = \"additional-details\" > < h3 > Stuffed Animal Friends: </ h3 > < ul > < li > Giraffe </ li > < li > lion </ li > < li > Rabbit </ li > </ ul > </ template > </ mgt-person-card > More information here .","title":"People"},{"location":"usage/search-results/layouts/people/#persona-hover-card","text":"Activating this option may slightly reduce loading performances because the user information are fecthed individually for each user (i.e result). This option shouldn't be used with large page count.","title":"Persona hover card"},{"location":"usage/search-results/layouts/people/#microsoft-graph-toolkit","text":"The hover card uses Microsoft Graph Toolkit. This means you can add additional information providing your own template like this: < mgt-person-card inherit-details > < template data-type = \"additional-details\" > < h3 > Stuffed Animal Friends: </ h3 > < ul > < li > Giraffe </ li > < li > lion </ li > < li > Rabbit </ li > </ ul > </ template > </ mgt-person-card > More information here .","title":"Microsoft Graph Toolkit"},{"location":"usage/search-results/layouts/simple-list/","text":"The 'simple list' layout display items as a simple list with larger rows, like a search engine results display. Setting Description Default value Show file icon Hide or display the file icon for the result card. The file icon is determined using the FileType slot . True. Show thumbnail If enabled, display a thumbnail for the itme + a callout with an interactive preview of the document on click based on the value specified value for the PreviewUrl current data source slot . False. Enable download Enable download of selected files. Requires Allow items selection to be enabled and supports both single and multiple selection. If single selection is enabled the selected file will be downloaded as is. If multiple selection is enabled the selected files and folders will be downloaded in a single zip file like in SharePoint document libraries. Requires SPWebUrl , ContentTypeId , NormListID and NormUniqueID to be selected in Selected properties . False.","title":"Simple list"},{"location":"usage/search-results/layouts/slider/","text":"The 'slider' layout allows you to display data as as dynamic slider (i.e caroussel). Setting Description Default value Auto play If enabled, slides move automatically every X seconds. True. Auto play duration Move elements every X seconds. 3 seconds. Pause on hover If enabled, pause the slider on mouse hover. True. Number of elements to group together in slides Groups cells together in slides. 3. Show page dots Enable or disable slider navigation. You can adjust the dots position by updating the .flickity-page-dots CSS class. True. Infinite scrolling Enable or disable infinite scrolling on the carousel. False. Slide height (in px) Dynamically set the slides height to adjust your results. 360px. Slide width (in px) Dynamically set the slides width to adjust your results. 318px. Enable download Enable download of selected files. Requires Allow items selection to be enabled and supports both single and multiple selection. If single selection is enabled the selected file will be downloaded as is. If multiple selection is enabled the selected files and folders will be downloaded in a single zip file like in SharePoint document libraries. Requires SPWebUrl , ContentTypeId , NormListID and NormUniqueID to be selected in Selected properties . False.","title":"Slider"},{"location":"usage/search-results/layouts/templating/","text":"Preview behavior \u00b6 Light updates \u00b6 Advanced updates \u00b6","title":"Templating"},{"location":"usage/search-results/layouts/templating/#preview-behavior","text":"","title":"Preview behavior"},{"location":"usage/search-results/layouts/templating/#light-updates","text":"","title":"Light updates"},{"location":"usage/search-results/layouts/templating/#advanced-updates","text":"","title":"Advanced updates"},{"location":"usage/search-verticals/","text":"Search Verticals Web Part \u00b6 The 'Verticals' Web Part allows to conditionally render a 'Search Results' Web Part according to the selected vertical. It is a simple way to build a complete search center including multiple sources. Configuration \u00b6 The configuration of the 'Verticals' Web Part is fairly simple. Configure verticals \u00b6 The options for a vertical are as follow: Setting Description Tab name The vertical name (i.e. tab) Tab value The vertical value that will be sent to connected 'Search Results' Web Parts. You can use this value using the {verticals.value} token. See tokens for more info. Fluent UIFabric icon name The optional Fluent UI icon to display for the tab. Refer to Fluent UI Fabric documentation to see all available icons. Is hyperlink If checked, the tab will behave as an hyperlink meaning it won't trigger any selected event. Link URL If the tab is an hyperlink, the link URL to use. Tokens {<TokenName>} are supported here. See tokens for more info. Open behavior If the tab is an hyperlink, the opening behavior (new tab or current tab). Show link icon If the tab is an hyperlink, display or hide an icon next to the tab name indicating the tab is a link (same page or external). Audience Groups that this vertical will be visible to. If left empty the vertical will be visible for all users. Requires at least User.Read.All and GroupMember.Read.All permissions for the SharePoint Online Client Extensibility Web Application Principal.","title":"Usage"},{"location":"usage/search-verticals/#search-verticals-web-part","text":"The 'Verticals' Web Part allows to conditionally render a 'Search Results' Web Part according to the selected vertical. It is a simple way to build a complete search center including multiple sources.","title":"Search Verticals Web Part"},{"location":"usage/search-verticals/#configuration","text":"The configuration of the 'Verticals' Web Part is fairly simple.","title":"Configuration"},{"location":"usage/search-verticals/#configure-verticals","text":"The options for a vertical are as follow: Setting Description Tab name The vertical name (i.e. tab) Tab value The vertical value that will be sent to connected 'Search Results' Web Parts. You can use this value using the {verticals.value} token. See tokens for more info. Fluent UIFabric icon name The optional Fluent UI icon to display for the tab. Refer to Fluent UI Fabric documentation to see all available icons. Is hyperlink If checked, the tab will behave as an hyperlink meaning it won't trigger any selected event. Link URL If the tab is an hyperlink, the link URL to use. Tokens {<TokenName>} are supported here. See tokens for more info. Open behavior If the tab is an hyperlink, the opening behavior (new tab or current tab). Show link icon If the tab is an hyperlink, display or hide an icon next to the tab name indicating the tab is a link (same page or external). Audience Groups that this vertical will be visible to. If left empty the vertical will be visible for all users. Requires at least User.Read.All and GroupMember.Read.All permissions for the SharePoint Online Client Extensibility Web Application Principal.","title":"Configure verticals"},{"location":"v3/","text":"PnP Modern Search v3 \u00b6 PnP Modern Search v3.x deprecation v4 uses a brand new code architecture and replace the older v3 codebase . There will be no new features added to v3.x, but we will continue to provide bug fixes and minor changes as needed. As v4.x is not yet at feature parity with v3.x, you can still use the v3.x packages to meet your requirements. Also not that there is not an auto-upgrade path from v3 to v4 due to the new architecture, so you are perfectly ok to stay on the v3 version until v4 provides the features validating your upgrade. However, the main focus is on the v4 version, and new search functionality backed by the Microsoft Graph Search API will be v4 only. v3 and v4 don't share the same package name, Web Part and solution IDs meaning you can have them side by side on a page if necessary without overlap. Solution overview \u00b6 Current version \u00b6 Get the latest release at our releases page . Table of contents \u00b6 Contributors Web Parts Search Box Search Results Search Filters Search Pagination Search Verticals Templating Extensibility Library Custom Renderer Search Query Enhancer Debug locally Summary \u00b6 This solution allows you to build user friendly SharePoint search experiences using SPFx in the modern interface. The main features include: Fully customizable SharePoint search query like the good old Content Search Web Part. Can either use a static query or be connected to a search box component using SPFx dynamic data. Live templating system with Handlebar to meet your requirements in terms of UI + built-in layouts. Can also use template from an external file. Search results including previews for Office documents and Office 365 videos. Customizable refiners supporting multilingual values for taxonomy based filters. Sortable results (unique field). Refiners Web Part. SharePoint best bets support. Search query enhancement with NLP tools (like Microsoft LUIS). Extensibility model allowing to write your own components. A complete 1 hour tutorial video is available on the official SharePoint Developer blog : What's included? \u00b6 Search Web Parts \u00b6 SPFx solution search-parts including a complete set of SharePoint search Web Parts like a search results, search box, etc. See documentation . Search extensibility library \u00b6 A SPFx library component project search-extensibility-library allowing to create custom React components wrapped as web components to be included in the search results Web Part Handlebars templates when you require complex dynamic behavior at a granular component level. See documentation . Search custom renderer \u00b6 A SPFx application customizer project search-custom-renderer allowing to completly override the results display using an unique React component. See documentation . Search query enhancer \u00b6 A sample Azure function project search-query-enhancer to demonstrate the use of Microsoft LUIS and other cognitive services to interpret user intents and enhance the search box query accordingly. See documentation . Applies to \u00b6 SharePoint Framework Office 365 tenant Important notice on upgrading the solution from pre v2.2.0.0 \u00b6 Due to code restructuring we have hit an edge case which impacts upgrades from previous versions. To solve the issue go to https://<tenant>.sharepoint.com/sites/<appcatalog>/Lists/ComponentManifests and remove the entries for SearchBox and Search Results, and then upload the .sppkg for the new release. Next you need to loop over all sites which have the web parts installed, and upgrade the App on those sites. Now the web parts should work on new and existing sites. You may use the PnP command Update-PnPApp to update the application. If you have deployed the solution as a tenant wide extension, this should not impact you. Important notice on upgrading the solution from pre v3.0.0.0 \u00b6 Because this version introduces a new standalone search filters Web Part, you will have to reconfigure all previous refiners from the search results Web Part to this new Web Part. You can get the previous layout for filters by selecting the 'Panel' layout in the new Web Part property pane. Disclaimer \u00b6 THIS CODE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.","title":"Version 3"},{"location":"v3/#pnp-modern-search-v3","text":"PnP Modern Search v3.x deprecation v4 uses a brand new code architecture and replace the older v3 codebase . There will be no new features added to v3.x, but we will continue to provide bug fixes and minor changes as needed. As v4.x is not yet at feature parity with v3.x, you can still use the v3.x packages to meet your requirements. Also not that there is not an auto-upgrade path from v3 to v4 due to the new architecture, so you are perfectly ok to stay on the v3 version until v4 provides the features validating your upgrade. However, the main focus is on the v4 version, and new search functionality backed by the Microsoft Graph Search API will be v4 only. v3 and v4 don't share the same package name, Web Part and solution IDs meaning you can have them side by side on a page if necessary without overlap.","title":"PnP Modern Search v3"},{"location":"v3/#solution-overview","text":"","title":"Solution overview"},{"location":"v3/#current-version","text":"Get the latest release at our releases page .","title":"Current version"},{"location":"v3/#table-of-contents","text":"Contributors Web Parts Search Box Search Results Search Filters Search Pagination Search Verticals Templating Extensibility Library Custom Renderer Search Query Enhancer Debug locally","title":"Table of contents"},{"location":"v3/#summary","text":"This solution allows you to build user friendly SharePoint search experiences using SPFx in the modern interface. The main features include: Fully customizable SharePoint search query like the good old Content Search Web Part. Can either use a static query or be connected to a search box component using SPFx dynamic data. Live templating system with Handlebar to meet your requirements in terms of UI + built-in layouts. Can also use template from an external file. Search results including previews for Office documents and Office 365 videos. Customizable refiners supporting multilingual values for taxonomy based filters. Sortable results (unique field). Refiners Web Part. SharePoint best bets support. Search query enhancement with NLP tools (like Microsoft LUIS). Extensibility model allowing to write your own components. A complete 1 hour tutorial video is available on the official SharePoint Developer blog :","title":"Summary"},{"location":"v3/#whats-included","text":"","title":"What's included?"},{"location":"v3/#search-web-parts","text":"SPFx solution search-parts including a complete set of SharePoint search Web Parts like a search results, search box, etc. See documentation .","title":"Search Web Parts"},{"location":"v3/#search-extensibility-library","text":"A SPFx library component project search-extensibility-library allowing to create custom React components wrapped as web components to be included in the search results Web Part Handlebars templates when you require complex dynamic behavior at a granular component level. See documentation .","title":"Search extensibility library"},{"location":"v3/#search-custom-renderer","text":"A SPFx application customizer project search-custom-renderer allowing to completly override the results display using an unique React component. See documentation .","title":"Search custom renderer"},{"location":"v3/#search-query-enhancer","text":"A sample Azure function project search-query-enhancer to demonstrate the use of Microsoft LUIS and other cognitive services to interpret user intents and enhance the search box query accordingly. See documentation .","title":"Search query enhancer"},{"location":"v3/#applies-to","text":"SharePoint Framework Office 365 tenant","title":"Applies to"},{"location":"v3/#important-notice-on-upgrading-the-solution-from-pre-v2200","text":"Due to code restructuring we have hit an edge case which impacts upgrades from previous versions. To solve the issue go to https://<tenant>.sharepoint.com/sites/<appcatalog>/Lists/ComponentManifests and remove the entries for SearchBox and Search Results, and then upload the .sppkg for the new release. Next you need to loop over all sites which have the web parts installed, and upgrade the App on those sites. Now the web parts should work on new and existing sites. You may use the PnP command Update-PnPApp to update the application. If you have deployed the solution as a tenant wide extension, this should not impact you.","title":"Important notice on upgrading the solution from pre v2.2.0.0"},{"location":"v3/#important-notice-on-upgrading-the-solution-from-pre-v3000","text":"Because this version introduces a new standalone search filters Web Part, you will have to reconfigure all previous refiners from the search results Web Part to this new Web Part. You can get the previous layout for filters by selecting the 'Panel' layout in the new Web Part property pane.","title":"Important notice on upgrading the solution from pre v3.0.0.0"},{"location":"v3/#disclaimer","text":"THIS CODE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.","title":"Disclaimer"},{"location":"v3/build-the-doc/","text":"Building the Documentation \u00b6 Building the documentation locally can help you visualize change you are making to the docs. What you see locally should be what you see online. Building \u00b6 Documentation is built using MkDocs. You will need to latest version of Python (tested on version 3.7.1) and pip. If you're on the Windows operating system, make sure you have added Python to your Path environment variable . When executing the pip module on Windows you can prefix it with python -m . For example: python -m pip install mkdocs-material Install MkDocs pip install mkdocs Install the Material theme pip install mkdocs-material==4.6.3 Serve it up mkdocs serve Open a browser to http://127.0.0.1:8000/ Deploy mkdocs gh-deploy from main branch","title":"Building the Documentation"},{"location":"v3/build-the-doc/#building-the-documentation","text":"Building the documentation locally can help you visualize change you are making to the docs. What you see locally should be what you see online.","title":"Building the Documentation"},{"location":"v3/build-the-doc/#building","text":"Documentation is built using MkDocs. You will need to latest version of Python (tested on version 3.7.1) and pip. If you're on the Windows operating system, make sure you have added Python to your Path environment variable . When executing the pip module on Windows you can prefix it with python -m . For example: python -m pip install mkdocs-material Install MkDocs pip install mkdocs Install the Material theme pip install mkdocs-material==4.6.3 Serve it up mkdocs serve Open a browser to http://127.0.0.1:8000/ Deploy mkdocs gh-deploy from main branch","title":"Building"},{"location":"v3/contributors/","text":"Contributors - v3 \u00b6 Table of contents This solution won't be here without the volunteer work of these people. Feel free to support them if you like the solution! Franck Cornu (aequos) - @FranckCornu - GitHub Sponsor Page Mikael Svenson (Microsoft) - @mikaelsvenson Yannick Reekmans - @yannickreekmans Albert-Jan Schot - @appieschot Tarald G\u00e5sbakk (PuzzlePart) - @taraldgasbakk Brad Schlintz (Microsoft) - @bschlintz Richard Gigan - @PooLP","title":"Contributors - v3"},{"location":"v3/contributors/#contributors-v3","text":"Table of contents This solution won't be here without the volunteer work of these people. Feel free to support them if you like the solution! Franck Cornu (aequos) - @FranckCornu - GitHub Sponsor Page Mikael Svenson (Microsoft) - @mikaelsvenson Yannick Reekmans - @yannickreekmans Albert-Jan Schot - @appieschot Tarald G\u00e5sbakk (PuzzlePart) - @taraldgasbakk Brad Schlintz (Microsoft) - @bschlintz Richard Gigan - @PooLP","title":"Contributors - v3"},{"location":"v3/search-custom-renderer/getting-started/","text":"Custom Renderer - v3 \u00b6 Table of contents Summary \u00b6 This sample is an example on how to use custom code renderers in the react-search-refiners project. Custom code renderers lets you render the search results from a react-search-refiners webpart in your own way, with whatever tools you prefer. Typically, you will use SPFx Application Customizers to mount these renderers, but you may also use SPFx webparts. This sample contains a SPFx Application Customizer which uses React and Office-UI-Fabric-React to render the search results. This package contains two separate renderers: a basic renderer and a persona renderer for rendering searches after people. Used SharePoint Framework Version \u00b6 Applies to \u00b6 SharePoint Framework Office 365 tenant React Search Refiners Solution \u00b6 Solution Author(s) react-search-refiners-renderers Tarald G\u00e5sbakk - @taraldga Version history \u00b6 Version Date Comments 1.0.0 Jan 06, 2019 Initial release 1.0.0 Mar 05, 2019 Added Persona renderer 1.0.1 Mar 16, 2019 Fixed hardcoded profile image url in Persona renderer. Updated some files to be in sync with Search solution Minimal Path to Awesome \u00b6 Follow the Minimal Path to Awesome for React Search Refiners . In this repository, run from the command line: npm install gulp serve Creating your own renderers \u00b6 The renderer bundled in this sample is a simple renderer designed to show how a simple implementation of a code renderer would look like. Following is a quick tour of the setup-process and the different settings you will encounter when creating your own renderer. Registering a new renderer \u00b6 The renderers work by announcing themselves to any react-search-refiners webparts that exists on the pages they are installed on. The registration process is handled by the 'registerRenderer'- function in the 'ResultService' - class in './src/services'. A typical registration will take place onInit. The parameters of the registerRenderer function: rendererId : The id of the current renderer. Used to identify which renderer the user has selected. Typically 'this.componentId'. rendererName : The displayName of the renderer in the react-search-refiners webpart property panel. rendererIcon : The office-ui-fabric-react icon that should be displayed in the property pane of the webpart. callback : The callback function that is used to render the webpart. This will be called when the renderer is selected and new data is available. customFields : Optional names of custom fields that may be used for templating in the renderer. Templating \u00b6 By registering a field-name in the 'customFields' value, you may expose them to the user, letting them choose which fields should be displayed in different places in your renderer. In the bundled example, a subheader is passed along as a template field. The dropdown selection that the user can chose elements from are the elements selected for fetching by the search webpart. Using the Persona renderer \u00b6 In order to make the persona-renderer work as is when installing the ready-made package, you need to fetch the following properties: PreferredName,WorkEmail,WorkPhone,JobTitle,OfficeNumber,Title,PictureURL,FirstName,LastName,userName,Path","title":"Custom Renderer - v3"},{"location":"v3/search-custom-renderer/getting-started/#custom-renderer-v3","text":"Table of contents","title":"Custom Renderer - v3"},{"location":"v3/search-custom-renderer/getting-started/#summary","text":"This sample is an example on how to use custom code renderers in the react-search-refiners project. Custom code renderers lets you render the search results from a react-search-refiners webpart in your own way, with whatever tools you prefer. Typically, you will use SPFx Application Customizers to mount these renderers, but you may also use SPFx webparts. This sample contains a SPFx Application Customizer which uses React and Office-UI-Fabric-React to render the search results. This package contains two separate renderers: a basic renderer and a persona renderer for rendering searches after people.","title":"Summary"},{"location":"v3/search-custom-renderer/getting-started/#used-sharepoint-framework-version","text":"","title":"Used SharePoint Framework Version"},{"location":"v3/search-custom-renderer/getting-started/#applies-to","text":"SharePoint Framework Office 365 tenant React Search Refiners","title":"Applies to"},{"location":"v3/search-custom-renderer/getting-started/#solution","text":"Solution Author(s) react-search-refiners-renderers Tarald G\u00e5sbakk - @taraldga","title":"Solution"},{"location":"v3/search-custom-renderer/getting-started/#version-history","text":"Version Date Comments 1.0.0 Jan 06, 2019 Initial release 1.0.0 Mar 05, 2019 Added Persona renderer 1.0.1 Mar 16, 2019 Fixed hardcoded profile image url in Persona renderer. Updated some files to be in sync with Search solution","title":"Version history"},{"location":"v3/search-custom-renderer/getting-started/#minimal-path-to-awesome","text":"Follow the Minimal Path to Awesome for React Search Refiners . In this repository, run from the command line: npm install gulp serve","title":"Minimal Path to Awesome"},{"location":"v3/search-custom-renderer/getting-started/#creating-your-own-renderers","text":"The renderer bundled in this sample is a simple renderer designed to show how a simple implementation of a code renderer would look like. Following is a quick tour of the setup-process and the different settings you will encounter when creating your own renderer.","title":"Creating your own renderers"},{"location":"v3/search-custom-renderer/getting-started/#registering-a-new-renderer","text":"The renderers work by announcing themselves to any react-search-refiners webparts that exists on the pages they are installed on. The registration process is handled by the 'registerRenderer'- function in the 'ResultService' - class in './src/services'. A typical registration will take place onInit. The parameters of the registerRenderer function: rendererId : The id of the current renderer. Used to identify which renderer the user has selected. Typically 'this.componentId'. rendererName : The displayName of the renderer in the react-search-refiners webpart property panel. rendererIcon : The office-ui-fabric-react icon that should be displayed in the property pane of the webpart. callback : The callback function that is used to render the webpart. This will be called when the renderer is selected and new data is available. customFields : Optional names of custom fields that may be used for templating in the renderer.","title":"Registering a new renderer"},{"location":"v3/search-custom-renderer/getting-started/#templating","text":"By registering a field-name in the 'customFields' value, you may expose them to the user, letting them choose which fields should be displayed in different places in your renderer. In the bundled example, a subheader is passed along as a template field. The dropdown selection that the user can chose elements from are the elements selected for fetching by the search webpart.","title":"Templating"},{"location":"v3/search-custom-renderer/getting-started/#using-the-persona-renderer","text":"In order to make the persona-renderer work as is when installing the ready-made package, you need to fetch the following properties: PreferredName,WorkEmail,WorkPhone,JobTitle,OfficeNumber,Title,PictureURL,FirstName,LastName,userName,Path","title":"Using the Persona renderer"},{"location":"v3/search-extensibility-library/getting-started/","text":"Search extensibility library - v3 \u00b6 Table of contents Summary - v3 \u00b6 This solution allows you to create and register your own React component (wrapped as HTML web components) to be used in the search results Web Part Handlebars templates. View the sample project here . Used SharePoint Framework Version \u00b6 Prerequisites \u00b6 The custom web components are defined in a SharePoint Framework project of type 'Library Component' . You have the choice to update the demo one or start from scratch with a new project. In this case, in the <your_library_name>.manifest.json file, make sure the id property id is 2501f2fd-d601-4da4-a04d-9f0bd85b1f54 . This identifier is used to load dynamically the library from the Search Results Web Part. Therefore, this value is mandatory to make the link. That is the only hook we need on our side. { // The value should be this id to make the link with the Web Part \"id\": \"2501f2fd-d601-4da4-a04d-9f0bd85b1f54\" / \"alias\": \"MyCompanyLibraryLibrary\", \"componentType\": \"Library\", ... } Create a custom web component \u00b6 A web component is a custom HTML element that can be used in your templates to implement complex behaviors. We used them here as \"wrappers\" for React components to be able to use them with Handlebars. In this solution, web components are considered stateless , meaning they will be entirely recreated when an attribute is changed (coming from the property pane). It means you can still use an inner state in your React components but not rely on the parent context (props) since it will be recreated every time by the Handlebars template. To create a custom component, follow this procedure: Create a new JSX file that will be used for your layout. (ex: CustomComponent.tsx ). You can create it anywhere in your project. Implement your component like a regular React component. import * as React from 'react'; import * as ReactDOM from 'react-dom'; import { BaseWebComponent } from '../models/BaseWebComponent'; export interface IObjectParam { myProperty: string; } export interface ICustomComponentProps { /** * A dummy string param */ myStringParam?: string; /*** * */ myObjectParam?: string; } export interface ICustomComponenState { } export class CustomComponent extends React.Component<ICustomComponentProps, ICustomComponenState> { public render() { let myObject: IObjectParam = { myProperty: undefined }; // Parse custom object try { myObject = JSON.parse(this.props.myObjectParam); } catch (error) { myObject.myProperty = null; } return <div>{this.props.myStringParam} {myObject.myProperty}</div>; } } Because props will be passed from an HTML template, they must to use always a string type. For complex objects, you will need to pass them as 'stringified' then use the JSON.parse() method to use them in your component logic. In the same file, create an other class, this time to define your web component by inheriting the BaseWebComponent abstact class`: export class MyCustomComponentWebComponent extends BaseWebComponent { public constructor() { super(); } public async connectedCallback() { let props = this.resolveAttributes(); const debugView = <CustomComponent {...props}/>; ReactDOM.render(debugView, this); } } The resolveAttributes method will transform custom element HTML attributes to React component props. By convention, web component attributes have to be passed using camel case to be tranformed into React component props. All custom web components must use the prefix data- for attributes (ex: data-my-parameter ) in the html comsumer. However, the data- part won't be included after the resolution by the resolveAttributes method. For instance: a preview-image HTML attribute becomes previewImage prop. In the main entry point class (ex: MyCompanyLibraryLibrary.ts ), extends the IExtensibilityLibrary interface and register your custom components this way: import { MyCustomComponentWebComponent } from \"../CustomComponent\"; import { IComponentDefinition } from \"../../models/IComponentDefinition\"; import { IExtensibilityLibrary } from \"../../models/IExtensibilityLibrary\"; export class MyCompanyLibraryLibrary implements IExtensibilityLibrary { public getCustomWebComponents(): IComponentDefinition<any>[] { return [ { componentName: 'my-custom-component', componentClass: MyCustomComponentWebComponent } ]; } } Custom web component tag names must be lowercase with at least one dash separator - (ex: my-custom-component . In a custom Handlebars layout, reference your component like this, leveraging the Handlebars context values: <my-custom-component data-my-string-param=\"{{MyStringProperty}}\" data-my-object-param=\"{{JSONstringify MyObjectProperty 2}}\"></my-custom-component> Bundle gulp bundle --ship and package your library gulp package-solution --ship and upload it either in the global or a site app catalog. Create a custom query suggestion provider \u00b6 A query suggestion provider allows you to fetch and display custom content or person suggestions. There is a default provider built-in which retrieves suggestions from SharePoint, however you may add additional providers using the approach outlined. In additional to dynamic suggestions as the user is typing, your provider may also surface \"zero query\" suggestions. These are displayed when the search box has focus without any search text or if the search text is less than 2 characters. To create a custom suggestion provider, follow this procedure: Create a new TypeScript class that implements the BaseSuggestionProvider abstract class. You can create it anywhere in your project. Implement the required methods and properties like the example below. import { BaseSuggestionProvider } from '../models/BaseSuggestionProvider'; import { ISuggestion } from '../models/ISuggestion'; export class CustomSuggestionProvider extends BaseSuggestionProvider { public static readonly ProviderName: string = 'custom-suggestion-provider'; public static readonly ProviderDisplayName: string = 'Custom Suggestion Provider'; public static readonly ProviderDescription: string = 'An example custom suggestion provider.'; public async onInit(): Promise<void> { // initialization logic // this._ctx // <-- SPFx Webpart Context } public get isSuggestionsEnabled(): boolean { return true; } public get isZeroTermSuggestionsEnabled(): boolean { return true; } public async getSuggestions(queryText: string): Promise<ISuggestion[]> { // fetch suggestions } public async getZeroTermSuggestions(): Promise<ISuggestion[]> { // fetch zero term suggestions } } In the main entry point class (ex: MyCompanyLibraryLibrary.ts), register your custom query suggestion provider like the example below. import { IExtensibilityLibrary } from \"../../models/IExtensibilityLibrary\"; import { ISuggestionProviderDefinition } from \"../../models/ISuggestionProviderDefinition\"; import { CustomSuggestionProvider } from \"../CustomSuggestionProvider\"; ... export class MyCompanyLibraryLibrary implements IExtensibilityLibrary { public getCustomSuggestionProviders(): ISuggestionProviderDefinition<any>[] { return [ { providerName: CustomSuggestionProvider.ProviderName, providerDisplayName: CustomSuggestionProvider.ProviderDisplayName, providerDescription: CustomSuggestionProvider.ProviderDescription, providerClass: CustomSuggestionProvider }, ]; } } Configure Suggestion Providers \u00b6 When one or more custom query suggestion providers are made available via the extensibility library, an additional configuration pane becomes availabe in the Search Box web part settings. From the panel you can enable or disable individual suggestion providers. Create a custom query modifier \u00b6 A query modifier allows you to manipulate the user's search query before it is sent to SharePoint. You can define multiple query modifiers in the extensibility library. However, only one at a time can be selected in the search results WP depending your requirements. The modifier receives the query text (from search box or the static value specified in the search results WP), query template and result source ID (from search results or search verticals if configured) as parameters. The modifier returns an object with the updated query text and query template. This capability allows you to inject additional terms or criteria to the user's search query such as spelling corrections or translations. You can use the sample Search Query Enhancer function as a starter to use Microsoft Cognitive services to do so. To create a custom query modifier, follow this procedure: Create a new TypeScript class that implements the BaseQueryModifier abstract class. You can create it anywhere in your project. Implement the required methods and properties like the example below. import { BaseQueryModifier } from '../models/BaseQueryModifier'; import { IQueryModifierInput, IQueryModification } from '../models/IQueryModification'; export class CustomQueryModifier extends BaseQueryModifier { public static readonly DisplayName: string = 'Sample Query Modifier'; public static readonly Description: string = 'Adds a filter to the query so that only word documents are returned.'; public async onInit(): Promise<void> { // this._ctx // SPFx Webpart Context } public async modifyQuery(query: IQueryModifierInput): Promise<IQueryModification> { // e.g. Always return docx files const newQueryText = `${query.queryText} fileextension:docx`; // Leave query template unchanged const newQueryTemplate = query.queryTemplate; return { queryText: newQueryText, queryTemplate: newQueryTemplate } as IQueryModification); } } In the main entry point class (ex: MyCompanyLibraryLibrary.ts), register your custom query modifier like the example below. import { IExtensibilityLibrary } from \"../../models/IExtensibilityLibrary\"; import { IQueryModifierDefinition } from \"../../models/IQueryModifierDefinition\"; import { CustomQueryModifier } from \"../CustomQueryModifier\"; ... export class MyCompanyLibraryLibrary implements IExtensibilityLibrary { public getQueryModifier(): IQueryModifierDefinition<any> { return { displayName: CustomQueryModifier.DisplayName, description: CustomQueryModifier.Description, class: CustomQueryModifier }; } } Configure Query Modifier \u00b6 When a query modifier is made available via the extensibility library, an additional configuration sections becomes visible in the Search Results web part settings. Here you can select the query modifier to apply to this search box. Only one provider a time can be selected in the search results WP .","title":"Search extensibility library - v3"},{"location":"v3/search-extensibility-library/getting-started/#search-extensibility-library-v3","text":"Table of contents","title":"Search extensibility library - v3"},{"location":"v3/search-extensibility-library/getting-started/#summary-v3","text":"This solution allows you to create and register your own React component (wrapped as HTML web components) to be used in the search results Web Part Handlebars templates. View the sample project here .","title":"Summary - v3"},{"location":"v3/search-extensibility-library/getting-started/#used-sharepoint-framework-version","text":"","title":"Used SharePoint Framework Version"},{"location":"v3/search-extensibility-library/getting-started/#prerequisites","text":"The custom web components are defined in a SharePoint Framework project of type 'Library Component' . You have the choice to update the demo one or start from scratch with a new project. In this case, in the <your_library_name>.manifest.json file, make sure the id property id is 2501f2fd-d601-4da4-a04d-9f0bd85b1f54 . This identifier is used to load dynamically the library from the Search Results Web Part. Therefore, this value is mandatory to make the link. That is the only hook we need on our side. { // The value should be this id to make the link with the Web Part \"id\": \"2501f2fd-d601-4da4-a04d-9f0bd85b1f54\" / \"alias\": \"MyCompanyLibraryLibrary\", \"componentType\": \"Library\", ... }","title":"Prerequisites"},{"location":"v3/search-extensibility-library/getting-started/#create-a-custom-web-component","text":"A web component is a custom HTML element that can be used in your templates to implement complex behaviors. We used them here as \"wrappers\" for React components to be able to use them with Handlebars. In this solution, web components are considered stateless , meaning they will be entirely recreated when an attribute is changed (coming from the property pane). It means you can still use an inner state in your React components but not rely on the parent context (props) since it will be recreated every time by the Handlebars template. To create a custom component, follow this procedure: Create a new JSX file that will be used for your layout. (ex: CustomComponent.tsx ). You can create it anywhere in your project. Implement your component like a regular React component. import * as React from 'react'; import * as ReactDOM from 'react-dom'; import { BaseWebComponent } from '../models/BaseWebComponent'; export interface IObjectParam { myProperty: string; } export interface ICustomComponentProps { /** * A dummy string param */ myStringParam?: string; /*** * */ myObjectParam?: string; } export interface ICustomComponenState { } export class CustomComponent extends React.Component<ICustomComponentProps, ICustomComponenState> { public render() { let myObject: IObjectParam = { myProperty: undefined }; // Parse custom object try { myObject = JSON.parse(this.props.myObjectParam); } catch (error) { myObject.myProperty = null; } return <div>{this.props.myStringParam} {myObject.myProperty}</div>; } } Because props will be passed from an HTML template, they must to use always a string type. For complex objects, you will need to pass them as 'stringified' then use the JSON.parse() method to use them in your component logic. In the same file, create an other class, this time to define your web component by inheriting the BaseWebComponent abstact class`: export class MyCustomComponentWebComponent extends BaseWebComponent { public constructor() { super(); } public async connectedCallback() { let props = this.resolveAttributes(); const debugView = <CustomComponent {...props}/>; ReactDOM.render(debugView, this); } } The resolveAttributes method will transform custom element HTML attributes to React component props. By convention, web component attributes have to be passed using camel case to be tranformed into React component props. All custom web components must use the prefix data- for attributes (ex: data-my-parameter ) in the html comsumer. However, the data- part won't be included after the resolution by the resolveAttributes method. For instance: a preview-image HTML attribute becomes previewImage prop. In the main entry point class (ex: MyCompanyLibraryLibrary.ts ), extends the IExtensibilityLibrary interface and register your custom components this way: import { MyCustomComponentWebComponent } from \"../CustomComponent\"; import { IComponentDefinition } from \"../../models/IComponentDefinition\"; import { IExtensibilityLibrary } from \"../../models/IExtensibilityLibrary\"; export class MyCompanyLibraryLibrary implements IExtensibilityLibrary { public getCustomWebComponents(): IComponentDefinition<any>[] { return [ { componentName: 'my-custom-component', componentClass: MyCustomComponentWebComponent } ]; } } Custom web component tag names must be lowercase with at least one dash separator - (ex: my-custom-component . In a custom Handlebars layout, reference your component like this, leveraging the Handlebars context values: <my-custom-component data-my-string-param=\"{{MyStringProperty}}\" data-my-object-param=\"{{JSONstringify MyObjectProperty 2}}\"></my-custom-component> Bundle gulp bundle --ship and package your library gulp package-solution --ship and upload it either in the global or a site app catalog.","title":"Create a custom web component"},{"location":"v3/search-extensibility-library/getting-started/#create-a-custom-query-suggestion-provider","text":"A query suggestion provider allows you to fetch and display custom content or person suggestions. There is a default provider built-in which retrieves suggestions from SharePoint, however you may add additional providers using the approach outlined. In additional to dynamic suggestions as the user is typing, your provider may also surface \"zero query\" suggestions. These are displayed when the search box has focus without any search text or if the search text is less than 2 characters. To create a custom suggestion provider, follow this procedure: Create a new TypeScript class that implements the BaseSuggestionProvider abstract class. You can create it anywhere in your project. Implement the required methods and properties like the example below. import { BaseSuggestionProvider } from '../models/BaseSuggestionProvider'; import { ISuggestion } from '../models/ISuggestion'; export class CustomSuggestionProvider extends BaseSuggestionProvider { public static readonly ProviderName: string = 'custom-suggestion-provider'; public static readonly ProviderDisplayName: string = 'Custom Suggestion Provider'; public static readonly ProviderDescription: string = 'An example custom suggestion provider.'; public async onInit(): Promise<void> { // initialization logic // this._ctx // <-- SPFx Webpart Context } public get isSuggestionsEnabled(): boolean { return true; } public get isZeroTermSuggestionsEnabled(): boolean { return true; } public async getSuggestions(queryText: string): Promise<ISuggestion[]> { // fetch suggestions } public async getZeroTermSuggestions(): Promise<ISuggestion[]> { // fetch zero term suggestions } } In the main entry point class (ex: MyCompanyLibraryLibrary.ts), register your custom query suggestion provider like the example below. import { IExtensibilityLibrary } from \"../../models/IExtensibilityLibrary\"; import { ISuggestionProviderDefinition } from \"../../models/ISuggestionProviderDefinition\"; import { CustomSuggestionProvider } from \"../CustomSuggestionProvider\"; ... export class MyCompanyLibraryLibrary implements IExtensibilityLibrary { public getCustomSuggestionProviders(): ISuggestionProviderDefinition<any>[] { return [ { providerName: CustomSuggestionProvider.ProviderName, providerDisplayName: CustomSuggestionProvider.ProviderDisplayName, providerDescription: CustomSuggestionProvider.ProviderDescription, providerClass: CustomSuggestionProvider }, ]; } }","title":"Create a custom query suggestion provider"},{"location":"v3/search-extensibility-library/getting-started/#configure-suggestion-providers","text":"When one or more custom query suggestion providers are made available via the extensibility library, an additional configuration pane becomes availabe in the Search Box web part settings. From the panel you can enable or disable individual suggestion providers.","title":"Configure Suggestion Providers"},{"location":"v3/search-extensibility-library/getting-started/#create-a-custom-query-modifier","text":"A query modifier allows you to manipulate the user's search query before it is sent to SharePoint. You can define multiple query modifiers in the extensibility library. However, only one at a time can be selected in the search results WP depending your requirements. The modifier receives the query text (from search box or the static value specified in the search results WP), query template and result source ID (from search results or search verticals if configured) as parameters. The modifier returns an object with the updated query text and query template. This capability allows you to inject additional terms or criteria to the user's search query such as spelling corrections or translations. You can use the sample Search Query Enhancer function as a starter to use Microsoft Cognitive services to do so. To create a custom query modifier, follow this procedure: Create a new TypeScript class that implements the BaseQueryModifier abstract class. You can create it anywhere in your project. Implement the required methods and properties like the example below. import { BaseQueryModifier } from '../models/BaseQueryModifier'; import { IQueryModifierInput, IQueryModification } from '../models/IQueryModification'; export class CustomQueryModifier extends BaseQueryModifier { public static readonly DisplayName: string = 'Sample Query Modifier'; public static readonly Description: string = 'Adds a filter to the query so that only word documents are returned.'; public async onInit(): Promise<void> { // this._ctx // SPFx Webpart Context } public async modifyQuery(query: IQueryModifierInput): Promise<IQueryModification> { // e.g. Always return docx files const newQueryText = `${query.queryText} fileextension:docx`; // Leave query template unchanged const newQueryTemplate = query.queryTemplate; return { queryText: newQueryText, queryTemplate: newQueryTemplate } as IQueryModification); } } In the main entry point class (ex: MyCompanyLibraryLibrary.ts), register your custom query modifier like the example below. import { IExtensibilityLibrary } from \"../../models/IExtensibilityLibrary\"; import { IQueryModifierDefinition } from \"../../models/IQueryModifierDefinition\"; import { CustomQueryModifier } from \"../CustomQueryModifier\"; ... export class MyCompanyLibraryLibrary implements IExtensibilityLibrary { public getQueryModifier(): IQueryModifierDefinition<any> { return { displayName: CustomQueryModifier.DisplayName, description: CustomQueryModifier.Description, class: CustomQueryModifier }; } }","title":"Create a custom query modifier"},{"location":"v3/search-extensibility-library/getting-started/#configure-query-modifier","text":"When a query modifier is made available via the extensibility library, an additional configuration sections becomes visible in the Search Results web part settings. Here you can select the query modifier to apply to this search box. Only one provider a time can be selected in the search results WP .","title":"Configure Query Modifier"},{"location":"v3/search-parts/getting-started/","text":"Web parts - v3 \u00b6 Table of contents Summary \u00b6 This solution contains all search Web Parts you can use on your SharePoint modern pages. Used SharePoint Framework Version \u00b6 This solution includes the following Web Parts: Search Web Part(s) \u00b6 Component Description Search Box Web Part Allows users to enter free text/KQL search queries connected to a search results Web Part. Search Results Web Part Performs static or dynamic search query with customizable parameters sorting and templating. Search Refiners Allows users to configure refiners for a search results Web Part. Search Verticals Allows users to search in predefined scopes. Minimal Path to Awesome \u00b6 Clone this repository In the search-parts project, run the following commands: npm install gulp serve The search-parts project also supports faster development via spfx-fast-serve tool. To use \"fast serve\" run npm run serve instead of gulp serve . We recommend using --nobrowser when serving and use one of two approaches for debugging instead of the local workbench: * Hosted workbench on any site via: https://<tenant>.sharepoint.com/sites/yoursite/_layouts/15/workbench.aspx * Debug on a modern page by appending the below parameters to the URL. This allows page composition and debug as you were in production. ?loadSPFX=true&debugManifestsFile=https://localhost:4321/temp/manifests.js","title":"Web parts - v3"},{"location":"v3/search-parts/getting-started/#web-parts-v3","text":"Table of contents","title":"Web parts - v3"},{"location":"v3/search-parts/getting-started/#summary","text":"This solution contains all search Web Parts you can use on your SharePoint modern pages.","title":"Summary"},{"location":"v3/search-parts/getting-started/#used-sharepoint-framework-version","text":"This solution includes the following Web Parts:","title":"Used SharePoint Framework Version"},{"location":"v3/search-parts/getting-started/#search-web-parts","text":"Component Description Search Box Web Part Allows users to enter free text/KQL search queries connected to a search results Web Part. Search Results Web Part Performs static or dynamic search query with customizable parameters sorting and templating. Search Refiners Allows users to configure refiners for a search results Web Part. Search Verticals Allows users to search in predefined scopes.","title":"Search Web Part(s)"},{"location":"v3/search-parts/getting-started/#minimal-path-to-awesome","text":"Clone this repository In the search-parts project, run the following commands: npm install gulp serve The search-parts project also supports faster development via spfx-fast-serve tool. To use \"fast serve\" run npm run serve instead of gulp serve . We recommend using --nobrowser when serving and use one of two approaches for debugging instead of the local workbench: * Hosted workbench on any site via: https://<tenant>.sharepoint.com/sites/yoursite/_layouts/15/workbench.aspx * Debug on a modern page by appending the below parameters to the URL. This allows page composition and debug as you were in production. ?loadSPFX=true&debugManifestsFile=https://localhost:4321/temp/manifests.js","title":"Minimal Path to Awesome"},{"location":"v3/search-parts/search-box/","text":"Search Box - v3 \u00b6 Table of contents Default Search Query Settings \u00b6 Setting Description Use a dynamic data source You can set a default query text coming from am other data source. This case is particularly useful when you want to put a search box Web Part on the front page redirecting to an other page with the same query. Use the query string parameter 'q' from the built-in 'Page Environment' data source. Search box options \u00b6 Setting Description Enable query suggestions The search box supports by default query suggestions from SharePoint search. Refer to the following article to know how to add query suggestions in your SharePoint tenant (caution: it can take up to 24h for changes to take effect). You can also add your own custom suggestions providers using following this procedure . Send the query to a new page Sends the search query text to a new page. On that page, use an other search box Web Part configured with a dynamic data source as the default query. This Web Part uses the URL fragment '#' to pass the entered keywords. Make sure you use this data source property in your targeted components to retrieve the query. Placeholder text The placeholder text to display in the search box. Search query enhancement \u00b6 The search query enhancement feature was removed since the 3.11.0 release. If you need to use such a feature, you must now use the Query Modifier feature and the Search Query Enhancer function","title":"Search Box - v3"},{"location":"v3/search-parts/search-box/#search-box-v3","text":"Table of contents","title":"Search Box - v3"},{"location":"v3/search-parts/search-box/#default-search-query-settings","text":"Setting Description Use a dynamic data source You can set a default query text coming from am other data source. This case is particularly useful when you want to put a search box Web Part on the front page redirecting to an other page with the same query. Use the query string parameter 'q' from the built-in 'Page Environment' data source.","title":"Default Search Query Settings"},{"location":"v3/search-parts/search-box/#search-box-options","text":"Setting Description Enable query suggestions The search box supports by default query suggestions from SharePoint search. Refer to the following article to know how to add query suggestions in your SharePoint tenant (caution: it can take up to 24h for changes to take effect). You can also add your own custom suggestions providers using following this procedure . Send the query to a new page Sends the search query text to a new page. On that page, use an other search box Web Part configured with a dynamic data source as the default query. This Web Part uses the URL fragment '#' to pass the entered keywords. Make sure you use this data source property in your targeted components to retrieve the query. Placeholder text The placeholder text to display in the search box.","title":"Search box options"},{"location":"v3/search-parts/search-box/#search-query-enhancement","text":"The search query enhancement feature was removed since the 3.11.0 release. If you need to use such a feature, you must now use the Query Modifier feature and the Search Query Enhancer function","title":"Search query enhancement"},{"location":"v3/search-parts/search-filters/","text":"Search Filters - v3 \u00b6 Table of contents Refiner Options \u00b6 Setting Description Refiners The search managed properties to use as refiners. Make sure these are refinable. With SharePoint Online, you have to reuse the default ones to do so (RefinableStringXX etc.). The order is the same as they will appear in the refinement panel. You can also provide your own custom labels using the following format RefinableString01:\"You custom filter label\",RefinableString02:\"You custom filter label\",... This Web Part supports dynamic translation of taxonomy based refiners with few additional configurations in the connected search results Web Part (see above). Connect to search results Web Part The search results Web Part to use on the current page to get filters. Styling Options \u00b6 Setting Description Web Part Title Shows a title for this Web Part. Set blank if you don't want a title. Show blank if no result Shows nothing if there is no filter Filters layout Choose the template to use to display filters results. Templates \u00b6 Persona \u00b6 The persona template work with technical account name (ex : i:0#.f|membership|pierre.dupond@tenantsharepoint.onmicrosoft.com). By default, the \"Author\" managed property returns only the display name (ex : \"Pierre Dupont\"). To get the 'Persona' template work with \"Author\", you need to map crawled properties ows_q_USER_Author to a managed properties RefinableStringXX . All crawled properties of ows_q_USER_\\<name> and like People:Manager , People:AccountName etc. return technical account name. If you want the display name only for the Created by person you can map the crawled property Office:4 to a managed property and use that. File Type \u00b6 The \"File Type\" template is intended to work with the FileExtension managed property. Container Tree \u00b6 The _\"Container Tree\" template is intended to work with the ParentLink managed property. Since this one is not refinable by default, you must map the ows_ParentUrl crawled property to a RefinableStringXX managed property. The purpose of this template is to give the ability to navigate trough a folder hierarchy as metadata by parsing the parent link URL segments.","title":"Search Filters - v3"},{"location":"v3/search-parts/search-filters/#search-filters-v3","text":"Table of contents","title":"Search Filters - v3"},{"location":"v3/search-parts/search-filters/#refiner-options","text":"Setting Description Refiners The search managed properties to use as refiners. Make sure these are refinable. With SharePoint Online, you have to reuse the default ones to do so (RefinableStringXX etc.). The order is the same as they will appear in the refinement panel. You can also provide your own custom labels using the following format RefinableString01:\"You custom filter label\",RefinableString02:\"You custom filter label\",... This Web Part supports dynamic translation of taxonomy based refiners with few additional configurations in the connected search results Web Part (see above). Connect to search results Web Part The search results Web Part to use on the current page to get filters.","title":"Refiner Options"},{"location":"v3/search-parts/search-filters/#styling-options","text":"Setting Description Web Part Title Shows a title for this Web Part. Set blank if you don't want a title. Show blank if no result Shows nothing if there is no filter Filters layout Choose the template to use to display filters results.","title":"Styling Options"},{"location":"v3/search-parts/search-filters/#templates","text":"","title":"Templates"},{"location":"v3/search-parts/search-filters/#persona","text":"The persona template work with technical account name (ex : i:0#.f|membership|pierre.dupond@tenantsharepoint.onmicrosoft.com). By default, the \"Author\" managed property returns only the display name (ex : \"Pierre Dupont\"). To get the 'Persona' template work with \"Author\", you need to map crawled properties ows_q_USER_Author to a managed properties RefinableStringXX . All crawled properties of ows_q_USER_\\<name> and like People:Manager , People:AccountName etc. return technical account name. If you want the display name only for the Created by person you can map the crawled property Office:4 to a managed property and use that.","title":"Persona"},{"location":"v3/search-parts/search-filters/#file-type","text":"The \"File Type\" template is intended to work with the FileExtension managed property.","title":"File Type"},{"location":"v3/search-parts/search-filters/#container-tree","text":"The _\"Container Tree\" template is intended to work with the ParentLink managed property. Since this one is not refinable by default, you must map the ows_ParentUrl crawled property to a RefinableStringXX managed property. The purpose of this template is to give the ability to navigate trough a folder hierarchy as metadata by parsing the parent link URL segments.","title":"Container Tree"},{"location":"v3/search-parts/search-pagination/","text":"Search Pagination - v3 \u00b6 Table of contents This WebPart has been removed since the 3.11.0 version. If you had custom templates and need pagination, add the following code snippet in your template : {{#if @root.paging.showPaging}} <pnp-pagination data-total-items=\"{{@root.paging.totalItemsCount}}\" data-hide-first-last-pages=\"{{@root.paging.hideFirstLastPages}}\" data-hide-disabled=\"{{@root.paging.hideDisabled}}\" data-hide-navigation=\"{{@root.paging.hideNavigation}}\" data-range=\"{{@root.paging.pagingRange}}\" data-items-count-per-page=\"{{@root.paging.itemsCountPerPage}}\" data-current-page-number=\"{{@root.paging.currentPageNumber}}\" > </pnp-pagination> {{/if}}","title":"Search Pagination - v3"},{"location":"v3/search-parts/search-pagination/#search-pagination-v3","text":"Table of contents This WebPart has been removed since the 3.11.0 version. If you had custom templates and need pagination, add the following code snippet in your template : {{#if @root.paging.showPaging}} <pnp-pagination data-total-items=\"{{@root.paging.totalItemsCount}}\" data-hide-first-last-pages=\"{{@root.paging.hideFirstLastPages}}\" data-hide-disabled=\"{{@root.paging.hideDisabled}}\" data-hide-navigation=\"{{@root.paging.hideNavigation}}\" data-range=\"{{@root.paging.pagingRange}}\" data-items-count-per-page=\"{{@root.paging.itemsCountPerPage}}\" data-current-page-number=\"{{@root.paging.currentPageNumber}}\" > </pnp-pagination> {{/if}}","title":"Search Pagination - v3"},{"location":"v3/search-parts/search-results/","text":"Search Results - v3 \u00b6 Table of contents Page 1 Page 2 Page 3 Search Query Configuration \u00b6 Setting Description Search query keywords Here you choose to use a static search query or a query coming from a data source. It is recommended to use the associated Web Part coming with this sample. The search query is in KQL format so you can use search query variables (See this post to know which ones are allowed). You can only plug one source to this Web Part. Search Settings \u00b6 Setting Description Query template The search query template in KQL format. You can use search variables here (like Path:{Site}). Result Source Identifier The GUID of a SharePoint result source. Sort order The initial search results sort order, where you can use one or multiple properties to sort by. By default, results are sorted by created date (ascending) and size (descending). Remove these values to reset default sorting Sortable fields The search managed properties to use for sorting. With SharePoint Online, you have to reuse the default ones to do so (RefinableStringXX etc.). The order is the same as they will appear in the sort panel. You can also provide your own custom labels using the following format RefinableString01:\"You custom filter label\",RefinableString02:\"You custom filter label\",... If no sortable fields are provided, the 'Sort' button will not be visible. Connect to a search refiners Web Part If enable, select the search refiners Web Part to use on the current page to get selected filters. It is a 2 ways connection so don't forget to connect the targeted search refiners to the search results Web Part as well. Connect to a search verticals Web Part If enable, select the search verticals Web Part to connect to. Enable Query Rules Enable the query rules if applies. Turn this options 'on' to display your SharePoint Promoted results (links only) and make result blocks available to custom renderers. Include OneDrive results Include OneDrive results if applicable. Turn this option 'on' to make users' personal OneDrive results available to custom renderers. Read more here . Selected properties The search managed properties to retrieve. You can select them from a predefined list or add them as free text if not listed. Then, these properties are available in your Handlebars template with the syntax ( item.property_name or property_name inside the {{#each}} loop). The Web Part needs the following managed properties to get it work ( \"Title,Path,Filename,SiteLogo,PreviewUrl,PictureThumbnailURL,ServerRedirectedPreviewURL,ServerRedirectedURL,HitHighlightedSummary,FileType,ServerRedirectedEmbedURL,ParentLink,owstaxidmetadataalltagsinfo,SPSiteURL,SiteTitle,IsContainer,IsListItem,HtmlFileType,SiteId,WebId,UniqueID,OriginalPath,FileExtension,NormSiteID,NormListID,NormUniqueID,Created,contentclass,DefaultEncodingURL,Author,AuthorOWSUSER\" ). It you remove them, they will be re-added automatically on the next page refresh . Refinement filters The default refinement filters to apply to the query. Unlike URL filters params, these won't select the default values in the Search Filters WP if connected. Enable taxonomy values localization for refiners and results If set, the Web Part will try to translate the taxonomy term IDs to their corresponding label according to the curent UI language. Refer to the Taxonomy values dynamic translation section of this page. Language of search request The language to use for the search request. By default the search request will be made using the current UI language. Synonyms Ability to define synonyms for the search querytext. Synonyms can be configured in a two-ways mode. Paging settings \u00b6 Setting Description Show paging Displays or not the paging control at the bottom. Number of items per page Corresponds to the number of search results to retrieve per page. Number of pages to display in range The number of page digits to display in the range. Hide navigation buttons If set, hide the previous and next page buttons. Hide first/last navigation buttons If set, hide the last and first navigation buttons. Hide navigation buttons If set, hide the previous, next, first and last if disabled (i.e. no page available). Styling Options \u00b6 Setting Description Web Part Title Shows a title for this Web Part. Set blank if you don't want a title. Show blank if no result Shows nothing if there is no result. If a WP title is set, this will be hidden as well. Show result count Shows the result count and entered keywords. Result Layouts options Choose the template to use to display search results. Some layouts are defined by default but you can create your own either by clicking on the \"Custom\" tile, or \"Edit template\" from an existing chosen template. In custom mode, you can set an external template. It has to be in the same SharePoint tenant. Behind the scenes, the Office UI React controls are used. Custom code templates will also automatically be displayed here upon registration. See the templating documentation for more information about templating. Result types Allows you to set a custom template at item level according to a specific condition (ex: FileType equals 'pdf'). Miscellaneous: Taxonomy values dynamic translation \u00b6 The search results Web Part supports automatic translation for taxonomy based filters and result metadata according to current site language. To get it work, you must map a new refinable managed property associated with ows_taxId_ crawled property and turn on the 'Localization Enabled' toggle in the search results property pane: When you enable this flag, you can still use the original property value for whatever reason by using the following property format in your Handlebars template: <propertyName> + TaxId (ex: owstaxidmetadataalltagsinfo will contain the translated terms and owstaxidmetadataalltagsinfoTaxId ) will contain the original value of the managed property). Out of the box query variables \u00b6 The following out of the box query variables are supported/tested: Site and site collection properties \u00b6 Query variable Definition {Site} or {Site.URL} URL of the site from where the query was issued. For example, this value can be used to query content of the managed property Path. {Site.ID} GUID of site from where the query was issued. This value corresponds to the value of the managed property SiteID. {Site.LCID} Numeric value of the locale as specified by the Regional Settings in the Site Settings on the Site from where the query was issued. {Site.Locale} Language of the Site from where the query was issued in ll-cc format \u2014 for example, en-us. {Site.<property>} Any property from the property bag of the site (SPWeb) from where the query was issued, including custom properties. {SiteCollection} or {SiteCollection.URL} URL of site collection from where the query was issued. For example, this value can be used to query content of the managed property Path. {SiteCollection.ID} GUID of site collection from where the query was issued. {SiteCollection.LCID} Numeric value of the locale as specified by the Regional Settings in the Site Settings on the Site Collection from where the query was issued. {SiteCollection.Locale} Language of the Site Collection from where the query was issued in ll-cc format \u2014 for example, en-us. {SiteCollection.<property>} Any property from the property bag of the root site (SPWeb) in the site collection (SPSite) from where the query was issued, including custom properties. URL token and request properties \u00b6 Query variable Definition {URLToken.<integer>} A value from the URL of a page. The integer represents the position of the value in the URL as counted from right to left. For example, for the page http://www.contoso/audio/mp3/1010101, the query variable {URLToken.1} will query for the last value in the URL, 1010101. The query variable {URLToken.3} will query for the third last property in the URL, audio. You can query for values up to the ninth last position in a URL. {Request.<PropertyName>} A value from the current http request - for example, {Request.Url}. User properties \u00b6 Query variable Definition {User} or {User.Name} Display name of the user who issued the query. For example, this value can be used to query content of the managed property Author. {User.Email} Email address of the user who issued the query. For example, this value can be used to query content of the managed property WorkEmail. {User.PreferredContentLanguage} Language as specified as Preferred Content Language in the profile of the user who issued the query. {User.PreferredDisplayLanguage} Language as specified as Preferred Display Language in the profile of the user who issued the query. {User.<property>} Any property from the user profile of the user who issued the query \u2014 for example, SPS-Interests, including custom properties. Other properties \u00b6 Query variable Definition {Today+/- <integer value for number of days>} A date calculated by adding/subtracting the specified number of days to/from the date when the query is issued. Date format is YYYY-MM-DD. For example, this value can be used to query content of the managed property LastModifiedTime. {SearchBoxQuery} or {searchTerms} The query value entered into a search box on a page. {CurrentDisplayLanguage} The current display language based on MUI in ll-cc format. {CurrentDisplayLCID} Numeric value of the current display language based on MUI in ll-cc format. Custom query variables \u00b6 The following custom query variables are supported: Query variable Definition {Page.<FieldName>} The value of a field on the page from where the query was issued. For example, if the page from where the query was issued contained a site column named \"ContentOwner,\" specifying {Page.ContentOwner} would allow you to query for the value of \"ContentOwner.\" FieldName is the internal name of the field. When used with taxonomy columns, use {Page.<FieldName>.Label} or {Page.<FieldName>.TermID} {CurrentYear} Todays's date four digits, 2018 {CurrentMonth} Today's month, 1-12 {CurrentDate} Today's date, 1-31 {QueryString.<ParameterName>} A value from a query string in the URL of the current page. For example, if the URL of the current page contains a query string such as ItemNumber=567, you could obtain the value 567 by specifying {QueryString.ItemNumber}. {QueryString.<ParameterName>} A value from a query string in the URL of the current page. For example, if the URL of the current page contains a query string such as ItemNumber=567, you could obtain the value 567 by specifying {QueryString.ItemNumber}. {PageContext.<ParameterName>} A value from the legacyPageContext object on the page. For example, if the legacyPageContext object of the current page contains a property \"hubSiteId\": \"166aa115-7ae7-4c21-9e02-9e0c8872be28\", you could obtain the value 166aa115-7ae7-4c21-9e02-9e0c8872be28 by specifying {PageContext.hubSiteId}. The property name is case sensitive! {TenantUrl} URL of the tenant (root site) Use the 'OR' operator \u00b6 To deal with mutli valued properties (like taxonomy multi or choices), you can use the 'OR' operator syntax {|<property><operator><multi_valuesporperty>} . The search query will be expanded like this: ((<property><operator><value_1>) OR (<property><operator><value_2>) OR (<property><operator><value_3>) ...) Examples: Using an user profile multi values taxonomy property: {|owstaxidmetadataalltagsinfo:{User.SPS-Hashtags}} Using a page multi values taxonomy property: {|owstaxidmetadataalltagsinfo:{Page.myTaxonomyMultiColumn.TermID}} Using a page multi values choice property: {|RefinableStringXX:{Page.myChoiceMultiColumn}} At any time, you can see the resolved query using the 'Debug' layout an inspecting the queryModification property. Best bets \u00b6 This WP supports SharePoint best bets via SharePoint query rules: Filters deep links \u00b6 You can pre-select refinement filters by using the filters URL query string parameter. They can be used with or without the search filters Web Part but need at least a search results Web Part on the page. The URL parameter format is as follow: ?filters=[{\"n\":\"<property-name>\",\"t\":[\"<condition1>\",\"<condition2>\",...],\"o\":\"<operator>\"}] Where: n : the refiner managed property name (ex: RefinableStringXX ) t : the condition tokens. This must be an array even with a single value. Raw text values and FQL expressions are allowed here. o : the operator to use between condition values (optionnal). Pre-selected filters are only applied at page load . Provided refinement filter values are independant from the search filters Web Part configuration. URL params refinement filters take priority over default refinement filters set in the search results Web Part options. Examples \u00b6 Use free text values ?filters=[{\"n\":\"FileType\",\"t\":[\"docx\"]}] FQL expressions with multiple values ?filters=[{\"n\":\"FileType\",\"t\":[\"equals('docx')\",\"equals('pptx')\"],\"o\":\"or\"}] If the targeted refiner template doesn't support multi values, only the first matching value will be selected by default. Date intervals ?filters=[{\"n\":\"Created\",\"t\":[\"yearAgo\"]}] Valid values are yesterday , weekAgo , monthAgo , threeMonthsAgo , yearAgo , olderThanYear . Date range ?filters=[{\"n\":\"Created\",\"t\":[\"range(2019-09-01T04:00:00.000Z,max)\"],\"o\":\"or\"}] Taxonomy values ?filters=[{\"n\":\"owstaxidmetadataalltagsinfo\",\"t\":[\"IT\",\"string('Governance')\"],\"o\":\"or\"}] // Only the 'Governance' results will show up since 'IT' is tokenized to HEX ?filters=[{\"n\":\"owstaxidmetadataalltagsinfo\",\"t\":[\"string('IT')\",\"string('Governance')\"],\"o\":\"or\"}] // 'IT' and 'Governance' results will show up Persona ?filters=[{\"n\":\"RefinableString05\",\"t\":[\"string('Franck')\"],\"o\":\"or\"}] Filter containing substring value ?filters=[{\"n\":\"FileType\",\"t\":[\"ppt*\"]}] OR ?filters=[{\"n\":\"FileType\",\"t\":[\"string('ppt*')\"]}] Use multiple refiner properties ?filters=[{\"n\":\"Created\",\"t\":[\"yearAgo\"],\"o\":\"or\"},{\"n\":\"FileType\",\"t\":[\"equals('docx')\",\"equals('pptx')\"],\"o\":\"or\"}] How default selected values are set in the search filters WP? \u00b6 If a search filters Web Part is connected to a search results WP, the refinement values will be automatically selected at page load according to this mechanism: When the provided condition IS NOT an FQL expression (ex: \"t\":[\"docx\"]), the value is converted to HEX and matched with the refinement results retrieved from the search engine. This token is then used to determine default selected state. When the provided condition IS an FQL expression (ex: \"t\":[\"equals('docx')\",\"equals('pptx')\"] ), the value is left untouched and matched with the refinement results by determining the common substring values and determine default selected state. It means in this case, mutliple refinement results can match a single provided condition (ex: 'Franck*' will match 'Cornu, Franck' or 'Franck Cornu' so they will both selected by default).","title":"Search Results - v3"},{"location":"v3/search-parts/search-results/#search-results-v3","text":"Table of contents Page 1 Page 2 Page 3","title":"Search Results - v3"},{"location":"v3/search-parts/search-results/#search-query-configuration","text":"Setting Description Search query keywords Here you choose to use a static search query or a query coming from a data source. It is recommended to use the associated Web Part coming with this sample. The search query is in KQL format so you can use search query variables (See this post to know which ones are allowed). You can only plug one source to this Web Part.","title":"Search Query Configuration"},{"location":"v3/search-parts/search-results/#search-settings","text":"Setting Description Query template The search query template in KQL format. You can use search variables here (like Path:{Site}). Result Source Identifier The GUID of a SharePoint result source. Sort order The initial search results sort order, where you can use one or multiple properties to sort by. By default, results are sorted by created date (ascending) and size (descending). Remove these values to reset default sorting Sortable fields The search managed properties to use for sorting. With SharePoint Online, you have to reuse the default ones to do so (RefinableStringXX etc.). The order is the same as they will appear in the sort panel. You can also provide your own custom labels using the following format RefinableString01:\"You custom filter label\",RefinableString02:\"You custom filter label\",... If no sortable fields are provided, the 'Sort' button will not be visible. Connect to a search refiners Web Part If enable, select the search refiners Web Part to use on the current page to get selected filters. It is a 2 ways connection so don't forget to connect the targeted search refiners to the search results Web Part as well. Connect to a search verticals Web Part If enable, select the search verticals Web Part to connect to. Enable Query Rules Enable the query rules if applies. Turn this options 'on' to display your SharePoint Promoted results (links only) and make result blocks available to custom renderers. Include OneDrive results Include OneDrive results if applicable. Turn this option 'on' to make users' personal OneDrive results available to custom renderers. Read more here . Selected properties The search managed properties to retrieve. You can select them from a predefined list or add them as free text if not listed. Then, these properties are available in your Handlebars template with the syntax ( item.property_name or property_name inside the {{#each}} loop). The Web Part needs the following managed properties to get it work ( \"Title,Path,Filename,SiteLogo,PreviewUrl,PictureThumbnailURL,ServerRedirectedPreviewURL,ServerRedirectedURL,HitHighlightedSummary,FileType,ServerRedirectedEmbedURL,ParentLink,owstaxidmetadataalltagsinfo,SPSiteURL,SiteTitle,IsContainer,IsListItem,HtmlFileType,SiteId,WebId,UniqueID,OriginalPath,FileExtension,NormSiteID,NormListID,NormUniqueID,Created,contentclass,DefaultEncodingURL,Author,AuthorOWSUSER\" ). It you remove them, they will be re-added automatically on the next page refresh . Refinement filters The default refinement filters to apply to the query. Unlike URL filters params, these won't select the default values in the Search Filters WP if connected. Enable taxonomy values localization for refiners and results If set, the Web Part will try to translate the taxonomy term IDs to their corresponding label according to the curent UI language. Refer to the Taxonomy values dynamic translation section of this page. Language of search request The language to use for the search request. By default the search request will be made using the current UI language. Synonyms Ability to define synonyms for the search querytext. Synonyms can be configured in a two-ways mode.","title":"Search Settings"},{"location":"v3/search-parts/search-results/#paging-settings","text":"Setting Description Show paging Displays or not the paging control at the bottom. Number of items per page Corresponds to the number of search results to retrieve per page. Number of pages to display in range The number of page digits to display in the range. Hide navigation buttons If set, hide the previous and next page buttons. Hide first/last navigation buttons If set, hide the last and first navigation buttons. Hide navigation buttons If set, hide the previous, next, first and last if disabled (i.e. no page available).","title":"Paging settings"},{"location":"v3/search-parts/search-results/#styling-options","text":"Setting Description Web Part Title Shows a title for this Web Part. Set blank if you don't want a title. Show blank if no result Shows nothing if there is no result. If a WP title is set, this will be hidden as well. Show result count Shows the result count and entered keywords. Result Layouts options Choose the template to use to display search results. Some layouts are defined by default but you can create your own either by clicking on the \"Custom\" tile, or \"Edit template\" from an existing chosen template. In custom mode, you can set an external template. It has to be in the same SharePoint tenant. Behind the scenes, the Office UI React controls are used. Custom code templates will also automatically be displayed here upon registration. See the templating documentation for more information about templating. Result types Allows you to set a custom template at item level according to a specific condition (ex: FileType equals 'pdf').","title":"Styling Options"},{"location":"v3/search-parts/search-results/#miscellaneous-taxonomy-values-dynamic-translation","text":"The search results Web Part supports automatic translation for taxonomy based filters and result metadata according to current site language. To get it work, you must map a new refinable managed property associated with ows_taxId_ crawled property and turn on the 'Localization Enabled' toggle in the search results property pane: When you enable this flag, you can still use the original property value for whatever reason by using the following property format in your Handlebars template: <propertyName> + TaxId (ex: owstaxidmetadataalltagsinfo will contain the translated terms and owstaxidmetadataalltagsinfoTaxId ) will contain the original value of the managed property).","title":"Miscellaneous: Taxonomy values dynamic translation"},{"location":"v3/search-parts/search-results/#out-of-the-box-query-variables","text":"The following out of the box query variables are supported/tested:","title":"Out of the box query variables"},{"location":"v3/search-parts/search-results/#site-and-site-collection-properties","text":"Query variable Definition {Site} or {Site.URL} URL of the site from where the query was issued. For example, this value can be used to query content of the managed property Path. {Site.ID} GUID of site from where the query was issued. This value corresponds to the value of the managed property SiteID. {Site.LCID} Numeric value of the locale as specified by the Regional Settings in the Site Settings on the Site from where the query was issued. {Site.Locale} Language of the Site from where the query was issued in ll-cc format \u2014 for example, en-us. {Site.<property>} Any property from the property bag of the site (SPWeb) from where the query was issued, including custom properties. {SiteCollection} or {SiteCollection.URL} URL of site collection from where the query was issued. For example, this value can be used to query content of the managed property Path. {SiteCollection.ID} GUID of site collection from where the query was issued. {SiteCollection.LCID} Numeric value of the locale as specified by the Regional Settings in the Site Settings on the Site Collection from where the query was issued. {SiteCollection.Locale} Language of the Site Collection from where the query was issued in ll-cc format \u2014 for example, en-us. {SiteCollection.<property>} Any property from the property bag of the root site (SPWeb) in the site collection (SPSite) from where the query was issued, including custom properties.","title":"Site and site collection properties"},{"location":"v3/search-parts/search-results/#url-token-and-request-properties","text":"Query variable Definition {URLToken.<integer>} A value from the URL of a page. The integer represents the position of the value in the URL as counted from right to left. For example, for the page http://www.contoso/audio/mp3/1010101, the query variable {URLToken.1} will query for the last value in the URL, 1010101. The query variable {URLToken.3} will query for the third last property in the URL, audio. You can query for values up to the ninth last position in a URL. {Request.<PropertyName>} A value from the current http request - for example, {Request.Url}.","title":"URL token and request properties"},{"location":"v3/search-parts/search-results/#user-properties","text":"Query variable Definition {User} or {User.Name} Display name of the user who issued the query. For example, this value can be used to query content of the managed property Author. {User.Email} Email address of the user who issued the query. For example, this value can be used to query content of the managed property WorkEmail. {User.PreferredContentLanguage} Language as specified as Preferred Content Language in the profile of the user who issued the query. {User.PreferredDisplayLanguage} Language as specified as Preferred Display Language in the profile of the user who issued the query. {User.<property>} Any property from the user profile of the user who issued the query \u2014 for example, SPS-Interests, including custom properties.","title":"User properties"},{"location":"v3/search-parts/search-results/#other-properties","text":"Query variable Definition {Today+/- <integer value for number of days>} A date calculated by adding/subtracting the specified number of days to/from the date when the query is issued. Date format is YYYY-MM-DD. For example, this value can be used to query content of the managed property LastModifiedTime. {SearchBoxQuery} or {searchTerms} The query value entered into a search box on a page. {CurrentDisplayLanguage} The current display language based on MUI in ll-cc format. {CurrentDisplayLCID} Numeric value of the current display language based on MUI in ll-cc format.","title":"Other properties"},{"location":"v3/search-parts/search-results/#custom-query-variables","text":"The following custom query variables are supported: Query variable Definition {Page.<FieldName>} The value of a field on the page from where the query was issued. For example, if the page from where the query was issued contained a site column named \"ContentOwner,\" specifying {Page.ContentOwner} would allow you to query for the value of \"ContentOwner.\" FieldName is the internal name of the field. When used with taxonomy columns, use {Page.<FieldName>.Label} or {Page.<FieldName>.TermID} {CurrentYear} Todays's date four digits, 2018 {CurrentMonth} Today's month, 1-12 {CurrentDate} Today's date, 1-31 {QueryString.<ParameterName>} A value from a query string in the URL of the current page. For example, if the URL of the current page contains a query string such as ItemNumber=567, you could obtain the value 567 by specifying {QueryString.ItemNumber}. {QueryString.<ParameterName>} A value from a query string in the URL of the current page. For example, if the URL of the current page contains a query string such as ItemNumber=567, you could obtain the value 567 by specifying {QueryString.ItemNumber}. {PageContext.<ParameterName>} A value from the legacyPageContext object on the page. For example, if the legacyPageContext object of the current page contains a property \"hubSiteId\": \"166aa115-7ae7-4c21-9e02-9e0c8872be28\", you could obtain the value 166aa115-7ae7-4c21-9e02-9e0c8872be28 by specifying {PageContext.hubSiteId}. The property name is case sensitive! {TenantUrl} URL of the tenant (root site)","title":"Custom query variables"},{"location":"v3/search-parts/search-results/#use-the-or-operator","text":"To deal with mutli valued properties (like taxonomy multi or choices), you can use the 'OR' operator syntax {|<property><operator><multi_valuesporperty>} . The search query will be expanded like this: ((<property><operator><value_1>) OR (<property><operator><value_2>) OR (<property><operator><value_3>) ...) Examples: Using an user profile multi values taxonomy property: {|owstaxidmetadataalltagsinfo:{User.SPS-Hashtags}} Using a page multi values taxonomy property: {|owstaxidmetadataalltagsinfo:{Page.myTaxonomyMultiColumn.TermID}} Using a page multi values choice property: {|RefinableStringXX:{Page.myChoiceMultiColumn}} At any time, you can see the resolved query using the 'Debug' layout an inspecting the queryModification property.","title":"Use the 'OR' operator"},{"location":"v3/search-parts/search-results/#best-bets","text":"This WP supports SharePoint best bets via SharePoint query rules:","title":"Best bets"},{"location":"v3/search-parts/search-results/#filters-deep-links","text":"You can pre-select refinement filters by using the filters URL query string parameter. They can be used with or without the search filters Web Part but need at least a search results Web Part on the page. The URL parameter format is as follow: ?filters=[{\"n\":\"<property-name>\",\"t\":[\"<condition1>\",\"<condition2>\",...],\"o\":\"<operator>\"}] Where: n : the refiner managed property name (ex: RefinableStringXX ) t : the condition tokens. This must be an array even with a single value. Raw text values and FQL expressions are allowed here. o : the operator to use between condition values (optionnal). Pre-selected filters are only applied at page load . Provided refinement filter values are independant from the search filters Web Part configuration. URL params refinement filters take priority over default refinement filters set in the search results Web Part options.","title":"Filters deep links"},{"location":"v3/search-parts/search-results/#examples","text":"Use free text values ?filters=[{\"n\":\"FileType\",\"t\":[\"docx\"]}] FQL expressions with multiple values ?filters=[{\"n\":\"FileType\",\"t\":[\"equals('docx')\",\"equals('pptx')\"],\"o\":\"or\"}] If the targeted refiner template doesn't support multi values, only the first matching value will be selected by default. Date intervals ?filters=[{\"n\":\"Created\",\"t\":[\"yearAgo\"]}] Valid values are yesterday , weekAgo , monthAgo , threeMonthsAgo , yearAgo , olderThanYear . Date range ?filters=[{\"n\":\"Created\",\"t\":[\"range(2019-09-01T04:00:00.000Z,max)\"],\"o\":\"or\"}] Taxonomy values ?filters=[{\"n\":\"owstaxidmetadataalltagsinfo\",\"t\":[\"IT\",\"string('Governance')\"],\"o\":\"or\"}] // Only the 'Governance' results will show up since 'IT' is tokenized to HEX ?filters=[{\"n\":\"owstaxidmetadataalltagsinfo\",\"t\":[\"string('IT')\",\"string('Governance')\"],\"o\":\"or\"}] // 'IT' and 'Governance' results will show up Persona ?filters=[{\"n\":\"RefinableString05\",\"t\":[\"string('Franck')\"],\"o\":\"or\"}] Filter containing substring value ?filters=[{\"n\":\"FileType\",\"t\":[\"ppt*\"]}] OR ?filters=[{\"n\":\"FileType\",\"t\":[\"string('ppt*')\"]}] Use multiple refiner properties ?filters=[{\"n\":\"Created\",\"t\":[\"yearAgo\"],\"o\":\"or\"},{\"n\":\"FileType\",\"t\":[\"equals('docx')\",\"equals('pptx')\"],\"o\":\"or\"}]","title":"Examples"},{"location":"v3/search-parts/search-results/#how-default-selected-values-are-set-in-the-search-filters-wp","text":"If a search filters Web Part is connected to a search results WP, the refinement values will be automatically selected at page load according to this mechanism: When the provided condition IS NOT an FQL expression (ex: \"t\":[\"docx\"]), the value is converted to HEX and matched with the refinement results retrieved from the search engine. This token is then used to determine default selected state. When the provided condition IS an FQL expression (ex: \"t\":[\"equals('docx')\",\"equals('pptx')\"] ), the value is left untouched and matched with the refinement results by determining the common substring values and determine default selected state. It means in this case, mutliple refinement results can match a single provided condition (ex: 'Franck*' will match 'Cornu, Franck' or 'Franck Cornu' so they will both selected by default).","title":"How default selected values are set in the search filters WP?"},{"location":"v3/search-parts/search-verticals/","text":"Search Verticals - v3 \u00b6 Table of contents The search verticals Web Part allow users to search through predefined scopes (i.e videos, people, etc.) or redirect to an arbitrary URL. We simply replace the query template and result source dynamically for a chosen vertical. To get it work, you simply need to connect the search verticals Web Part to a search results Web Part using the associated option. Also, if you want to display counts for each verticals when a new query is performed (for instance a search box query or an URL fragment update), connect the search results Web Part to the search verticals one (two ways connection in this case). Verticals Options \u00b6 Page 1 Page 2 Page 3 Setting Description Search verticals Configure the search verticals to display. When you set a query template or a result source id for a vertical, these override the ones in the connected search results. You can also set an icon for a vertical using Office UI Fabric icons names . The query keywords are shared across all verticals. For instance, if you need default results for tabs, just specify a default query in the connected search results Web Part (like * ) and the {searchTerms} expression in your vertical query template. Also, selected refinement filters are reset, if present, when a new vertical is selected. You can also specify an arbitrary link for a vertical. In this case, the selected vertical won't be sent to the connected search results WP. You can use tokens inside the Link URL field. The supported tokens are {Page.xxx} , {CurrentDate} , {CurrentYear} , {CurrentMonth} , {URLToken.xxx} , {QueryString.xxx} , {PageContext.xxx} , {TenantUrl} , {searchTerms} and {SearchBoxQuery} . Show result counts Indicates if the results count should be displayed for each vertical. In this case, you need to connect the Web Part to an existing search results Web Part on the page. Default vertical querystring parameter Parameter to pick up from the query string to default activate a vertical. Matches the name of the tab. Enter v if you for pass in v=People as part of your URL to match a vertical named People . Connect to a search results Web Part The result web part the vertical web part is connected to.","title":"Search Verticals - v3"},{"location":"v3/search-parts/search-verticals/#search-verticals-v3","text":"Table of contents The search verticals Web Part allow users to search through predefined scopes (i.e videos, people, etc.) or redirect to an arbitrary URL. We simply replace the query template and result source dynamically for a chosen vertical. To get it work, you simply need to connect the search verticals Web Part to a search results Web Part using the associated option. Also, if you want to display counts for each verticals when a new query is performed (for instance a search box query or an URL fragment update), connect the search results Web Part to the search verticals one (two ways connection in this case).","title":"Search Verticals - v3"},{"location":"v3/search-parts/search-verticals/#verticals-options","text":"Page 1 Page 2 Page 3 Setting Description Search verticals Configure the search verticals to display. When you set a query template or a result source id for a vertical, these override the ones in the connected search results. You can also set an icon for a vertical using Office UI Fabric icons names . The query keywords are shared across all verticals. For instance, if you need default results for tabs, just specify a default query in the connected search results Web Part (like * ) and the {searchTerms} expression in your vertical query template. Also, selected refinement filters are reset, if present, when a new vertical is selected. You can also specify an arbitrary link for a vertical. In this case, the selected vertical won't be sent to the connected search results WP. You can use tokens inside the Link URL field. The supported tokens are {Page.xxx} , {CurrentDate} , {CurrentYear} , {CurrentMonth} , {URLToken.xxx} , {QueryString.xxx} , {PageContext.xxx} , {TenantUrl} , {searchTerms} and {SearchBoxQuery} . Show result counts Indicates if the results count should be displayed for each vertical. In this case, you need to connect the Web Part to an existing search results Web Part on the page. Default vertical querystring parameter Parameter to pick up from the query string to default activate a vertical. Matches the name of the tab. Enter v if you for pass in v=People as part of your URL to match a vertical named People . Connect to a search results Web Part The result web part the vertical web part is connected to.","title":"Verticals Options"},{"location":"v3/search-parts/templating/","text":"Templating - v3 \u00b6 Table of contents Available layouts \u00b6 By default, the search results Web Part comes with multiples layouts. All layouts rely on Handlebars templates. The templating feature comes directly from the original react-content-query-webpart so thanks to @spplante! Some provided templates embed web components (via custom HTML elements) wrapping Office UI Fabric React controls (ex: DetailsList, DocumentCard). For those, you can only customize them using the provided template options and placeholders and it means you don't have access to their underlying HTML markup. Simple List \u00b6 Displays the search results as a simple list with previews: Details List \u00b6 Displays the search results inside a tabular view using the associated Office UI Fabric DetailsList control : Template options \u00b6 Option Description Manage columns Allows you to build you own table view by adding or removing columns dynamically. For each column, you get the following options: Column name : the column name to display. Minimum width in px : the minimum width of the column. Maximum width in px : the maximum width of the column. Sortable : allows you to sort column values alphabetically when the column header is clicked (ascending or descending). Resizable : allows you to resize the column dynamically in display mode. Multiline : if the column column should be multiline. By default only ellipsis (...) will be display for larger text. Link to item : if enabled, wrap the column value with an URL link pointing to the search result item (i.e. Path). This option is especially suitable for the 'Title' column. Column value : you can choose here either a managed property value (from the list or as free text) without any transformation or use an Handlebars expression by clicking on the checkbox next to it. In this case, all helpers from the main template are available and you can also add you own HTML markup in the column value. For HTML fields you can use the special variable @theme to use theme colors (ex: @theme.palette.themePrimary ) Show file icon Hide or display the file icon in the first column. Compact mode Display the details list in compact mode. Document Card \u00b6 Displays search results as cards view using the associated Office UI Fabric DocumentCard control : Note : you can still manage the number of cards displayed by row by changing the grid CSS classes directly in the template: {{#each items as |item|}} <div class=\"ms-Grid-col ms-sm12 ms-md6 ms-lg4\"> <!-- 3 cards by row here for large screen resolution --> ... </div> {{/each}} Template options \u00b6 Option Description Manage card fields Allows you to define you own values for card placeholder fields. By default, the document card fields come with predefined mappings but you can set your own. As a field value, you can choose either a managed property value (from the list or as free text) and without any transformation or use an Handlebars expression by clicking on the checkbox next to it. In this case, all helpers from the main template are available. Also, if the field doesn't have the 'Allow HTML' indication flag enabled, it means the value will be always interpreted as text, whatever if you set an HTML value. Otherwise, your value will be interpreted as HTML for those fields (ex: ' Location ' and ' Tags ' placeholder fields). In order to use the property IconSrc , ensure you do not specify a property for File Extension to not override the custom IconSrc. A custom icon should be a 16x16 pixel image. For HTML fields you can use the special variable @theme to use theme colors (ex: @theme.palette.themePrimary ). If you don't set a value for those fields (i.e an empty value), they won't appear in the UI: | Enable result preview | If enabled, displays a preview callout when the document card image is clicked. | Show file icon | Hide or display the file icon in the card. | Compact mode | Display the cards in compact mode. Carousel/Slider \u00b6 Displays search results as a carousel using the Flickity library (the same used in the PnP Starter Intranet solution ). Customize slide content \u00b6 By default, documents card are displayed in the slider but you can add your own HTML markup for each slide inside the {{#>slider}} Handlebars partial: {{#>slider items=(JSONstringify @root.items 2) options=(JSONstringify @root.sliderOptions)}} <!-- Slide content goes here --> <div class=\"slide\"> <!-- Your HTML markup --> </div> {{/slider}} Item properties and all Handlebars helpers are available inside the partial block (Ex: {{Title}} ). However, to use them you must escape every Handlebars expression with the '\\' character (ex: {{Title}} becomes \\{{Title}} ). This is because we don't want these expressions to be interpreted by the global Handlebars context. Actually, we use an internal compilation process with the item context so we need the raw expression to output the item properties and helpers correctly. For instance if you want an image carousel only, your HTML markup would be: {{#>slider items=(JSONstringify @root.items 2) options=(JSONstringify @root.sliderOptions)}} <img src=\"\\{{getPreviewSrc item}}\"/> {{/slider}} Or only person cards: {{#>slider items=(JSONstringify @root.items 2) options=(JSONstringify @root.sliderOptions)}} <div class=\"slide\"> \\{{#with (split AccountName '|')}} <pnp-persona-card data-image-url=\"/_layouts/15/userphoto.aspx?size=L&username=\\{{[2]}}\" data-text=\"\\{{../FirstName}} \\{{../LastName}}\" data-secondary-text=\"\\{{../JobTitle}}\" data-tertiary-text=\"\\{{[2]}}\" data-optional-text=\"\\{{../WorkPhone}}\" data-persona-size=\"14\" > </pnp-persona-card> \\{{/with}} </div> {{/slider}} In the case of images, the slider is smart enough to adjsut the height automatically so you don't need to specify explicit values. However, you can set an arbitrary size for the slides updating the CSS slide class. Template options \u00b6 Option Description Auto play If enabled, slides move automatically every X seconds. Auto play duration Move elements every X seconds. Pause on hover If enabled, pause the slider on mouse hover. Number of elements to group together in slides Groups cells together in slides. Show page dots Enable or disable slider navigation. You can adjust the dots position by updating the .flickity-page-dots CSS class. Infinite scrolling Enable or disable infinite scrolling on the carousel. Debug View \u00b6 Displays search result items and global Handlebars context in a debug view (read only): People View \u00b6 Displays people: Template options \u00b6 Option Description Manage persona fields Allows you to define you own values for card placeholder fields. Like the document card, by default, the persona card fields come with predefined mappings but you can set your own. Picture size The size of the person picture to isplay. The more the size is and the more information will be displayed for each item and vice versa. Disable info on hover Disable the hover behavior for people info panel. (for future use) Customize templates with Handlebars \u00b6 If provided layouts don't meet your requirements, you can modifiy them or start from scratch using Handlebars and the following helpers/features: Accessing items \u00b6 To iterate the regular result set use: {{#each items as |item|}} < div > {{Title}} ... </ div > {{/each}} To iterate promoted results use: {{#each promotedResults as |promotedResult|}} < div > {{Title}} ... </ div > {{/each}} To iterate result block results use: {{#each secondaryResults as |secondaryResult|}} < div > {{Title}} ... </ div > {{/each}} Styling \u00b6 You can write your own CSS styles inside templates. However, all CSS rules (including @media rules) will be prefixed automatically by an unique ID according to the follwoing pattern ( pnp-modern-search-template_\\<Web Part instance ID> ) to make sure styles are isolated from other Web Parts on the page. Sanitized HTML \u00b6 The HTML is sanitized automatically preventing XSS attacks using DOMPurify . It means for instance, you cannot add your own <script> tags or inline JavaScript. Handlebars helpers \u00b6 The following custom helpers are available in addition to the handlebars-helpers : Setting Description {{showResultsCount}} Boolean flag corresponding to the associated in the property pane. {{totalRows}} The result count. {{maxResultsCount}} The number of results configured to retrieve in the web part. {{actualResultsCount}} The actual number of results retrived. {{keywords}} The search query. {{getSummary HitHighlightedSummary}} Format the HitHighlightedSummary property with recognized words in bold. {{getDate <date_managed_property> \"<format>\" <time handling> <isZ>}} Format the date with Moment.js according to the current language. Date in the managed property should be on the form 2018-09-10T06:29:25.0000000Z for the function to work. <time handling> is optional and takes 0 = format to browsers time zone (default) 1 = ignore Z time and handle as browsers local time zone 2 = strip time and set to 00:00:00 in browsers local time zone 3 = display in the time zone for the current web 4 = display in the time zone from the uers profile <isZ> ( true/false ) is optional and will append Z to the date if missing when set to true. {{getPreviewSrc item}} Determine the image thumbnail URL if applicable. Include NormSiteID, NormListID and NormUniqueID as managed properties to ensure previews for Pages and Files. {{getUrl item <forceDirectLink>}} Get the item URL. For a document, it means the URL to the Office Online instance or the direct URL (to download it). <forceDirectLink> ( true/false ) is optional with a default value of false . Set to true to avoid smart logic to create the open URL. {{getUrlField managed_propertyOWSURLH \"URL/Title\"}} Return the URL or Title part of a URL field managed property. {{getCountMessage totalRows <?keywords>}} Display a friendly message displaying the result and the entered keywords. {{<search_managed_property_name>}} Any valid search managed property returned in the results set. These are typically managed properties set in the \"Selected properties\" setting in the property pane. You don't need to prefix them with item. if you are in the \"each\" loop. {{webUrl}} The current web relative url. Use {{@root/webUrl}} inside a loop. {{siteUrl}} The current site relative url. Use {{@root/siteUrl}} inside a loop. {{spellingSuggestion}} Spelling suggestions returned for the query to be used for \"Did you mean\" functionality. {{getUniqueCount items \"property\"}} Get the unique count of a property over the result set (or another array) {{getUniqueCount array}} Get the unique count of objects in an array. Example: [1,1,1,2,2,4] would return 3 . {{getUnique items \"NewsCategory\"}} Return the unique values as a new array based on an array or property of an object in the array. {{regex <exp> <string> }} Match a regular expression against a string. {{#times 10}}<span>{{this}}</span>{{/times}} Iterate X times over a block {{#group items by=\"owstaxidmetadataalltagsinfo\"}} Group items by a specific results property. See https://github.com/shannonmoeller/handlebars-group-by for usage. {{#getAttachments LinkOfficeChild}} <a href=\"{{url}}\">{{fileName}}</href> {{/getAttachments}} Get Attachments is Handlebars block helper intended to be used with the context variables it provides like this (url and filename) in the example.The helper is intended to be used only with the LinkOfficeChild managed property wich is the default managed property for list attachments. {{getPageContext \"property\"}} Retrieve SPFx page context data to show in the template. See https://docs.microsoft.com/en-us/javascript/api/sp-page-context/pagecontext for possible values. Example {{getPageContext \"user.displayName\"}} {{getPageContext \"cultureInfo.currentUICultureName\"}} . Note: Casing matches the object model. {{coalesce ManagedProperty1 ManagedProperty2 \"Fallback value\"}} Returns the first non-null value from the list of values presented. An alias of the handlebars-helpers {{default}} helper. You can also define your own in the BaseTemplateService.ts file. See helper-moment for date samples using moment. Web-components \u00b6 The web part has a couple of helper web-components to ease rendering, used by the default templates. You may also use these in your custom templates. Pick one of the default templates, then click on customize to see how they are used. It's important to prefix these web-components with pnp- . document-card document-card-shimmers details-list video-card debug-view slider-component persona-card persona-card-shimmers fabric-icon - You only need to set one property, which are evaluated in order if multiple ones are set. The data-error-image, used to set a fallback image on error, is used only when the data-image-url fails to load, it will not load a fallback for data-icon-name usage. < pnp-fabric-icon data-image-url = '[url to icon - pri 1]' data-file-extension = '[file extension - pri 2]' data-icon-name = '[office ui fabric icon name - pri 3]' data-size = '16 | 20 | 32 (default) | 40 | 48 | 64 | 96' data-error-image = '[url to image]' > </ pnp-fabric-icon > - accordion - provides the ability to collaspe content in search result in an accordion fashion < pnp-accordion data-accordion-header-text = \"Accordion Example\" data-theme = \"Default (default) | Neutral\" data-size = \"# | 12 (default)\" data-start-open = \"true | false (default)\" data-rounded-corners = \"true | false (default)\" > < h4 > Title: {{Title}} </ h4 > </ pnp-accordion > Example: popup - provides the ability to popup content in a modal window within the search result < pnp-popup > < template id = \"popupclick\" > < span > Popup Example - Click Me </ span > </ template > < template id = \"popupheader\" > < span > Title: {{Title}} </ span >< br />< span > Header HTML here </ span > </ template > < template id = \"popupbody\" > < span > Title: {{Title}} </ span >< br />< span > Body HTML here </ span > </ template > </ pnp-popup > Example: lookup-list-expander - Ever needed to get additional data from a list or library in search? This provides that ability based on a lookup column of the result item. In the example below, a related documents lookup column was added to the document library. This lookup column was a lookup back to the same document library so the admin could pick additional related documents for the documents. Remember for the inner template to be executed inside of the component the handlebar expressions must be escaped with '\\' character (ex: {{Title}} becomes \\{{Title}} ). < pnp-lookup-list-expander data-list-url = \"https://<tenant>/sites/<sitename>\" data-list-id = \"{{ListID}}\" data-list-item-id = \"{{ListItemID}}\" data-column-name = \"RelatedDocuments\" data-lookup-list-fields = \"Id,Title,FileRef,FileLeafRef,DocumentType,BusinessUnit/Title\" > < div > < pnp-fabric-icon data-file-extension = \"\\{{FileExtension}}\" ></ pnp-fabric-icon > < span >< a href = \"\\{{FileRef}}?web=1\" > \\{{{Title}}} </ a ></ span > < span > < a href = \"\\{{FileRef}}\" > < pnp-fabric-icon data-icon-name = \"Download\" data-size = \"16\" ></ pnp-fabric-icon > </ a > </ span > < div > < span > \\{{{DocumentType}}} </ span > < span > \\{{{BusinessUnit.Title}}} </ span > </ div > </ div > </ pnp-lookup-list-expander > The above example would display inside of the accordion like: Use result types \u00b6 Use the result types features form the property pane options to split your templates according to results characteristics instead of making a huge central template with multiple conditions. They can be defined in 'inline' mode or using an external file. You can also use the sorting option to determine to order of evaluation for each condition. The following operators are supported: - Equals - Not equals - Contains - StartsWith - Greater Or Equal - Less Or Equal - Less than - Greater than - Is not null To use it in your main template, just follow this pattern. This block is not mandatory. {{#> resultTypes}} {{!-- The block below will be used as default item template if no result types matched --}} <div class=\"template_result\"> <!-- Your default template markup --> </div> {{/resultTypes}} Handlebars partials are used behind the scenes and conditions are built dynamically using a recursive if/else structure. Elements previews \u00b6 Previews are available by default for the simple list layout, for Office documents and Office 365 videos (not Microsoft Stream). The embed URL is directly taken from the ServerRedirectedEmbedURL managed property retrieved from the search results. The WebPart must have the following selected properties in the configuration to get the preview feature work (they are set by default): - ServerRedirectedPreviewURL - ServerRedirectedURL - contentclass - ServerRedirectedEmbedURL - DefaultEncodingURL This preview is displayed as an iframe or a video tag when the user clicks on the corresponding preview image or compliant HTML elements. To enable the callout preview in your templates, your HTML elements must have the document-preview-item or video-preview-item CSS class and provide the following attributes: data-src : the URL of the preview image. data-url : the URL of the iframe source or the video. data-fileext : the file extension for the video (for video only). Preview on documents <img class=\"document-preview-item\" data-src=\"{{ServerRedirectedPreviewURL}}\" data-url=\"{{Path}}\"/> Preview on videos <img class=\"video-preview-item\" src=\"{{PictureThumbnailURL}}\" data-src=\"{{PictureThumbnailURL}}\" data-url=\"{{DefaultEncodingURL}}\" data-fileext=\"{{FileType}}\"/> Custom placeholders (i.e. shimmers) \u00b6 You can define your own placeholders according your template markup. They will be loaded automatically before the results are loaded. To do this, insert your HTML markup as follow in your template content: <content id=\"placeholder\"> <style> /* Insert your CSS overrides here */ </style> <div class=\"placeholder_root\"> <!-- Your placeholder content --> </div> </content> Notice your template content must be enclosed in a <content id=\"template\"> tag if you define placeholders. Work with SharePoint theme \u00b6 A theme variable is available in the root Handlebars context. It contains all current theme information that can use in your CSS classes or inline styles. Example: <style> .example-themePrimary a { color: {{@root.theme.palette.themePrimary}}; } </style> To see all available values, you can inspect the theme objetc using the 'Debug View' layout. Notice the values are udpated dynamically every time you udpate the theme through the UI. Custom code renderers \u00b6 You may also define your own renderers, which most often should be SPFx application customizers. These should use the resultservice to register themselves as renderers, and will upon registration be available as a rendering choice in the \"Result Layouts\" Section. More information about custom code renderers may be found in a separate project search-custom-renderer , which showcases such a renderer.","title":"Templating - v3"},{"location":"v3/search-parts/templating/#templating-v3","text":"Table of contents","title":"Templating - v3"},{"location":"v3/search-parts/templating/#available-layouts","text":"By default, the search results Web Part comes with multiples layouts. All layouts rely on Handlebars templates. The templating feature comes directly from the original react-content-query-webpart so thanks to @spplante! Some provided templates embed web components (via custom HTML elements) wrapping Office UI Fabric React controls (ex: DetailsList, DocumentCard). For those, you can only customize them using the provided template options and placeholders and it means you don't have access to their underlying HTML markup.","title":"Available layouts"},{"location":"v3/search-parts/templating/#simple-list","text":"Displays the search results as a simple list with previews:","title":"Simple List"},{"location":"v3/search-parts/templating/#details-list","text":"Displays the search results inside a tabular view using the associated Office UI Fabric DetailsList control :","title":"Details List"},{"location":"v3/search-parts/templating/#template-options","text":"Option Description Manage columns Allows you to build you own table view by adding or removing columns dynamically. For each column, you get the following options: Column name : the column name to display. Minimum width in px : the minimum width of the column. Maximum width in px : the maximum width of the column. Sortable : allows you to sort column values alphabetically when the column header is clicked (ascending or descending). Resizable : allows you to resize the column dynamically in display mode. Multiline : if the column column should be multiline. By default only ellipsis (...) will be display for larger text. Link to item : if enabled, wrap the column value with an URL link pointing to the search result item (i.e. Path). This option is especially suitable for the 'Title' column. Column value : you can choose here either a managed property value (from the list or as free text) without any transformation or use an Handlebars expression by clicking on the checkbox next to it. In this case, all helpers from the main template are available and you can also add you own HTML markup in the column value. For HTML fields you can use the special variable @theme to use theme colors (ex: @theme.palette.themePrimary ) Show file icon Hide or display the file icon in the first column. Compact mode Display the details list in compact mode.","title":"Template options"},{"location":"v3/search-parts/templating/#document-card","text":"Displays search results as cards view using the associated Office UI Fabric DocumentCard control : Note : you can still manage the number of cards displayed by row by changing the grid CSS classes directly in the template: {{#each items as |item|}} <div class=\"ms-Grid-col ms-sm12 ms-md6 ms-lg4\"> <!-- 3 cards by row here for large screen resolution --> ... </div> {{/each}}","title":"Document Card"},{"location":"v3/search-parts/templating/#template-options_1","text":"Option Description Manage card fields Allows you to define you own values for card placeholder fields. By default, the document card fields come with predefined mappings but you can set your own. As a field value, you can choose either a managed property value (from the list or as free text) and without any transformation or use an Handlebars expression by clicking on the checkbox next to it. In this case, all helpers from the main template are available. Also, if the field doesn't have the 'Allow HTML' indication flag enabled, it means the value will be always interpreted as text, whatever if you set an HTML value. Otherwise, your value will be interpreted as HTML for those fields (ex: ' Location ' and ' Tags ' placeholder fields). In order to use the property IconSrc , ensure you do not specify a property for File Extension to not override the custom IconSrc. A custom icon should be a 16x16 pixel image. For HTML fields you can use the special variable @theme to use theme colors (ex: @theme.palette.themePrimary ). If you don't set a value for those fields (i.e an empty value), they won't appear in the UI: | Enable result preview | If enabled, displays a preview callout when the document card image is clicked. | Show file icon | Hide or display the file icon in the card. | Compact mode | Display the cards in compact mode.","title":"Template options"},{"location":"v3/search-parts/templating/#carouselslider","text":"Displays search results as a carousel using the Flickity library (the same used in the PnP Starter Intranet solution ).","title":"Carousel/Slider"},{"location":"v3/search-parts/templating/#customize-slide-content","text":"By default, documents card are displayed in the slider but you can add your own HTML markup for each slide inside the {{#>slider}} Handlebars partial: {{#>slider items=(JSONstringify @root.items 2) options=(JSONstringify @root.sliderOptions)}} <!-- Slide content goes here --> <div class=\"slide\"> <!-- Your HTML markup --> </div> {{/slider}} Item properties and all Handlebars helpers are available inside the partial block (Ex: {{Title}} ). However, to use them you must escape every Handlebars expression with the '\\' character (ex: {{Title}} becomes \\{{Title}} ). This is because we don't want these expressions to be interpreted by the global Handlebars context. Actually, we use an internal compilation process with the item context so we need the raw expression to output the item properties and helpers correctly. For instance if you want an image carousel only, your HTML markup would be: {{#>slider items=(JSONstringify @root.items 2) options=(JSONstringify @root.sliderOptions)}} <img src=\"\\{{getPreviewSrc item}}\"/> {{/slider}} Or only person cards: {{#>slider items=(JSONstringify @root.items 2) options=(JSONstringify @root.sliderOptions)}} <div class=\"slide\"> \\{{#with (split AccountName '|')}} <pnp-persona-card data-image-url=\"/_layouts/15/userphoto.aspx?size=L&username=\\{{[2]}}\" data-text=\"\\{{../FirstName}} \\{{../LastName}}\" data-secondary-text=\"\\{{../JobTitle}}\" data-tertiary-text=\"\\{{[2]}}\" data-optional-text=\"\\{{../WorkPhone}}\" data-persona-size=\"14\" > </pnp-persona-card> \\{{/with}} </div> {{/slider}} In the case of images, the slider is smart enough to adjsut the height automatically so you don't need to specify explicit values. However, you can set an arbitrary size for the slides updating the CSS slide class.","title":"Customize slide content"},{"location":"v3/search-parts/templating/#template-options_2","text":"Option Description Auto play If enabled, slides move automatically every X seconds. Auto play duration Move elements every X seconds. Pause on hover If enabled, pause the slider on mouse hover. Number of elements to group together in slides Groups cells together in slides. Show page dots Enable or disable slider navigation. You can adjust the dots position by updating the .flickity-page-dots CSS class. Infinite scrolling Enable or disable infinite scrolling on the carousel.","title":"Template options"},{"location":"v3/search-parts/templating/#debug-view","text":"Displays search result items and global Handlebars context in a debug view (read only):","title":"Debug View"},{"location":"v3/search-parts/templating/#people-view","text":"Displays people:","title":"People View"},{"location":"v3/search-parts/templating/#template-options_3","text":"Option Description Manage persona fields Allows you to define you own values for card placeholder fields. Like the document card, by default, the persona card fields come with predefined mappings but you can set your own. Picture size The size of the person picture to isplay. The more the size is and the more information will be displayed for each item and vice versa. Disable info on hover Disable the hover behavior for people info panel. (for future use)","title":"Template options"},{"location":"v3/search-parts/templating/#customize-templates-with-handlebars","text":"If provided layouts don't meet your requirements, you can modifiy them or start from scratch using Handlebars and the following helpers/features:","title":"Customize templates with Handlebars"},{"location":"v3/search-parts/templating/#accessing-items","text":"To iterate the regular result set use: {{#each items as |item|}} < div > {{Title}} ... </ div > {{/each}} To iterate promoted results use: {{#each promotedResults as |promotedResult|}} < div > {{Title}} ... </ div > {{/each}} To iterate result block results use: {{#each secondaryResults as |secondaryResult|}} < div > {{Title}} ... </ div > {{/each}}","title":"Accessing items"},{"location":"v3/search-parts/templating/#styling","text":"You can write your own CSS styles inside templates. However, all CSS rules (including @media rules) will be prefixed automatically by an unique ID according to the follwoing pattern ( pnp-modern-search-template_\\<Web Part instance ID> ) to make sure styles are isolated from other Web Parts on the page.","title":"Styling"},{"location":"v3/search-parts/templating/#sanitized-html","text":"The HTML is sanitized automatically preventing XSS attacks using DOMPurify . It means for instance, you cannot add your own <script> tags or inline JavaScript.","title":"Sanitized HTML"},{"location":"v3/search-parts/templating/#handlebars-helpers","text":"The following custom helpers are available in addition to the handlebars-helpers : Setting Description {{showResultsCount}} Boolean flag corresponding to the associated in the property pane. {{totalRows}} The result count. {{maxResultsCount}} The number of results configured to retrieve in the web part. {{actualResultsCount}} The actual number of results retrived. {{keywords}} The search query. {{getSummary HitHighlightedSummary}} Format the HitHighlightedSummary property with recognized words in bold. {{getDate <date_managed_property> \"<format>\" <time handling> <isZ>}} Format the date with Moment.js according to the current language. Date in the managed property should be on the form 2018-09-10T06:29:25.0000000Z for the function to work. <time handling> is optional and takes 0 = format to browsers time zone (default) 1 = ignore Z time and handle as browsers local time zone 2 = strip time and set to 00:00:00 in browsers local time zone 3 = display in the time zone for the current web 4 = display in the time zone from the uers profile <isZ> ( true/false ) is optional and will append Z to the date if missing when set to true. {{getPreviewSrc item}} Determine the image thumbnail URL if applicable. Include NormSiteID, NormListID and NormUniqueID as managed properties to ensure previews for Pages and Files. {{getUrl item <forceDirectLink>}} Get the item URL. For a document, it means the URL to the Office Online instance or the direct URL (to download it). <forceDirectLink> ( true/false ) is optional with a default value of false . Set to true to avoid smart logic to create the open URL. {{getUrlField managed_propertyOWSURLH \"URL/Title\"}} Return the URL or Title part of a URL field managed property. {{getCountMessage totalRows <?keywords>}} Display a friendly message displaying the result and the entered keywords. {{<search_managed_property_name>}} Any valid search managed property returned in the results set. These are typically managed properties set in the \"Selected properties\" setting in the property pane. You don't need to prefix them with item. if you are in the \"each\" loop. {{webUrl}} The current web relative url. Use {{@root/webUrl}} inside a loop. {{siteUrl}} The current site relative url. Use {{@root/siteUrl}} inside a loop. {{spellingSuggestion}} Spelling suggestions returned for the query to be used for \"Did you mean\" functionality. {{getUniqueCount items \"property\"}} Get the unique count of a property over the result set (or another array) {{getUniqueCount array}} Get the unique count of objects in an array. Example: [1,1,1,2,2,4] would return 3 . {{getUnique items \"NewsCategory\"}} Return the unique values as a new array based on an array or property of an object in the array. {{regex <exp> <string> }} Match a regular expression against a string. {{#times 10}}<span>{{this}}</span>{{/times}} Iterate X times over a block {{#group items by=\"owstaxidmetadataalltagsinfo\"}} Group items by a specific results property. See https://github.com/shannonmoeller/handlebars-group-by for usage. {{#getAttachments LinkOfficeChild}} <a href=\"{{url}}\">{{fileName}}</href> {{/getAttachments}} Get Attachments is Handlebars block helper intended to be used with the context variables it provides like this (url and filename) in the example.The helper is intended to be used only with the LinkOfficeChild managed property wich is the default managed property for list attachments. {{getPageContext \"property\"}} Retrieve SPFx page context data to show in the template. See https://docs.microsoft.com/en-us/javascript/api/sp-page-context/pagecontext for possible values. Example {{getPageContext \"user.displayName\"}} {{getPageContext \"cultureInfo.currentUICultureName\"}} . Note: Casing matches the object model. {{coalesce ManagedProperty1 ManagedProperty2 \"Fallback value\"}} Returns the first non-null value from the list of values presented. An alias of the handlebars-helpers {{default}} helper. You can also define your own in the BaseTemplateService.ts file. See helper-moment for date samples using moment.","title":"Handlebars helpers"},{"location":"v3/search-parts/templating/#web-components","text":"The web part has a couple of helper web-components to ease rendering, used by the default templates. You may also use these in your custom templates. Pick one of the default templates, then click on customize to see how they are used. It's important to prefix these web-components with pnp- . document-card document-card-shimmers details-list video-card debug-view slider-component persona-card persona-card-shimmers fabric-icon - You only need to set one property, which are evaluated in order if multiple ones are set. The data-error-image, used to set a fallback image on error, is used only when the data-image-url fails to load, it will not load a fallback for data-icon-name usage. < pnp-fabric-icon data-image-url = '[url to icon - pri 1]' data-file-extension = '[file extension - pri 2]' data-icon-name = '[office ui fabric icon name - pri 3]' data-size = '16 | 20 | 32 (default) | 40 | 48 | 64 | 96' data-error-image = '[url to image]' > </ pnp-fabric-icon > - accordion - provides the ability to collaspe content in search result in an accordion fashion < pnp-accordion data-accordion-header-text = \"Accordion Example\" data-theme = \"Default (default) | Neutral\" data-size = \"# | 12 (default)\" data-start-open = \"true | false (default)\" data-rounded-corners = \"true | false (default)\" > < h4 > Title: {{Title}} </ h4 > </ pnp-accordion > Example: popup - provides the ability to popup content in a modal window within the search result < pnp-popup > < template id = \"popupclick\" > < span > Popup Example - Click Me </ span > </ template > < template id = \"popupheader\" > < span > Title: {{Title}} </ span >< br />< span > Header HTML here </ span > </ template > < template id = \"popupbody\" > < span > Title: {{Title}} </ span >< br />< span > Body HTML here </ span > </ template > </ pnp-popup > Example: lookup-list-expander - Ever needed to get additional data from a list or library in search? This provides that ability based on a lookup column of the result item. In the example below, a related documents lookup column was added to the document library. This lookup column was a lookup back to the same document library so the admin could pick additional related documents for the documents. Remember for the inner template to be executed inside of the component the handlebar expressions must be escaped with '\\' character (ex: {{Title}} becomes \\{{Title}} ). < pnp-lookup-list-expander data-list-url = \"https://<tenant>/sites/<sitename>\" data-list-id = \"{{ListID}}\" data-list-item-id = \"{{ListItemID}}\" data-column-name = \"RelatedDocuments\" data-lookup-list-fields = \"Id,Title,FileRef,FileLeafRef,DocumentType,BusinessUnit/Title\" > < div > < pnp-fabric-icon data-file-extension = \"\\{{FileExtension}}\" ></ pnp-fabric-icon > < span >< a href = \"\\{{FileRef}}?web=1\" > \\{{{Title}}} </ a ></ span > < span > < a href = \"\\{{FileRef}}\" > < pnp-fabric-icon data-icon-name = \"Download\" data-size = \"16\" ></ pnp-fabric-icon > </ a > </ span > < div > < span > \\{{{DocumentType}}} </ span > < span > \\{{{BusinessUnit.Title}}} </ span > </ div > </ div > </ pnp-lookup-list-expander > The above example would display inside of the accordion like:","title":"Web-components"},{"location":"v3/search-parts/templating/#use-result-types","text":"Use the result types features form the property pane options to split your templates according to results characteristics instead of making a huge central template with multiple conditions. They can be defined in 'inline' mode or using an external file. You can also use the sorting option to determine to order of evaluation for each condition. The following operators are supported: - Equals - Not equals - Contains - StartsWith - Greater Or Equal - Less Or Equal - Less than - Greater than - Is not null To use it in your main template, just follow this pattern. This block is not mandatory. {{#> resultTypes}} {{!-- The block below will be used as default item template if no result types matched --}} <div class=\"template_result\"> <!-- Your default template markup --> </div> {{/resultTypes}} Handlebars partials are used behind the scenes and conditions are built dynamically using a recursive if/else structure.","title":"Use result types"},{"location":"v3/search-parts/templating/#elements-previews","text":"Previews are available by default for the simple list layout, for Office documents and Office 365 videos (not Microsoft Stream). The embed URL is directly taken from the ServerRedirectedEmbedURL managed property retrieved from the search results. The WebPart must have the following selected properties in the configuration to get the preview feature work (they are set by default): - ServerRedirectedPreviewURL - ServerRedirectedURL - contentclass - ServerRedirectedEmbedURL - DefaultEncodingURL This preview is displayed as an iframe or a video tag when the user clicks on the corresponding preview image or compliant HTML elements. To enable the callout preview in your templates, your HTML elements must have the document-preview-item or video-preview-item CSS class and provide the following attributes: data-src : the URL of the preview image. data-url : the URL of the iframe source or the video. data-fileext : the file extension for the video (for video only). Preview on documents <img class=\"document-preview-item\" data-src=\"{{ServerRedirectedPreviewURL}}\" data-url=\"{{Path}}\"/> Preview on videos <img class=\"video-preview-item\" src=\"{{PictureThumbnailURL}}\" data-src=\"{{PictureThumbnailURL}}\" data-url=\"{{DefaultEncodingURL}}\" data-fileext=\"{{FileType}}\"/>","title":"Elements previews"},{"location":"v3/search-parts/templating/#custom-placeholders-ie-shimmers","text":"You can define your own placeholders according your template markup. They will be loaded automatically before the results are loaded. To do this, insert your HTML markup as follow in your template content: <content id=\"placeholder\"> <style> /* Insert your CSS overrides here */ </style> <div class=\"placeholder_root\"> <!-- Your placeholder content --> </div> </content> Notice your template content must be enclosed in a <content id=\"template\"> tag if you define placeholders.","title":"Custom placeholders (i.e. shimmers)"},{"location":"v3/search-parts/templating/#work-with-sharepoint-theme","text":"A theme variable is available in the root Handlebars context. It contains all current theme information that can use in your CSS classes or inline styles. Example: <style> .example-themePrimary a { color: {{@root.theme.palette.themePrimary}}; } </style> To see all available values, you can inspect the theme objetc using the 'Debug View' layout. Notice the values are udpated dynamically every time you udpate the theme through the UI.","title":"Work with SharePoint theme"},{"location":"v3/search-parts/templating/#custom-code-renderers","text":"You may also define your own renderers, which most often should be SPFx application customizers. These should use the resultservice to register themselves as renderers, and will upon registration be available as a rendering choice in the \"Result Layouts\" Section. More information about custom code renderers may be found in a separate project search-custom-renderer , which showcases such a renderer.","title":"Custom code renderers"},{"location":"v3/search-query-enhancer/debug-locally/","text":"Search Query Enhancer - Debug locally - v3 \u00b6 Table of contents Prerequisites \u00b6 In VSCode, open the root folder ./functions . Install all dependencies using npm i . Install Azure CLI on youre machine. Install Azure Function Core tools globaly using npm i -g azure-functions-core-tools@2.7.1149 (version 2). In a Node.js console, build the solution using npm run build:dev cmd. For production use, execute npm run build (minified version of the JS code). In a Node.js console, from the functions/dist folder, run the following command func start . In VSCode, launch the 'Debug Local Azure Function' debug configuration Set breakpoints directly in your '.ts' files Send your requests either using Postman with the localhost address according to your settings (i.e. http://localhost:7071/api/enhanceQuery ) or directly in the 'Search Box Webpart' via the 'Service URL' parameter. For the last scenario you can use npm i -g ngrok to redirect calls to your localhost function using the following command ngrok http 7071 . Azure Function Proxy configuration \u00b6 This solution uses an Azure function proxy to get an only single endpoint URL for multiple functions. See the proxies.json file to see defined routes. How to deploy the solution to Azure ? \u00b6 Development scenario \u00b6 We recommend to use Visual Studio Code to work with this solution. In VSCode, download the Azure Function extension Sign-in to to Azure account into the extension In a Node.js console, build the application using the command npm run build (minified version) Use the \"Deploy to Function App\" feature (in the extension top bar) using the 'dist' folder. Make sure you've run the npm run build cmd before. Upload the application settings ( local.settings.json ) Production scenario with CI \u00b6 A deploy.ps1 script is available to also deploy this function into your Azure environment. From you Azure portal, create a new empty function Set the Azure_Function_Name value in the local.settings.json accordingly. Login to Azure using az login then run deploy.ps1 script with your parameters. OR If you use Azure DevOps, you can simply use the default build template and release task for Azure Functions ommiting this script. Build template Release task In both scenarios, you can test your function using Postman. If you test it using a SPFx component, don't forget to add the SharePoint domain to the CORS settings to allow this origin:","title":"Search Query Enhancer - Debug locally - v3"},{"location":"v3/search-query-enhancer/debug-locally/#search-query-enhancer-debug-locally-v3","text":"Table of contents","title":"Search Query Enhancer - Debug locally - v3"},{"location":"v3/search-query-enhancer/debug-locally/#prerequisites","text":"In VSCode, open the root folder ./functions . Install all dependencies using npm i . Install Azure CLI on youre machine. Install Azure Function Core tools globaly using npm i -g azure-functions-core-tools@2.7.1149 (version 2). In a Node.js console, build the solution using npm run build:dev cmd. For production use, execute npm run build (minified version of the JS code). In a Node.js console, from the functions/dist folder, run the following command func start . In VSCode, launch the 'Debug Local Azure Function' debug configuration Set breakpoints directly in your '.ts' files Send your requests either using Postman with the localhost address according to your settings (i.e. http://localhost:7071/api/enhanceQuery ) or directly in the 'Search Box Webpart' via the 'Service URL' parameter. For the last scenario you can use npm i -g ngrok to redirect calls to your localhost function using the following command ngrok http 7071 .","title":"Prerequisites"},{"location":"v3/search-query-enhancer/debug-locally/#azure-function-proxy-configuration","text":"This solution uses an Azure function proxy to get an only single endpoint URL for multiple functions. See the proxies.json file to see defined routes.","title":"Azure Function Proxy configuration"},{"location":"v3/search-query-enhancer/debug-locally/#how-to-deploy-the-solution-to-azure","text":"","title":"How to deploy the solution to Azure ?"},{"location":"v3/search-query-enhancer/debug-locally/#development-scenario","text":"We recommend to use Visual Studio Code to work with this solution. In VSCode, download the Azure Function extension Sign-in to to Azure account into the extension In a Node.js console, build the application using the command npm run build (minified version) Use the \"Deploy to Function App\" feature (in the extension top bar) using the 'dist' folder. Make sure you've run the npm run build cmd before. Upload the application settings ( local.settings.json )","title":"Development scenario"},{"location":"v3/search-query-enhancer/debug-locally/#production-scenario-with-ci","text":"A deploy.ps1 script is available to also deploy this function into your Azure environment. From you Azure portal, create a new empty function Set the Azure_Function_Name value in the local.settings.json accordingly. Login to Azure using az login then run deploy.ps1 script with your parameters. OR If you use Azure DevOps, you can simply use the default build template and release task for Azure Functions ommiting this script. Build template Release task In both scenarios, you can test your function using Postman. If you test it using a SPFx component, don't forget to add the SharePoint domain to the CORS settings to allow this origin:","title":"Production scenario with CI"},{"location":"v3/search-query-enhancer/getting-started/","text":"Search Query Enhancer - v3 \u00b6 Table of contents Summary \u00b6 The search query enhancer function can be used in conjunction with the Query Modifier feature to alter the query before being sent to the search results Web Part. This sample demonstrates the following principles to help you with the setup: Create an Azure function using TypeScript and Webpack. The original setup was reused from this article with only few adjustments. Connect Azure Function to an SPFx component Use third party back end services like Microsoft LUIS or Text Analysis to interpret a search query and enhance it with NLP services. In this sample, the function is secured by a function code. For production use, refer to this article to protect and use it with Azure AD and SPFx. In real world scenarios, you may want add your own intents and build your enhanced search queries accordingly. Use this sample as a starter. Why LUIS instead of SharePoint search query rules? \u00b6 Easy to manage for power users .They don't have to deal with complex SharePoint concepts. With LUIS, they can manage and refine the model more easily in a friendly comprehensive interface. Real time monitoring. Power users can review utterances submitted by end users in the LUIS portal and what keywords are entered. They can add new terms as synonyms automatically from the utterances and identify new intentions more precisely. Extensible model with custom intents mapped to predefined well know SharePoint search queries. Able to plug in the Bing Spell checker automatically to correct mispeleld words and get a clean query Set up the solution \u00b6 In the www.luis.ai portal, imports new applications from the JSON files in the /luis folder. In Azure, create keys for the following Microsoft Cognitive Services: Language Understanding Bing Spell Check v7 Text Analytics Fill the following values in the local.settings.json file according to your environment: Setting Description LUIS_SubscriptionKey The key value for LUIS retrieved from the Azure portal. LUIS_AzureRegion Azure region where you created the LUIS key. Ex: ' westus '. Bing_SpellCheckApiKey The Bing Spell Check API key retrieved from the Azure portal. TextAnalytics_SubscriptionKey The key value for Text Analytics Service retrieved from the Azure portal TextAnalytics_AzureRegion Azure region where you created the Text Analytics key. Ex: ' westus '. Add keys to your LUIS applications Train and publish the LUIS applications Fill LUIS app IDs in the luismappings.json file in the functions/enhanceQuery/config/ folder according to your environment. Play with the function! Intents \u00b6 Intent Description PnP.SearchByKeywords The default intent for the search query. Used to improve free text searches for SharePoint (90% of users queries in the portal). None Needed to avoid unrelevant query such as noise words, trolling or insulting words Entities \u00b6 Entity Type Description Recognition method keyPhrase Builtin This prebuilt enity catches important keywords in the phrase. In this case, we treat these values as a \"free\" keyword which will be matched with all relevant SharePoint search managed properties. Machine Learning","title":"Search Query Enhancer - v3"},{"location":"v3/search-query-enhancer/getting-started/#search-query-enhancer-v3","text":"Table of contents","title":"Search Query Enhancer - v3"},{"location":"v3/search-query-enhancer/getting-started/#summary","text":"The search query enhancer function can be used in conjunction with the Query Modifier feature to alter the query before being sent to the search results Web Part. This sample demonstrates the following principles to help you with the setup: Create an Azure function using TypeScript and Webpack. The original setup was reused from this article with only few adjustments. Connect Azure Function to an SPFx component Use third party back end services like Microsoft LUIS or Text Analysis to interpret a search query and enhance it with NLP services. In this sample, the function is secured by a function code. For production use, refer to this article to protect and use it with Azure AD and SPFx. In real world scenarios, you may want add your own intents and build your enhanced search queries accordingly. Use this sample as a starter.","title":"Summary"},{"location":"v3/search-query-enhancer/getting-started/#why-luis-instead-of-sharepoint-search-query-rules","text":"Easy to manage for power users .They don't have to deal with complex SharePoint concepts. With LUIS, they can manage and refine the model more easily in a friendly comprehensive interface. Real time monitoring. Power users can review utterances submitted by end users in the LUIS portal and what keywords are entered. They can add new terms as synonyms automatically from the utterances and identify new intentions more precisely. Extensible model with custom intents mapped to predefined well know SharePoint search queries. Able to plug in the Bing Spell checker automatically to correct mispeleld words and get a clean query","title":"Why LUIS instead of SharePoint search query rules?"},{"location":"v3/search-query-enhancer/getting-started/#set-up-the-solution","text":"In the www.luis.ai portal, imports new applications from the JSON files in the /luis folder. In Azure, create keys for the following Microsoft Cognitive Services: Language Understanding Bing Spell Check v7 Text Analytics Fill the following values in the local.settings.json file according to your environment: Setting Description LUIS_SubscriptionKey The key value for LUIS retrieved from the Azure portal. LUIS_AzureRegion Azure region where you created the LUIS key. Ex: ' westus '. Bing_SpellCheckApiKey The Bing Spell Check API key retrieved from the Azure portal. TextAnalytics_SubscriptionKey The key value for Text Analytics Service retrieved from the Azure portal TextAnalytics_AzureRegion Azure region where you created the Text Analytics key. Ex: ' westus '. Add keys to your LUIS applications Train and publish the LUIS applications Fill LUIS app IDs in the luismappings.json file in the functions/enhanceQuery/config/ folder according to your environment. Play with the function!","title":"Set up the solution"},{"location":"v3/search-query-enhancer/getting-started/#intents","text":"Intent Description PnP.SearchByKeywords The default intent for the search query. Used to improve free text searches for SharePoint (90% of users queries in the portal). None Needed to avoid unrelevant query such as noise words, trolling or insulting words","title":"Intents"},{"location":"v3/search-query-enhancer/getting-started/#entities","text":"Entity Type Description Recognition method keyPhrase Builtin This prebuilt enity catches important keywords in the phrase. In this case, we treat these values as a \"free\" keyword which will be matched with all relevant SharePoint search managed properties. Machine Learning","title":"Entities"}]}